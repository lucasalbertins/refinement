transparent normal
include "SMovement_coreassertions.csp"
ID_DA_1utl_1cb = {1..1}
datatype alphabet_DA_1utl_1cb = move_0_2__1_DA_1utl_1cb_t_alphabet | accept_obstacle_1_DA_1utl_1cb_t_alphabet| DecisionNode_MergeNode0_DA_1utl_1cb_t_alphabet| chaos_DA_1utl_1cb_t_alphabet| DecisionNode_MergeNode1_DA_1utl_1cb_t_alphabet| InitialNode0_DA_1utl_1cb_t_alphabet
robochart_DA_1utl_1cb = "SMovement_coreassertions.csp"
robochart_alphabet_DA_1utl_1cb = {|SMovement::moveCall,SMovement::obstacle.in,SMovement::obstacle.out|}
countCe_DA_1utl_1cb = {1..6}
countUpdate_DA_1utl_1cb = {1..1}
countClear_DA_1utl_1cb = {1..0}
limiteUpdate_DA_1utl_1cb = {(1)..(1)}
channel startActivity_DA_1utl_1cb: ID_DA_1utl_1cb
channel endActivity_DA_1utl_1cb: ID_DA_1utl_1cb
channel ce_DA_1utl_1cb: ID_DA_1utl_1cb.countCe_DA_1utl_1cb
channel clear_DA_1utl_1cb: ID_DA_1utl_1cb.countClear_DA_1utl_1cb
channel update_DA_1utl_1cb: ID_DA_1utl_1cb.countUpdate_DA_1utl_1cb.limiteUpdate_DA_1utl_1cb
channel endDiagram_DA_1utl_1cb: ID_DA_1utl_1cb
channel dc
channel begin, end:  {1..1}
channel chaos:  {1..1}

alphabet_Astah_DA_1utl_1cb = {| startActivity_DA_1utl_1cb, endActivity_DA_1utl_1cb, ce_DA_1utl_1cb, clear_DA_1utl_1cb, update_DA_1utl_1cb, endDiagram_DA_1utl_1cb, dc |}

MAIN = normal(DA_1utl_1cb(1))
END_DIAGRAM_DA_1utl_1cb(id) = endDiagram_DA_1utl_1cb.id -> SKIP
DA_1utl_1cb(ID_DA_1utl_1cb) = (Internal_DA_1utl_1cb(ID_DA_1utl_1cb) [|{|update_DA_1utl_1cb,clear_DA_1utl_1cb,endDiagram_DA_1utl_1cb|}|] TokenManager_DA_1utl_1cb_t(ID_DA_1utl_1cb,0,0))
Internal_DA_1utl_1cb(id) = StartActivity_DA_1utl_1cb(id); Node_DA_1utl_1cb(id); EndActivity_DA_1utl_1cb(id)
StartActivity_DA_1utl_1cb(id) = startActivity_DA_1utl_1cb.id -> SKIP
EndActivity_DA_1utl_1cb(id) = endActivity_DA_1utl_1cb.id -> SKIP
AlphabetDiagram_DA_1utl_1cb(id,move_0_2__1_DA_1utl_1cb_t_alphabet) = {|ce_DA_1utl_1cb.id.5,ce_DA_1utl_1cb.id.3,endDiagram_DA_1utl_1cb.id|}
AlphabetDiagram_DA_1utl_1cb(id,accept_obstacle_1_DA_1utl_1cb_t_alphabet) = {|ce_DA_1utl_1cb.id.6,ce_DA_1utl_1cb.id.5,endDiagram_DA_1utl_1cb.id|}
AlphabetDiagram_DA_1utl_1cb(id,DecisionNode_MergeNode0_DA_1utl_1cb_t_alphabet) = {|ce_DA_1utl_1cb.id.2,ce_DA_1utl_1cb.id.3,ce_DA_1utl_1cb.id.4,endDiagram_DA_1utl_1cb.id|}
AlphabetDiagram_DA_1utl_1cb(id,chaos_DA_1utl_1cb_t_alphabet) = {|ce_DA_1utl_1cb.id.1,endDiagram_DA_1utl_1cb.id|}
AlphabetDiagram_DA_1utl_1cb(id,DecisionNode_MergeNode1_DA_1utl_1cb_t_alphabet) = {|ce_DA_1utl_1cb.id.4,dc,ce_DA_1utl_1cb.id.6,ce_DA_1utl_1cb.id.1,endDiagram_DA_1utl_1cb.id|}
AlphabetDiagram_DA_1utl_1cb(id,InitialNode0_DA_1utl_1cb_t_alphabet) = {|ce_DA_1utl_1cb.id.2,endDiagram_DA_1utl_1cb.id|}
AlphabetDiagram_DA_1utl_1cb_t(id) = union(union(union(union(union(AlphabetDiagram_DA_1utl_1cb(id,move_0_2__1_DA_1utl_1cb_t_alphabet),AlphabetDiagram_DA_1utl_1cb(id,accept_obstacle_1_DA_1utl_1cb_t_alphabet)),AlphabetDiagram_DA_1utl_1cb(id,DecisionNode_MergeNode0_DA_1utl_1cb_t_alphabet)),AlphabetDiagram_DA_1utl_1cb(id,chaos_DA_1utl_1cb_t_alphabet)),AlphabetDiagram_DA_1utl_1cb(id,DecisionNode_MergeNode1_DA_1utl_1cb_t_alphabet)),AlphabetDiagram_DA_1utl_1cb(id,InitialNode0_DA_1utl_1cb_t_alphabet))

ProcessDiagram_DA_1utl_1cb(id,move_0_2__1_DA_1utl_1cb_t_alphabet) = normal(move_0_2__1_DA_1utl_1cb_t(id))
ProcessDiagram_DA_1utl_1cb(id,accept_obstacle_1_DA_1utl_1cb_t_alphabet) = normal(accept_obstacle_1_DA_1utl_1cb_t(id))
ProcessDiagram_DA_1utl_1cb(id,DecisionNode_MergeNode0_DA_1utl_1cb_t_alphabet) = normal(DecisionNode_MergeNode0_DA_1utl_1cb_t(id))
ProcessDiagram_DA_1utl_1cb(id,chaos_DA_1utl_1cb_t_alphabet) = normal(chaos_DA_1utl_1cb_t(id))
ProcessDiagram_DA_1utl_1cb(id,DecisionNode_MergeNode1_DA_1utl_1cb_t_alphabet) = normal(DecisionNode_MergeNode1_DA_1utl_1cb_t(id))
ProcessDiagram_DA_1utl_1cb(id,InitialNode0_DA_1utl_1cb_t_alphabet) = normal(InitialNode0_DA_1utl_1cb_t(id))
chaos_DA_1utl_1cb(id) = ((ce_DA_1utl_1cb.id.1 -> SKIP)); chaos.1 -> SKIP;chaos_DA_1utl_1cb(id)
chaos_DA_1utl_1cb_t(id) = chaos_DA_1utl_1cb(id) /\ END_DIAGRAM_DA_1utl_1cb(id)
InitialNode0_DA_1utl_1cb(id) = update_DA_1utl_1cb.id.1!(1-0) -> ((ce_DA_1utl_1cb.id.2 -> SKIP))
InitialNode0_DA_1utl_1cb_t(id) = InitialNode0_DA_1utl_1cb(id) /\ END_DIAGRAM_DA_1utl_1cb(id)
DecisionNode_MergeNode0_DA_1utl_1cb(id) = ((ce_DA_1utl_1cb.id.2 -> SKIP) [] (ce_DA_1utl_1cb.id.3 -> SKIP)); ce_DA_1utl_1cb.id.4 -> DecisionNode_MergeNode0_DA_1utl_1cb(id)
DecisionNode_MergeNode0_DA_1utl_1cb_t(id) = DecisionNode_MergeNode0_DA_1utl_1cb(id) /\ END_DIAGRAM_DA_1utl_1cb(id)
move_0_2__1_DA_1utl_1cb(id) = ((ce_DA_1utl_1cb.id.5 -> SKIP)); SMovement::moveCall.0.2 -> ((ce_DA_1utl_1cb.id.3 -> SKIP)); move_0_2__1_DA_1utl_1cb(id)
move_0_2__1_DA_1utl_1cb_t(id) = move_0_2__1_DA_1utl_1cb(id) /\ END_DIAGRAM_DA_1utl_1cb(id)
accept_obstacle_1_DA_1utl_1cb(id) = ((ce_DA_1utl_1cb.id.6 -> SKIP)); begin.1 -> end.1 -> SKIP; ((ce_DA_1utl_1cb.id.5 -> SKIP)); accept_obstacle_1_DA_1utl_1cb(id)
accept_obstacle_1_DA_1utl_1cb_t(id) = accept_obstacle_1_DA_1utl_1cb(id) /\ END_DIAGRAM_DA_1utl_1cb(id)
DecisionNode_MergeNode1_DA_1utl_1cb(id) = ce_DA_1utl_1cb.id.4 -> ((dc -> ce_DA_1utl_1cb.id.6 -> SKIP) [] (dc -> ce_DA_1utl_1cb.id.1 -> SKIP)); DecisionNode_MergeNode1_DA_1utl_1cb(id)
DecisionNode_MergeNode1_DA_1utl_1cb_t(id) = DecisionNode_MergeNode1_DA_1utl_1cb(id) /\ END_DIAGRAM_DA_1utl_1cb(id) \{|dc|}
AlphabetMemchaos_DA_1utl_1cb(id) = {|endDiagram_DA_1utl_1cb.id|}

TokenManager_DA_1utl_1cb(id,x,init) = update_DA_1utl_1cb.id?c?y:limiteUpdate_DA_1utl_1cb -> x+y < 10 & x+y > -10 & TokenManager_DA_1utl_1cb(id,x+y,1) [] clear_DA_1utl_1cb.id?c -> endDiagram_DA_1utl_1cb.id -> SKIP [] x == 0 & init == 1 & endDiagram_DA_1utl_1cb.id -> SKIP
TokenManager_DA_1utl_1cb_t(id,x,init) = TokenManager_DA_1utl_1cb(id,x,init)

assert MAIN :[deadlock free]
assert MAIN :[divergence free]
assert MAIN :[deterministic]

NRecurse(S, P) = |~| ev : S @ ev -> P

WAIT(alphabet,event) = 
	NRecurse(diff(alphabet, {event}), WAIT(alphabet,event))
	|~|
	event -> SKIP

WAIT_PROCCESSES_DA_1utl_1cb(processes) = ( ||| CONTROL : processes @ CONTROL )  /\ endDiagram_DA_1utl_1cb?id -> SKIP

Prop_DA_1utl_1cb = PROP_DA_1utl_1cb(Wait_control_processes_DA_1utl_1cb) \ alphabet_Astah_DA_1utl_1cb 

alphabet_robochart_DA_1utl_1cb = {|SMovement::moveCall,SMovement::obstacle.in,SMovement::obstacle.out|}

PROP_DA_1utl_1cb(processes) = (MAIN [|{|begin, end, chaos, endDiagram_DA_1utl_1cb|}|] WAIT_PROCCESSES_DA_1utl_1cb(processes) ) \ {|begin, end, chaos|}

Wait_DA_1utl_1cb_1 = WAIT(alphabet_robochart_DA_1utl_1cb, SMovement::obstacle.in)

Wait_DA_1utl_1cb_control_1 = begin.1 -> Wait_DA_1utl_1cb_1; end.1 -> Wait_DA_1utl_1cb_control_1

Wait_DA_1utl_1cb_chaos_1 = chaos.1 -> CHAOS(alphabet_robochart_DA_1utl_1cb)

Wait_control_processes_DA_1utl_1cb = {Wait_DA_1utl_1cb_control_1, Wait_DA_1utl_1cb_chaos_1}

Node_DA_1utl_1cb(id) = composeNodes_DA_1utl_1cb(id)

composeNodes_DA_1utl_1cb(id) = 
	let
	    alphabet_DA_1utl_1cb_s = seq(alphabet_DA_1utl_1cb)
		composeNodes_(id,<ev>,_) = ProcessDiagram_DA_1utl_1cb(id,ev)
		composeNodes_(id,<ev>^tail,past) = 
			ProcessDiagram_DA_1utl_1cb(id,ev) 
				[|union(diff(AlphabetDiagram_DA_1utl_1cb(id,ev),past),{endDiagram_DA_1utl_1cb.id})|] 
			( composeNodes_(id,tail,union(past,AlphabetDiagram_DA_1utl_1cb(id,ev))) )
	within 
		composeNodes_(id,alphabet_DA_1utl_1cb_s,{})