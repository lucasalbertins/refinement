transparent normal
include "SMovement_coreassertions.csp"
ID_DA_2utl_2cb = {1..1}
datatype alphabet_DA_2utl_2cb = DecisionNode_MergeNode0_DA_2utl_2cb_t_alphabet | chaos_DA_2utl_2cb_t_alphabet| moveCall_0_2__DA_2utl_2cb_t_alphabet| init_DA_2utl_2cb_t_alphabet| chaos2_DA_2utl_2cb_t_alphabet| accept_obstacle_1_DA_2utl_2cb_t_alphabet
robochart_DA_2utl_2cb = "SMovement_coreassertions.csp"
robochart_alphabet_DA_2utl_2cb = {|SMovement::moveCall,SMovement::obstacle.in,SMovement::obstacle.out|}
countCe_DA_2utl_2cb = {1..7}
countUpdate_DA_2utl_2cb = {1..1}
countClear_DA_2utl_2cb = {1..0}
limiteUpdate_DA_2utl_2cb = {(1)..(1)}
channel startActivity_DA_2utl_2cb: ID_DA_2utl_2cb
channel endActivity_DA_2utl_2cb: ID_DA_2utl_2cb
channel ce_DA_2utl_2cb: ID_DA_2utl_2cb.countCe_DA_2utl_2cb
channel clear_DA_2utl_2cb: ID_DA_2utl_2cb.countClear_DA_2utl_2cb
channel update_DA_2utl_2cb: ID_DA_2utl_2cb.countUpdate_DA_2utl_2cb.limiteUpdate_DA_2utl_2cb
channel endDiagram_DA_2utl_2cb: ID_DA_2utl_2cb
channel dc
channel begin, end:  {1..2}
channel chaos:  {1..2}

alphabet_Astah = {| startActivity_DA_2utl_2cb, endActivity_DA_2utl_2cb, ce_DA_2utl_2cb, clear_DA_2utl_2cb, update_DA_2utl_2cb, endDiagram_DA_2utl_2cb, dc |}

MAIN = normal(DA_2utl_2cb(1))
END_DIAGRAM_DA_2utl_2cb(id) = endDiagram_DA_2utl_2cb.id -> SKIP
DA_2utl_2cb(ID_DA_2utl_2cb) = (Internal_DA_2utl_2cb(ID_DA_2utl_2cb) [|{|update_DA_2utl_2cb,clear_DA_2utl_2cb,endDiagram_DA_2utl_2cb|}|] TokenManager_DA_2utl_2cb_t(ID_DA_2utl_2cb,0,0))
Internal_DA_2utl_2cb(id) = StartActivity_DA_2utl_2cb(id); Node_DA_2utl_2cb(id); EndActivity_DA_2utl_2cb(id)
StartActivity_DA_2utl_2cb(id) = startActivity_DA_2utl_2cb.id -> SKIP
EndActivity_DA_2utl_2cb(id) = endActivity_DA_2utl_2cb.id -> SKIP
AlphabetDiagram_DA_2utl_2cb(id,DecisionNode_MergeNode0_DA_2utl_2cb_t_alphabet) = {|ce_DA_2utl_2cb.id.2,dc,ce_DA_2utl_2cb.id.3,ce_DA_2utl_2cb.id.4,ce_DA_2utl_2cb.id.5,endDiagram_DA_2utl_2cb.id|}
AlphabetDiagram_DA_2utl_2cb(id,chaos_DA_2utl_2cb_t_alphabet) = {|ce_DA_2utl_2cb.id.5,chaos.2,endDiagram_DA_2utl_2cb.id|}
AlphabetDiagram_DA_2utl_2cb(id,moveCall_0_2__DA_2utl_2cb_t_alphabet) = {|ce_DA_2utl_2cb.id.6,begin.2,end.2,ce_DA_2utl_2cb.id.7,endDiagram_DA_2utl_2cb.id|}
AlphabetDiagram_DA_2utl_2cb(id,init_DA_2utl_2cb_t_alphabet) = {|update_DA_2utl_2cb.id.1,ce_DA_2utl_2cb.id.1,endDiagram_DA_2utl_2cb.id|}
AlphabetDiagram_DA_2utl_2cb(id,chaos2_DA_2utl_2cb_t_alphabet) = {|ce_DA_2utl_2cb.id.4,chaos.1,endDiagram_DA_2utl_2cb.id|}
AlphabetDiagram_DA_2utl_2cb(id,accept_obstacle_1_DA_2utl_2cb_t_alphabet) = {|ce_DA_2utl_2cb.id.3,begin.1,end.1,ce_DA_2utl_2cb.id.6,endDiagram_DA_2utl_2cb.id|}
AlphabetDiagram_DA_2utl_2cb_t(id) = union(union(union(union(union(AlphabetDiagram_DA_2utl_2cb(id,DecisionNode_MergeNode0_DA_2utl_2cb_t_alphabet),AlphabetDiagram_DA_2utl_2cb(id,chaos_DA_2utl_2cb_t_alphabet)),AlphabetDiagram_DA_2utl_2cb(id,moveCall_0_2__DA_2utl_2cb_t_alphabet)),AlphabetDiagram_DA_2utl_2cb(id,init_DA_2utl_2cb_t_alphabet)),AlphabetDiagram_DA_2utl_2cb(id,chaos2_DA_2utl_2cb_t_alphabet)),AlphabetDiagram_DA_2utl_2cb(id,accept_obstacle_1_DA_2utl_2cb_t_alphabet))

ProcessDiagram_DA_2utl_2cb(id,DecisionNode_MergeNode0_DA_2utl_2cb_t_alphabet) = normal(DecisionNode_MergeNode0_DA_2utl_2cb_t(id))
ProcessDiagram_DA_2utl_2cb(id,chaos_DA_2utl_2cb_t_alphabet) = normal(chaos_DA_2utl_2cb_t(id))
ProcessDiagram_DA_2utl_2cb(id,moveCall_0_2__DA_2utl_2cb_t_alphabet) = normal(moveCall_0_2__DA_2utl_2cb_t(id))
ProcessDiagram_DA_2utl_2cb(id,init_DA_2utl_2cb_t_alphabet) = normal(init_DA_2utl_2cb_t(id))
ProcessDiagram_DA_2utl_2cb(id,chaos2_DA_2utl_2cb_t_alphabet) = normal(chaos2_DA_2utl_2cb_t(id))
ProcessDiagram_DA_2utl_2cb(id,accept_obstacle_1_DA_2utl_2cb_t_alphabet) = normal(accept_obstacle_1_DA_2utl_2cb_t(id))
Node_DA_2utl_2cb(id) = || x:alphabet_DA_2utl_2cb @ [AlphabetDiagram_DA_2utl_2cb(id,x)] ProcessDiagram_DA_2utl_2cb(id,x)
InitialNode0_DA_2utl_2cb_t(id) = update_DA_2utl_2cb.id.1!(1-0) -> ((ce_DA_2utl_2cb.id.1 -> SKIP))
DecisionNode_MergeNode0_DA_2utl_2cb(id) = ce_DA_2utl_2cb.id.2 -> ((dc -> ce_DA_2utl_2cb.id.3 -> SKIP) [] (dc -> ce_DA_2utl_2cb.id.4 -> SKIP) [] (dc -> ce_DA_2utl_2cb.id.5 -> SKIP)); DecisionNode_MergeNode0_DA_2utl_2cb(id)
DecisionNode_MergeNode0_DA_2utl_2cb_t(id) = DecisionNode_MergeNode0_DA_2utl_2cb(id) /\ END_DIAGRAM_DA_2utl_2cb(id) \{|dc|}
accept_obstacle_1_DA_2utl_2cb(id) = ((ce_DA_2utl_2cb.id.3 -> SKIP)); begin.1 -> end.1 -> SKIP; ((ce_DA_2utl_2cb.id.6 -> SKIP)); accept_obstacle_1_DA_2utl_2cb(id)
accept_obstacle_1_DA_2utl_2cb_t(id) = accept_obstacle_1_DA_2utl_2cb(id) /\ END_DIAGRAM_DA_2utl_2cb(id)
moveCall_0_2__DA_2utl_2cb(id) = ((ce_DA_2utl_2cb.id.6 -> SKIP)); begin.2 -> end.2 -> SKIP; ((ce_DA_2utl_2cb.id.7 -> SKIP)); moveCall_0_2__DA_2utl_2cb(id)
moveCall_0_2__DA_2utl_2cb_t(id) = moveCall_0_2__DA_2utl_2cb(id) /\ END_DIAGRAM_DA_2utl_2cb(id)
chaos2_DA_2utl_2cb(id) = ((ce_DA_2utl_2cb.id.4 -> SKIP)); chaos.1 -> SKIP;chaos2_DA_2utl_2cb(id)
chaos2_DA_2utl_2cb_t(id) = chaos2_DA_2utl_2cb(id) /\ END_DIAGRAM_DA_2utl_2cb(id)
chaos_DA_2utl_2cb(id) = ((ce_DA_2utl_2cb.id.5 -> SKIP)); chaos.2 -> SKIP;chaos_DA_2utl_2cb(id)
chaos_DA_2utl_2cb_t(id) = chaos_DA_2utl_2cb(id) /\ END_DIAGRAM_DA_2utl_2cb(id)
init_DA_2utl_2cb_t(id) = (InitialNode0_DA_2utl_2cb_t(id)) /\ END_DIAGRAM_DA_2utl_2cb(id)
AlphabetMemchaos_DA_2utl_2cb(id) = {|endDiagram_DA_2utl_2cb.id|}
AlphabetMemchaos2_DA_2utl_2cb(id) = {|endDiagram_DA_2utl_2cb.id|}

TokenManager_DA_2utl_2cb(id,x,init) = update_DA_2utl_2cb.id?c?y:limiteUpdate_DA_2utl_2cb -> x+y < 10 & x+y > -10 & TokenManager_DA_2utl_2cb(id,x+y,1) [] clear_DA_2utl_2cb.id?c -> endDiagram_DA_2utl_2cb.id -> SKIP [] x == 0 & init == 1 & endDiagram_DA_2utl_2cb.id -> SKIP
TokenManager_DA_2utl_2cb_t(id,x,init) = TokenManager_DA_2utl_2cb(id,x,init)

assert MAIN :[deadlock free]
assert MAIN :[divergence free]
assert MAIN :[deterministic]

NRecurse(S, P) = |~| ev : S @ ev -> P

WAIT(alphabet,event) = 
	NRecurse(diff(alphabet, {event}), WAIT(alphabet,event))
	|~|
	event -> SKIP

WAIT_PROCCESSES(processes) = ||| CONTROL : processes @ CONTROL

Prop = PROP(Wait_control_processes) 

alphabet_robochart_DA_2utl_2cb = {|SMovement::moveCall,SMovement::obstacle.in,SMovement::obstacle.out|}

PROP(processes) = (MAIN [|{|begin, end, chaos|}|] WAIT_PROCCESSES(processes) ) \ {|begin, end, chaos|} --/\ endActivity_DA_2utl_2cb -> SKIP 

Wait_DA_2utl_2cb_1 = WAIT(alphabet_robochart_DA_2utl_2cb, SMovement::obstacle.in)

Wait_DA_2utl_2cb_control_1 = begin.1 -> Wait_DA_2utl_2cb_1; end.1 -> Wait_DA_2utl_2cb_control_1

Wait_DA_2utl_2cb_2 = WAIT(alphabet_robochart_DA_2utl_2cb, SMovement::moveCall.0.2)

Wait_DA_2utl_2cb_control_2 = begin.2 -> Wait_DA_2utl_2cb_2; end.2 -> Wait_DA_2utl_2cb_control_2

Wait_DA_2utl_2cb_chaos_1 = chaos.1 -> CHAOS(alphabet_robochart_DA_2utl_2cb)

Wait_DA_2utl_2cb_chaos_2 = chaos.2 -> CHAOS(alphabet_robochart_DA_2utl_2cb)

Wait_control_processes = {Wait_DA_2utl_2cb_control_1, Wait_DA_2utl_2cb_control_2, Wait_DA_2utl_2cb_chaos_1, Wait_DA_2utl_2cb_chaos_2}




-- Valores mapeados = {SMovement::obstacle.in, SMovement::moveCall.0.2}
-- Chaves mapeadas = {SMovement::obstacle.in, SMovement::moveCall.0.2}
