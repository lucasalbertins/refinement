
transparent diamond
transparent sbisim
transparent chase

module CFootBot			
	exports
	
	transparent diamond
	transparent sbisim
	transparent chase			
	
	-- declaring channels
	-- declaring robotic platform events
	channel obstacle: InOut
	
	channel moveCall, moveRet: core_real.core_real
	
	-- declaring module termination channel
	channel terminate
				
	-- declaring robotic platform variables
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
			|}		
			
		exports
			transparent diamond
			transparent sbisim
			transparent chase
	
		
			-- declaring call and ret events for undefined operations
			channel moveCall, moveRet: core_real.core_real
		
			move(id__, lv, av) =  moveCall.lv.av -> moveRet.lv.av -> SKIP
			
		
		
			module stm_ref0
			exports
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_x, set_x: core_nat
						
				-- shared variable channels
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel obstacle__: TIDS.InOut
				channel obstacle: InOut
				
				-- declaring call and ret events for undefined operations
				channel moveCall, moveRet: core_real.core_real
				
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machien module.
				move(id__, lv, av) =  moveCall.lv.av -> moveRet.lv.av -> SKIP
				
				
				
				-- definition of functions used to expose flow channels
				ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
								   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
								   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
								   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
									 
				ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_SMovement
				              | SID_SMovement_Moving
				              | SID_SMovement_Turning
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_SMovement_t1
				              | TID_SMovement_t2
				              | TID_SMovement_t3
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_SMovement_t2,	TID_SMovement_t3
				}
				
				int_int = {|
					obstacle__.TID_SMovement_t2,
					internal__.TID_SMovement_t2,
					obstacle__.TID_SMovement_t3,
					internal__.TID_SMovement_t3
				|}
					
				
				internal_events = {|enter,entered,exit,exited|}
				shared_variable_events = {|
				|}
						
				
				-- declaring all states
				CS_SMovement_Moving_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_SMovement_Moving,SID_SMovement_Turning},
					y____ <- {SID_SMovement_Moving}
				|}
				
				
				SMovement_Moving_triggers = {|
					internal__.TID_SMovement_t3,
					obstacle__.TID_SMovement_t2
				|}
				
				State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = let
					T_SMovement_t2(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = obstacle__!TID_SMovement_t2.in ->  (exit.SID_SMovement_Moving.SID_SMovement_Moving -> SKIP;
										SKIP;exited.SID_SMovement_Moving.SID_SMovement_Moving -> SKIP;
										enter!SID_SMovement_Moving!SID_SMovement_Turning -> entered!SID_SMovement_Moving!SID_SMovement_Turning ->
										State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
					)
					State_SMovement_Moving_execute(id__,o____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av) = true&move(id__, const_SMovement_lv, 0);SKIP; 
						entered!o____!SID_SMovement_Moving ->
						(SKIP; STOP /\ (
							T_SMovement_t2(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2}) -> exit?y____:diff(SIDS,{SID_SMovement_Moving})!SID_SMovement_Moving -> (
									SKIP;
									exited!y____!SID_SMovement_Moving -> SKIP);
									State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
							[] obstacle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2})?d____ ->	exit?y____:diff(SIDS,{SID_SMovement_Moving})!SID_SMovement_Moving -> (
									SKIP;
									exited!y____!SID_SMovement_Moving -> SKIP);
									State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						))
				within
					enter?x____:diff(SIDS,{SID_SMovement_Moving})!SID_SMovement_Moving -> (State_SMovement_Moving_execute(id__,x____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av))
				
				CS_SMovement_Turning_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_SMovement_Moving,SID_SMovement_Turning},
					y____ <- {SID_SMovement_Turning}
				|}
				
				
				SMovement_Turning_triggers = {|
					internal__.TID_SMovement_t3,
					obstacle__.TID_SMovement_t2
				|}
				
				State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = let
					T_SMovement_t3(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = internal__!TID_SMovement_t3 ->  exit.SID_SMovement_Turning.SID_SMovement_Turning -> SKIP;
										SKIP;exited.SID_SMovement_Turning.SID_SMovement_Turning -> SKIP;
										enter!SID_SMovement_Turning!SID_SMovement_Moving -> entered!SID_SMovement_Turning!SID_SMovement_Moving ->
										State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
					State_SMovement_Turning_execute(id__,o____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av) = true&move(id__, 0, const_SMovement_av); 
						entered!o____!SID_SMovement_Turning ->
						(SKIP; STOP /\ (
							T_SMovement_t3(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2}) -> exit?y____:diff(SIDS,{SID_SMovement_Turning})!SID_SMovement_Turning -> (
									SKIP;
									exited!y____!SID_SMovement_Turning -> SKIP);
									State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
							[] obstacle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2})?d____ ->	exit?y____:diff(SIDS,{SID_SMovement_Turning})!SID_SMovement_Turning -> (
									SKIP;
									exited!y____!SID_SMovement_Turning -> SKIP);
									State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						))
				within
					enter?x____:diff(SIDS,{SID_SMovement_Turning})!SID_SMovement_Turning -> (State_SMovement_Turning_execute(id__,x____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av))
				
				
				I_SMovement_i1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = let
					T_SMovement_t1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = internal__!TID_SMovement_t1 -> enter!SID_SMovement!SID_SMovement_Moving -> entered!SID_SMovement!SID_SMovement_Moving ->
					SKIP
				within
					T_SMovement_t1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				
				
				State_SMovement_Moving_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = 
					State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						[|diff(int_int,SMovement_Moving_triggers)|]
					SKIP
						 		
				State_SMovement_Turning_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = 
					State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						[|diff(int_int,SMovement_Turning_triggers)|]
					SKIP
						 		
					
				STM(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = (
					I_SMovement_i1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_SMovement_Moving,SID_SMovement_Turning}),
								y____ <- {SID_SMovement_Moving,SID_SMovement_Turning}
						|}|]
					(
						State_SMovement_Moving_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
							[|inter(CS_SMovement_Moving_sync,CS_SMovement_Turning_sync)|]
						State_SMovement_Turning_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
					)
				)
				
				-- optimized memory process
				channel getV_x: core_nat
				
				-- individual memory processes
				Memory_x(x) = (
					get_x!x -> Memory_x(x)
					[]
					getV_x!x -> Memory_x(x)
					[]
					set_x?x__ -> Memory_x(x__)
				)
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__, x) = 		
				(internal__!TID_SMovement_t1 -> SKIP
				[]
				obstacle__!TID_SMovement_t2.in -> SKIP
				[]
				(true)&(internal__!TID_SMovement_t3 -> SKIP)[]
				set_x?x__ -> SKIP)
				
				MemoryTransitions_SMovement(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = (getV_x?x ->
				MemoryTransitions(id__, x)			
				); MemoryTransitions_SMovement(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						
				
				-- synchronisation, hiding and process sets 
				MemoryVariablesProcesses_SMovement = Union(
					{
						{
							(Memory_x(0),{|getV_x,get_x,set_x|})
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						getV_x,
						set_x
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getV_x
					|}
				})
				
				-- combined individual memory processes
				MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_SMovement @ P
				
				-- complete memory process	
				MemoryN(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_SMovement(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))) \ MemoryVariablesHideSet))		
				
				-- main process
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_x,set_x|},
							{||}
						)
							
						,
						{|internal__.TID_SMovement_t1,
						obstacle__.TID_SMovement_t2,
						internal__.TID_SMovement_t3|}
					)
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_x,set_x|},
						{||}
					)
				})
				
				MachineInternalEvents = {|
					internal__
				|}
				
				AUX(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = (
					(
						STM(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
							[|MachineMemorySyncSet|]
						sbisim(diamond(MemoryN(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))
					)[[
						obstacle__.x____ <- obstacle
						| x____ <- TIDS
					]]
					\MachineMemoryHidingSet
				)
				[|{|terminate|}|>SKIP\MachineInternalEvents		
			
				-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				transparent diamond
				transparent sbisim
				transparent chase
						
				FVS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = AUX(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				D__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = AUX(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) \ internal_events
				O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = sbisim(diamond(D__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))
				VS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = ShowV(FVS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av))
				VS_O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = sbisim(diamond(VS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))
				HEXT__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) [|shared_variable_events|] SKIP	
			endmodule
						
			-- declaring controller events
			channel obstacle: InOut
							
	
		
			channel terminate
		
			-- declaring controller memory
			Memory(id__) = SKIP
			-- declaring controller termination channel
	
		
			D__(id__) = (
				(
					stm_ref0::D__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::obstacle <- obstacle,
						stm_ref0::moveCall <- moveCall,
						stm_ref0::moveRet <- moveRet
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
						
			-- VS version
			VS__(id__) = (
				(
					stm_ref0::VS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::obstacle <- obstacle,
						stm_ref0::moveCall <- moveCall,
						stm_ref0::moveRet <- moveRet
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP			
	
						
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__) = sbisim(
				diamond(
					(
						(
							stm_ref0::O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::obstacle <- obstacle,
								stm_ref0::moveCall <- moveCall,
								stm_ref0::moveRet <- moveRet
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
				)
			)
						
			-- VS_O version
			VS_O__(id__) = sbisim(
				diamond(
					(
						(
							stm_ref0::VS_O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::obstacle <- obstacle,
								stm_ref0::moveCall <- moveCall,
								stm_ref0::moveRet <- moveRet
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
				)
			)
			
			HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP	
		endmodule
				
	-- declaring module memory
	Memory(id__) = SKIP
	
	D__(id__) = 		(
			(
				SKIP
					[|{||}|]
				(
					(
						ctrl_ref0::D__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::obstacle <- obstacle,
							ctrl_ref0::moveCall <- moveCall,
							ctrl_ref0::moveRet <- moveRet
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- visible state equivalent
	
	VS__(id__) = 		(
			(
				SKIP
					[|{||}|]
				(
					(
						ctrl_ref0::VS__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::obstacle <- obstacle,
							ctrl_ref0::moveCall <- moveCall,
							ctrl_ref0::moveRet <- moveRet
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}	
	
	-- O version (optimised)
	
	O__(id__) = sbisim(diamond(		(
			(
				SKIP
					[|{||}|]
				(
					(
						ctrl_ref0::O__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::obstacle <- obstacle,
							ctrl_ref0::moveCall <- moveCall,
							ctrl_ref0::moveRet <- moveRet
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}			
	))
	
	-- visible state optimised equivalent
	
	VS_O__(id__) = sbisim(diamond(		(
			(
				SKIP
					[|{||}|]
				(
					(
						ctrl_ref0::VS_O__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::obstacle <- obstacle,
							ctrl_ref0::moveCall <- moveCall,
							ctrl_ref0::moveRet <- moveRet
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}			
	))	
endmodule		

	module Movement
		shared_variable_events = {|
		|}		
		
	exports
		transparent diamond
		transparent sbisim
		transparent chase

	
		-- declaring call and ret events for undefined operations
		channel moveCall, moveRet: core_real.core_real
	
		move(id__, lv, av) =  moveCall.lv.av -> moveRet.lv.av -> SKIP
		
	
	
		module stm_ref0
		exports
			-- flow channels
			channel internal__ : TIDS
			channel enteredV, enterV, exitV, exitedV : SIDS
			channel enter, entered: SIDS.SIDS
			channel exit,exited: SIDS.SIDS
			channel terminate
			
			-- variable channels
			channel get_x, set_x: core_nat
					
			-- shared variable channels
			
			-- local variable channels for defined operations that are required by the state machine
			
			-- declaring state machine events
			channel obstacle__: TIDS.InOut
			channel obstacle: InOut
			
			-- declaring call and ret events for undefined operations
			channel moveCall, moveRet: core_real.core_real
			
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machien module.
			move(id__, lv, av) =  moveCall.lv.av -> moveRet.lv.av -> SKIP
			
			
			
			-- definition of functions used to expose flow channels
			ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
							   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
							   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
							   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
								 
			ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
						[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
						[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
						[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			
			-- declaring identifiers of state and final states
			datatype SIDS = SID_SMovement
			              | SID_SMovement_Moving
			              | SID_SMovement_Turning
			
			-- declaring identifiers of transitions
			datatype TIDS = NULLTRANSITION__
			              | TID_SMovement_t1
			              | TID_SMovement_t2
			              | TID_SMovement_t3
			
			-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
			
			ITIDS = {
				TID_SMovement_t2,	TID_SMovement_t3
			}
			
			int_int = {|
				obstacle__.TID_SMovement_t2,
				internal__.TID_SMovement_t2,
				obstacle__.TID_SMovement_t3,
				internal__.TID_SMovement_t3
			|}
				
			
			internal_events = {|enter,entered,exit,exited|}
			shared_variable_events = {|
			|}
					
			
			-- declaring all states
			CS_SMovement_Moving_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_SMovement_Moving,SID_SMovement_Turning},
				y____ <- {SID_SMovement_Moving}
			|}
			
			
			SMovement_Moving_triggers = {|
				internal__.TID_SMovement_t3,
				obstacle__.TID_SMovement_t2
			|}
			
			State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = let
				T_SMovement_t2(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = obstacle__!TID_SMovement_t2.in ->  (exit.SID_SMovement_Moving.SID_SMovement_Moving -> SKIP;
									SKIP;exited.SID_SMovement_Moving.SID_SMovement_Moving -> SKIP;
									enter!SID_SMovement_Moving!SID_SMovement_Turning -> entered!SID_SMovement_Moving!SID_SMovement_Turning ->
									State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				)
				State_SMovement_Moving_execute(id__,o____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av) = true&move(id__, const_SMovement_lv, 0);SKIP; 
					entered!o____!SID_SMovement_Moving ->
					(SKIP; STOP /\ (
						T_SMovement_t2(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2}) -> exit?y____:diff(SIDS,{SID_SMovement_Moving})!SID_SMovement_Moving -> (
								SKIP;
								exited!y____!SID_SMovement_Moving -> SKIP);
								State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						[] obstacle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2})?d____ ->	exit?y____:diff(SIDS,{SID_SMovement_Moving})!SID_SMovement_Moving -> (
								SKIP;
								exited!y____!SID_SMovement_Moving -> SKIP);
								State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
					))
			within
				enter?x____:diff(SIDS,{SID_SMovement_Moving})!SID_SMovement_Moving -> (State_SMovement_Moving_execute(id__,x____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av))
			
			CS_SMovement_Turning_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_SMovement_Moving,SID_SMovement_Turning},
				y____ <- {SID_SMovement_Turning}
			|}
			
			
			SMovement_Turning_triggers = {|
				internal__.TID_SMovement_t3,
				obstacle__.TID_SMovement_t2
			|}
			
			State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = let
				T_SMovement_t3(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = internal__!TID_SMovement_t3 ->  exit.SID_SMovement_Turning.SID_SMovement_Turning -> SKIP;
									SKIP;exited.SID_SMovement_Turning.SID_SMovement_Turning -> SKIP;
									enter!SID_SMovement_Turning!SID_SMovement_Moving -> entered!SID_SMovement_Turning!SID_SMovement_Moving ->
									State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				State_SMovement_Turning_execute(id__,o____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av) = true&move(id__, 0, const_SMovement_av); 
					entered!o____!SID_SMovement_Turning ->
					(SKIP; STOP /\ (
						T_SMovement_t3(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2}) -> exit?y____:diff(SIDS,{SID_SMovement_Turning})!SID_SMovement_Turning -> (
								SKIP;
								exited!y____!SID_SMovement_Turning -> SKIP);
								State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						[] obstacle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2})?d____ ->	exit?y____:diff(SIDS,{SID_SMovement_Turning})!SID_SMovement_Turning -> (
								SKIP;
								exited!y____!SID_SMovement_Turning -> SKIP);
								State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
					))
			within
				enter?x____:diff(SIDS,{SID_SMovement_Turning})!SID_SMovement_Turning -> (State_SMovement_Turning_execute(id__,x____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av))
			
			
			I_SMovement_i1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = let
				T_SMovement_t1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = internal__!TID_SMovement_t1 -> enter!SID_SMovement!SID_SMovement_Moving -> entered!SID_SMovement!SID_SMovement_Moving ->
				SKIP
			within
				T_SMovement_t1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
			
			
			State_SMovement_Moving_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = 
				State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
					[|diff(int_int,SMovement_Moving_triggers)|]
				SKIP
					 		
			State_SMovement_Turning_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = 
				State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
					[|diff(int_int,SMovement_Turning_triggers)|]
				SKIP
					 		
				
			STM(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = (
				I_SMovement_i1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
					[|
						{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
							x____ <- diff(SIDS,{SID_SMovement_Moving,SID_SMovement_Turning}),
							y____ <- {SID_SMovement_Moving,SID_SMovement_Turning}
					|}|]
				(
					State_SMovement_Moving_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						[|inter(CS_SMovement_Moving_sync,CS_SMovement_Turning_sync)|]
					State_SMovement_Turning_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				)
			)
			
			-- optimized memory process
			channel getV_x: core_nat
			
			-- individual memory processes
			Memory_x(x) = (
				get_x!x -> Memory_x(x)
				[]
				getV_x!x -> Memory_x(x)
				[]
				set_x?x__ -> Memory_x(x__)
			)
			
			-- processes that read variables and offer transitions
			MemoryTransitions(id__, x) = 		
			(internal__!TID_SMovement_t1 -> SKIP
			[]
			obstacle__!TID_SMovement_t2.in -> SKIP
			[]
			(true)&(internal__!TID_SMovement_t3 -> SKIP)[]
			set_x?x__ -> SKIP)
			
			MemoryTransitions_SMovement(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = (getV_x?x ->
			MemoryTransitions(id__, x)			
			); MemoryTransitions_SMovement(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
					
			
			-- synchronisation, hiding and process sets 
			MemoryVariablesProcesses_SMovement = Union(
				{
					{
						(Memory_x(0),{|getV_x,get_x,set_x|})
					}
				}
			)
			
			MemoryVariablesSyncSet = Union({
				{|
					getV_x,
					set_x
				|}	
			})
			
			MemoryVariablesHideSet = Union({
				{|
					getV_x
				|}
			})
			
			-- combined individual memory processes
			MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_SMovement @ P
			
			-- complete memory process	
			MemoryN(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_SMovement(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))) \ MemoryVariablesHideSet))		
			
			-- main process
			
			MachineMemorySyncSet = Union({
				union(
					union(
						{|get_x,set_x|},
						{||}
					)
						
					,
					{|internal__.TID_SMovement_t1,
					obstacle__.TID_SMovement_t2,
					internal__.TID_SMovement_t3|}
				)
			})
			
			MachineMemoryHidingSet = Union({
				union(
					{|get_x,set_x|},
					{||}
				)
			})
			
			MachineInternalEvents = {|
				internal__
			|}
			
			AUX(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = (
				(
					STM(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
						[|MachineMemorySyncSet|]
					sbisim(diamond(MemoryN(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))
				)[[
					obstacle__.x____ <- obstacle
					| x____ <- TIDS
				]]
				\MachineMemoryHidingSet
			)
			[|{|terminate|}|>SKIP\MachineInternalEvents		
		
			-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			transparent diamond
			transparent sbisim
			transparent chase
					
			FVS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = AUX(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
			D__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = AUX(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) \ internal_events
			O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = sbisim(diamond(D__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))
			VS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = ShowV(FVS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av))
			VS_O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = sbisim(diamond(VS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))
			HEXT__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) [|shared_variable_events|] SKIP	
		endmodule
					
		-- declaring controller events
		channel obstacle: InOut
						

	
		channel terminate
	
		-- declaring controller memory
		Memory(id__) = SKIP
		-- declaring controller termination channel

	
		D__(id__) = (
			(
				stm_ref0::D__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)[[
					stm_ref0::terminate <- terminate,
					stm_ref0::obstacle <- obstacle,
					stm_ref0::moveCall <- moveCall,
					stm_ref0::moveRet <- moveRet
				]]
			)
				[|
					union(
						{|
						|},
						{|
						|}
					)
				|]
			Memory(id__)
		)
		\ union(
			{|
			|},
			{|
			|}
		)
		[|{|terminate|}|>SKIP
					
		-- VS version
		VS__(id__) = (
			(
				stm_ref0::VS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)[[
					stm_ref0::terminate <- terminate,
					stm_ref0::obstacle <- obstacle,
					stm_ref0::moveCall <- moveCall,
					stm_ref0::moveRet <- moveRet
				]]
			)
				[|
					union(
						{|
						|},
						{|
						|}
					)
				|]
			Memory(id__)
		)
		\ union(
			{|
			|},
			{|
			|}
		)
		[|{|terminate|}|>SKIP			

					
		-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
		O__(id__) = sbisim(
			diamond(
				(
					(
						stm_ref0::O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::obstacle <- obstacle,
							stm_ref0::moveCall <- moveCall,
							stm_ref0::moveRet <- moveRet
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			)
		)
					
		-- VS_O version
		VS_O__(id__) = sbisim(
			diamond(
				(
					(
						stm_ref0::VS_O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::obstacle <- obstacle,
							stm_ref0::moveCall <- moveCall,
							stm_ref0::moveRet <- moveRet
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			)
		)
		
		HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP	
	endmodule

module SMovement
exports
	-- flow channels
	channel internal__ : TIDS
	channel enteredV, enterV, exitV, exitedV : SIDS
	channel enter, entered: SIDS.SIDS
	channel exit,exited: SIDS.SIDS
	channel terminate
	
	-- variable channels
	channel get_x, set_x: core_nat
			
	-- shared variable channels
	
	-- local variable channels for defined operations that are required by the state machine
	
	-- declaring state machine events
	channel obstacle__: TIDS.InOut
	channel obstacle: InOut
	
	-- declaring call and ret events for undefined operations
	channel moveCall, moveRet: core_real.core_real
	
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machien module.
	move(id__, lv, av) =  moveCall.lv.av -> moveRet.lv.av -> SKIP
	
	
	
	-- definition of functions used to expose flow channels
	ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
					   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
					   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
					   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
						 
	ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	
	-- declaring identifiers of state and final states
	datatype SIDS = SID_SMovement
	              | SID_SMovement_Moving
	              | SID_SMovement_Turning
	
	-- declaring identifiers of transitions
	datatype TIDS = NULLTRANSITION__
	              | TID_SMovement_t1
	              | TID_SMovement_t2
	              | TID_SMovement_t3
	
	-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
	
	ITIDS = {
		TID_SMovement_t2,	TID_SMovement_t3
	}
	
	int_int = {|
		obstacle__.TID_SMovement_t2,
		internal__.TID_SMovement_t2,
		obstacle__.TID_SMovement_t3,
		internal__.TID_SMovement_t3
	|}
		
	
	internal_events = {|enter,entered,exit,exited|}
	shared_variable_events = {|
	|}
			
	
	-- declaring all states
	CS_SMovement_Moving_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_SMovement_Moving,SID_SMovement_Turning},
		y____ <- {SID_SMovement_Moving}
	|}
	
	
	SMovement_Moving_triggers = {|
		internal__.TID_SMovement_t3,
		obstacle__.TID_SMovement_t2
	|}
	
	State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = let
		T_SMovement_t2(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = obstacle__!TID_SMovement_t2.in ->  (exit.SID_SMovement_Moving.SID_SMovement_Moving -> SKIP;
							SKIP;exited.SID_SMovement_Moving.SID_SMovement_Moving -> SKIP;
							enter!SID_SMovement_Moving!SID_SMovement_Turning -> entered!SID_SMovement_Moving!SID_SMovement_Turning ->
							State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
		)
		State_SMovement_Moving_execute(id__,o____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av) = true&move(id__, const_SMovement_lv, 0);SKIP; 
			entered!o____!SID_SMovement_Moving ->
			(SKIP; STOP /\ (
				T_SMovement_t2(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2}) -> exit?y____:diff(SIDS,{SID_SMovement_Moving})!SID_SMovement_Moving -> (
						SKIP;
						exited!y____!SID_SMovement_Moving -> SKIP);
						State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				[] obstacle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2})?d____ ->	exit?y____:diff(SIDS,{SID_SMovement_Moving})!SID_SMovement_Moving -> (
						SKIP;
						exited!y____!SID_SMovement_Moving -> SKIP);
						State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
			))
	within
		enter?x____:diff(SIDS,{SID_SMovement_Moving})!SID_SMovement_Moving -> (State_SMovement_Moving_execute(id__,x____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av))
	
	CS_SMovement_Turning_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_SMovement_Moving,SID_SMovement_Turning},
		y____ <- {SID_SMovement_Turning}
	|}
	
	
	SMovement_Turning_triggers = {|
		internal__.TID_SMovement_t3,
		obstacle__.TID_SMovement_t2
	|}
	
	State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = let
		T_SMovement_t3(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = internal__!TID_SMovement_t3 ->  exit.SID_SMovement_Turning.SID_SMovement_Turning -> SKIP;
							SKIP;exited.SID_SMovement_Turning.SID_SMovement_Turning -> SKIP;
							enter!SID_SMovement_Turning!SID_SMovement_Moving -> entered!SID_SMovement_Turning!SID_SMovement_Moving ->
							State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
		State_SMovement_Turning_execute(id__,o____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av) = true&move(id__, 0, const_SMovement_av); 
			entered!o____!SID_SMovement_Turning ->
			(SKIP; STOP /\ (
				T_SMovement_t3(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2}) -> exit?y____:diff(SIDS,{SID_SMovement_Turning})!SID_SMovement_Turning -> (
						SKIP;
						exited!y____!SID_SMovement_Turning -> SKIP);
						State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				[] obstacle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SMovement_t3,TID_SMovement_t2})?d____ ->	exit?y____:diff(SIDS,{SID_SMovement_Turning})!SID_SMovement_Turning -> (
						SKIP;
						exited!y____!SID_SMovement_Turning -> SKIP);
						State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
			))
	within
		enter?x____:diff(SIDS,{SID_SMovement_Turning})!SID_SMovement_Turning -> (State_SMovement_Turning_execute(id__,x____,const_SMovement_lv,const_SMovement_PI,const_SMovement_av))
	
	
	I_SMovement_i1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = let
		T_SMovement_t1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = internal__!TID_SMovement_t1 -> enter!SID_SMovement!SID_SMovement_Moving -> entered!SID_SMovement!SID_SMovement_Moving ->
		SKIP
	within
		T_SMovement_t1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
	
	
	State_SMovement_Moving_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = 
		State_SMovement_Moving(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
			[|diff(int_int,SMovement_Moving_triggers)|]
		SKIP
			 		
	State_SMovement_Turning_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = 
		State_SMovement_Turning(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
			[|diff(int_int,SMovement_Turning_triggers)|]
		SKIP
			 		
		
	STM(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = (
		I_SMovement_i1(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
			[|
				{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
					x____ <- diff(SIDS,{SID_SMovement_Moving,SID_SMovement_Turning}),
					y____ <- {SID_SMovement_Moving,SID_SMovement_Turning}
			|}|]
		(
			State_SMovement_Moving_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				[|inter(CS_SMovement_Moving_sync,CS_SMovement_Turning_sync)|]
			State_SMovement_Turning_R(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
		)
	)
	
	-- optimized memory process
	channel getV_x: core_nat
	
	-- individual memory processes
	Memory_x(x) = (
		get_x!x -> Memory_x(x)
		[]
		getV_x!x -> Memory_x(x)
		[]
		set_x?x__ -> Memory_x(x__)
	)
	
	-- processes that read variables and offer transitions
	MemoryTransitions(id__, x) = 		
	(internal__!TID_SMovement_t1 -> SKIP
	[]
	obstacle__!TID_SMovement_t2.in -> SKIP
	[]
	(true)&(internal__!TID_SMovement_t3 -> SKIP)[]
	set_x?x__ -> SKIP)
	
	MemoryTransitions_SMovement(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = (getV_x?x ->
	MemoryTransitions(id__, x)			
	); MemoryTransitions_SMovement(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
			
	
	-- synchronisation, hiding and process sets 
	MemoryVariablesProcesses_SMovement = Union(
		{
			{
				(Memory_x(0),{|getV_x,get_x,set_x|})
			}
		}
	)
	
	MemoryVariablesSyncSet = Union({
		{|
			getV_x,
			set_x
		|}	
	})
	
	MemoryVariablesHideSet = Union({
		{|
			getV_x
		|}
	})
	
	-- combined individual memory processes
	MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_SMovement @ P
	
	-- complete memory process	
	MemoryN(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_SMovement(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))) \ MemoryVariablesHideSet))		
	
	-- main process
	
	MachineMemorySyncSet = Union({
		union(
			union(
				{|get_x,set_x|},
				{||}
			)
				
			,
			{|internal__.TID_SMovement_t1,
			obstacle__.TID_SMovement_t2,
			internal__.TID_SMovement_t3|}
		)
	})
	
	MachineMemoryHidingSet = Union({
		union(
			{|get_x,set_x|},
			{||}
		)
	})
	
	MachineInternalEvents = {|
		internal__
	|}
	
	AUX(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = (
		(
			STM(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
				[|MachineMemorySyncSet|]
			sbisim(diamond(MemoryN(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))
		)[[
			obstacle__.x____ <- obstacle
			| x____ <- TIDS
		]]
		\MachineMemoryHidingSet
	)
	[|{|terminate|}|>SKIP\MachineInternalEvents		

	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	transparent diamond
	transparent sbisim
	transparent chase
			
	FVS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = AUX(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)
	D__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = AUX(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) \ internal_events
	O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = sbisim(diamond(D__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))
	VS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = ShowV(FVS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av))
	VS_O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = sbisim(diamond(VS__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av)))
	HEXT__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) = O__(id__, const_SMovement_lv, const_SMovement_PI, const_SMovement_av) [|shared_variable_events|] SKIP	
endmodule

	module move
	exports

	D__(id__) = let
		AUX(N) = 
			if (N == 0) then SKIP else SKIP
	within AUX(move_BOUND)
	O__(id__) = D__(id__)
endmodule

