datatype alphabet_DA_CounterExample = accept_obstacle_1_DA_CounterExample_t_alphabet | InitialNode0_DA_CounterExample_t_alphabet| move_2_0__1_DA_CounterExample_t_alphabet| DecisionNode_MergeNode0_DA_CounterExample_t_alphabet
robochart_DA_CounterExample = "file_SimFW_coreassertions.csp"
robochart_alphabet_DA_CounterExample = {|SMovement::moveCall,SMovement::obstacle.in,SMovement::obstacle.out|}
countCe_DA_CounterExample = {1..4}
countUpdate_DA_CounterExample = {1..1}
countClear_DA_CounterExample = {1..0}
limiteUpdate_DA_CounterExample = {(1)..(1)}
channel startActivity_DA_CounterExample: ID_DA_CounterExample
channel endActivity_DA_CounterExample: ID_DA_CounterExample
channel ce_DA_CounterExample: ID_DA_CounterExample.countCe_DA_CounterExample
channel clear_DA_CounterExample: ID_DA_CounterExample.countClear_DA_CounterExample
channel update_DA_CounterExample: ID_DA_CounterExample.countUpdate_DA_CounterExample.limiteUpdate_DA_CounterExample
channel endDiagram_DA_CounterExample: ID_DA_CounterExample

alphabet_Astah_DA_CounterExample = {| startActivity_DA_CounterExample, endActivity_DA_CounterExample, ce_DA_CounterExample, clear_DA_CounterExample, update_DA_CounterExample, endDiagram_DA_CounterExample |}

END_DIAGRAM_DA_CounterExample(id) = endDiagram_DA_CounterExample.id -> SKIP
DA_CounterExample(ID_DA_CounterExample) = (Internal_DA_CounterExample(ID_DA_CounterExample) [|{|update_DA_CounterExample,clear_DA_CounterExample,endDiagram_DA_CounterExample|}|] TokenManager_DA_CounterExample_t(ID_DA_CounterExample,0,0))
Internal_DA_CounterExample(id) = StartActivity_DA_CounterExample(id); Node_DA_CounterExample(id); EndActivity_DA_CounterExample(id)
StartActivity_DA_CounterExample(id) = startActivity_DA_CounterExample.id -> SKIP
EndActivity_DA_CounterExample(id) = endActivity_DA_CounterExample.id -> SKIP
AlphabetDiagram_DA_CounterExample(id,accept_obstacle_1_DA_CounterExample_t_alphabet) = {|ce_DA_CounterExample.id.3,ce_DA_CounterExample.id.4,endDiagram_DA_CounterExample.id|}
AlphabetDiagram_DA_CounterExample(id,InitialNode0_DA_CounterExample_t_alphabet) = {|ce_DA_CounterExample.id.1,endDiagram_DA_CounterExample.id|}
AlphabetDiagram_DA_CounterExample(id,move_2_0__1_DA_CounterExample_t_alphabet) = {|ce_DA_CounterExample.id.4,ce_DA_CounterExample.id.2,endDiagram_DA_CounterExample.id|}
AlphabetDiagram_DA_CounterExample(id,DecisionNode_MergeNode0_DA_CounterExample_t_alphabet) = {|ce_DA_CounterExample.id.1,ce_DA_CounterExample.id.2,ce_DA_CounterExample.id.3,endDiagram_DA_CounterExample.id|}
AlphabetDiagram_DA_CounterExample_t(id) = union(union(union(AlphabetDiagram_DA_CounterExample(id,accept_obstacle_1_DA_CounterExample_t_alphabet),AlphabetDiagram_DA_CounterExample(id,InitialNode0_DA_CounterExample_t_alphabet)),AlphabetDiagram_DA_CounterExample(id,move_2_0__1_DA_CounterExample_t_alphabet)),AlphabetDiagram_DA_CounterExample(id,DecisionNode_MergeNode0_DA_CounterExample_t_alphabet))

ProcessDiagram_DA_CounterExample(id,accept_obstacle_1_DA_CounterExample_t_alphabet) = normal(accept_obstacle_1_DA_CounterExample_t(id))
ProcessDiagram_DA_CounterExample(id,InitialNode0_DA_CounterExample_t_alphabet) = normal(InitialNode0_DA_CounterExample_t(id))
ProcessDiagram_DA_CounterExample(id,move_2_0__1_DA_CounterExample_t_alphabet) = normal(move_2_0__1_DA_CounterExample_t(id))
ProcessDiagram_DA_CounterExample(id,DecisionNode_MergeNode0_DA_CounterExample_t_alphabet) = normal(DecisionNode_MergeNode0_DA_CounterExample_t(id))
InitialNode0_DA_CounterExample(id) = update_DA_CounterExample.id.1!(1-0) -> ((ce_DA_CounterExample.id.1 -> SKIP))
InitialNode0_DA_CounterExample_t(id) = InitialNode0_DA_CounterExample(id) /\ END_DIAGRAM_DA_CounterExample(id)
DecisionNode_MergeNode0_DA_CounterExample(id) = ((ce_DA_CounterExample.id.1 -> SKIP) [] (ce_DA_CounterExample.id.2 -> SKIP)); ce_DA_CounterExample.id.3 -> DecisionNode_MergeNode0_DA_CounterExample(id)
DecisionNode_MergeNode0_DA_CounterExample_t(id) = DecisionNode_MergeNode0_DA_CounterExample(id) /\ END_DIAGRAM_DA_CounterExample(id)
accept_obstacle_1_DA_CounterExample(id) = ((ce_DA_CounterExample.id.3 -> SKIP)); begin.1 -> end.1 -> SKIP; ((ce_DA_CounterExample.id.4 -> SKIP)); accept_obstacle_1_DA_CounterExample(id)
accept_obstacle_1_DA_CounterExample_t(id) = accept_obstacle_1_DA_CounterExample(id) /\ END_DIAGRAM_DA_CounterExample(id)
move_2_0__1_DA_CounterExample(id) = ((ce_DA_CounterExample.id.4 -> SKIP)); SMovement::moveCall.2.0 -> ((ce_DA_CounterExample.id.2 -> SKIP)); move_2_0__1_DA_CounterExample(id)
move_2_0__1_DA_CounterExample_t(id) = move_2_0__1_DA_CounterExample(id) /\ END_DIAGRAM_DA_CounterExample(id)

TokenManager_DA_CounterExample(id,x,init) = update_DA_CounterExample.id?c?y:limiteUpdate_DA_CounterExample -> x+y < 10 & x+y > -10 & TokenManager_DA_CounterExample(id,x+y,1) [] clear_DA_CounterExample.id?c -> endDiagram_DA_CounterExample.id -> SKIP [] x == 0 & init == 1 & endDiagram_DA_CounterExample.id -> SKIP
TokenManager_DA_CounterExample_t(id,x,init) = TokenManager_DA_CounterExample(id,x,init)




WAIT_PROCCESSES_DA_CounterExample(processes) = ( ||| CONTROL : processes @ CONTROL )  /\ endDiagram_DA_CounterExample?id -> SKIP

Prop_DA_CounterExample = PROP_DA_CounterExample(Wait_control_processes_DA_CounterExample) \ alphabet_Astah_DA_CounterExample 

alphabet_robochart_DA_CounterExample = {|SMovement::moveCall,SMovement::obstacle.in,SMovement::obstacle.out|}

PROP_DA_CounterExample(processes) = (MAIN [|{|begin, end, endDiagram_DA_CounterExample|}|] WAIT_PROCCESSES_DA_CounterExample(processes) ) \ {|begin, end|}

Wait_DA_CounterExample_1 = WAIT(alphabet_robochart_DA_CounterExample, SMovement::obstacle.in)

Wait_DA_CounterExample_control_1 = begin.1 -> Wait_DA_CounterExample_1; end.1 -> Wait_DA_CounterExample_control_1

Wait_control_processes_DA_CounterExample = {Wait_DA_CounterExample_control_1}

Node_DA_CounterExample(id) = composeNodes_DA_CounterExample(id)

composeNodes_DA_CounterExample(id) = 
	let
	    alphabet_DA_CounterExample_s = seq(alphabet_DA_CounterExample)
		composeNodes_(id,<ev>,_) = ProcessDiagram_DA_CounterExample(id,ev)
		composeNodes_(id,<ev>^tail,past) = 
			ProcessDiagram_DA_CounterExample(id,ev) 
				[|union(diff(AlphabetDiagram_DA_CounterExample(id,ev),past),{endDiagram_DA_CounterExample.id})|] 
			( composeNodes_(id,tail,union(past,AlphabetDiagram_DA_CounterExample(id,ev))) )
	within 
		composeNodes_(id,alphabet_DA_CounterExample_s,{})

