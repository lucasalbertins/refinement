transparent normal
include "file_SimFW_coreassertions.csp"
ID_DA = {1..1}
datatype alphabet_DA = accept_obstacle_1_DA_t_alphabet | InitialNode0_DA_t_alphabet| move_0_2__1_DA_t_alphabet| DecisionNode_MergeNode0_DA_t_alphabet
robochart_alphabet_DA = {|SMovement::moveCall,SMovement::obstacle.in,SMovement::obstacle.out|}
countCe_DA = {1..4}
countUpdate_DA = {1..1}
countClear_DA = {1..0}
limiteUpdate_DA = {(1)..(1)}
channel startActivity_DA: ID_DA
channel endActivity_DA: ID_DA
channel ce_DA: ID_DA.countCe_DA
channel clear_DA: ID_DA.countClear_DA
channel update_DA: ID_DA.countUpdate_DA.limiteUpdate_DA
channel endDiagram_DA: ID_DA
channel dc
channel begin, end:  {1..1}

alphabet_Astah_DA = {| startActivity_DA, endActivity_DA, ce_DA, clear_DA, update_DA, endDiagram_DA, dc |}

MAIN = normal(DA(1))
END_DIAGRAM_DA(id) = endDiagram_DA.id -> SKIP
DA(ID_DA) = (Internal_DA(ID_DA) [|{|update_DA,clear_DA,endDiagram_DA|}|] TokenManager_DA_t(ID_DA,0,0))
Internal_DA(id) = StartActivity_DA(id); Node_DA(id); EndActivity_DA(id)
StartActivity_DA(id) = startActivity_DA.id -> SKIP
EndActivity_DA(id) = endActivity_DA.id -> SKIP
AlphabetDiagram_DA(id,accept_obstacle_1_DA_t_alphabet) = {|ce_DA.id.3,ce_DA.id.4,endDiagram_DA.id|}
AlphabetDiagram_DA(id,InitialNode0_DA_t_alphabet) = {|ce_DA.id.1,endDiagram_DA.id|}
AlphabetDiagram_DA(id,move_0_2__1_DA_t_alphabet) = {|ce_DA.id.4,ce_DA.id.2,endDiagram_DA.id|}
AlphabetDiagram_DA(id,DecisionNode_MergeNode0_DA_t_alphabet) = {|ce_DA.id.1,ce_DA.id.2,ce_DA.id.3,endDiagram_DA.id|}
AlphabetDiagram_DA_t(id) = union(union(union(AlphabetDiagram_DA(id,accept_obstacle_1_DA_t_alphabet),AlphabetDiagram_DA(id,InitialNode0_DA_t_alphabet)),AlphabetDiagram_DA(id,move_0_2__1_DA_t_alphabet)),AlphabetDiagram_DA(id,DecisionNode_MergeNode0_DA_t_alphabet))

ProcessDiagram_DA(id,accept_obstacle_1_DA_t_alphabet) = normal(accept_obstacle_1_DA_t(id))
ProcessDiagram_DA(id,InitialNode0_DA_t_alphabet) = normal(InitialNode0_DA_t(id))
ProcessDiagram_DA(id,move_0_2__1_DA_t_alphabet) = normal(move_0_2__1_DA_t(id))
ProcessDiagram_DA(id,DecisionNode_MergeNode0_DA_t_alphabet) = normal(DecisionNode_MergeNode0_DA_t(id))
InitialNode0_DA(id) = update_DA.id.1!(1-0) -> ((ce_DA.id.1 -> SKIP))
InitialNode0_DA_t(id) = InitialNode0_DA(id) /\ END_DIAGRAM_DA(id)
DecisionNode_MergeNode0_DA(id) = ((ce_DA.id.1 -> SKIP) [] (ce_DA.id.2 -> SKIP)); ce_DA.id.3 -> DecisionNode_MergeNode0_DA(id)
DecisionNode_MergeNode0_DA_t(id) = DecisionNode_MergeNode0_DA(id) /\ END_DIAGRAM_DA(id)
accept_obstacle_1_DA(id) = ((ce_DA.id.3 -> SKIP)); begin.1 -> end.1 -> SKIP; ((ce_DA.id.4 -> SKIP)); accept_obstacle_1_DA(id)
accept_obstacle_1_DA_t(id) = accept_obstacle_1_DA(id) /\ END_DIAGRAM_DA(id)
move_0_2__1_DA(id) = ((ce_DA.id.4 -> SKIP)); SMovement::moveCall.0.2 -> ((ce_DA.id.2 -> SKIP)); move_0_2__1_DA(id)
move_0_2__1_DA_t(id) = move_0_2__1_DA(id) /\ END_DIAGRAM_DA(id)

TokenManager_DA(id,x,init) = update_DA.id?c?y:limiteUpdate_DA -> x+y < 10 & x+y > -10 & TokenManager_DA(id,x+y,1) [] clear_DA.id?c -> endDiagram_DA.id -> SKIP [] x == 0 & init == 1 & endDiagram_DA.id -> SKIP
TokenManager_DA_t(id,x,init) = TokenManager_DA(id,x,init)

assert Prop_DA [T= P_SMovement

NRecurse(S, P) = |~| ev : S @ ev -> P

WAIT(alphabet,event) = 
	NRecurse(diff(alphabet, {event}), WAIT(alphabet,event))
	|~|
	event -> SKIP

WAIT_PROCCESSES_DA(processes) = ( ||| CONTROL : processes @ CONTROL )  /\ endDiagram_DA?id -> SKIP

Prop_DA = PROP_DA(Wait_control_processes_DA) \ alphabet_Astah_DA 

alphabet_robochart_DA = {|SMovement::moveCall,SMovement::obstacle.in,SMovement::obstacle.out|}

PROP_DA(processes) = (MAIN [|{|begin, end, endDiagram_DA|}|] WAIT_PROCCESSES_DA(processes) ) \ {|begin, end|}

Wait_DA_1 = WAIT(alphabet_robochart_DA, SMovement::obstacle.in)

Wait_DA_control_1 = begin.1 -> Wait_DA_1; end.1 -> Wait_DA_control_1

Wait_control_processes_DA = {Wait_DA_control_1}

Node_DA(id) = composeNodes_DA(id)

composeNodes_DA(id) = 
	let
	    alphabet_DA_s = seq(alphabet_DA)
		composeNodes_(id,<ev>,_) = ProcessDiagram_DA(id,ev)
		composeNodes_(id,<ev>^tail,past) = 
			ProcessDiagram_DA(id,ev) 
				[|union(diff(AlphabetDiagram_DA(id,ev),past),{endDiagram_DA.id})|] 
			( composeNodes_(id,tail,union(past,AlphabetDiagram_DA(id,ev))) )
	within 
		composeNodes_(id,alphabet_DA_s,{})

