include "SMovement_coreassertions.csp"
--include "Movement_coreassertions.csp"
--include "..\SimFW.csp"

Recurse(S, P) = [] ev : S @ ev -> P --'Traces Model only'
NRecurse(S, P) = |~| ev : S @ ev -> P --'failures and Divergences Model only'

--assert Property [FD= Sistem_SimFW

{- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	transparent diamond
	transparent sbisim
	transparent chase
			
	FVS__(id__) = AUX(id__)
	D__(id__) = AUX(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = ShowV(FVS__(id__))
	VS_O__(id__) = sbisim(diamond(VS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP

	PROPRIEDADE SUGERIDA: Quando obstacle acontece em seguida bem 'move(0,lv)', depois de 'move' o padrão reinicia
-}

{- Observações
	Sempre que o Robô entra no estado de SMovement::enterV.SMovement::SID_SMovement_Moving é realizado um moveCall(lv,0)
	
	Sempre que o Robô entra no estado de SMovement::enterV.SMovement::SID_SMovement_Turning é realizado um moveCall(0,av) 
	
	Sempre que o Robô sai do estado SMovement::exitedV.SMovement::SID_SMovement_Turning ele entra no estado de 
	SMovement::enterV.SMovement::SID_SMovement_Moving
-}

--alphabet = {|SMovement::obstacle, SMovement::moveCall, SMovement::moveRet|}
alphabet = {|SMovement::obstacle, SMovement::moveCall|}

--alphabet fake = {|SMovement::obstacle, SMovement::moveCall, SMovement::moveRet.0.1|}


WaitSimFW = NRecurse(diff(alphabet, {SMovement::obstacle.in}), WaitSimFW)
			|~|
			SMovement::obstacle.in -> SMovement::moveCall.0.2 -> WaitSimFW

WaitSimFW2 = NRecurse(diff(alphabet, {SMovement::moveCall.1.0}), WaitSimFW2)
			|~|
			SMovement::moveCall.1.0 -> SMovement::obstacle.in -> WaitSimFW2		

--verificação em duas etapas (primeiro comparando o alfabeto do SMovement 
--e depois o alfabeto da propriedade).
assert SKIP [T= P_SMovement \alphabet	
assert SKIP [T= WaitSimFW2 \alphabet	


assert WaitSimFW [FD= P_SMovement
assert WaitSimFW2 [FD= P_SMovement

--assert WaitSimFW [FD= SMovement::O__(0,1,0,2)



