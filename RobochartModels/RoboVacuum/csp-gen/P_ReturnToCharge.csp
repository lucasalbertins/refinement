transparent normal
include "file_PathPlanningSM_coreassertions.csp"
ID_P_NoFall = {1..1}
ID_P_ReturnToCharge = {1..1}
datatype alphabet_P_ReturnToCharge = accept_charging_1_P_ReturnToCharge_t_alphabet | P_NoFall_P_ReturnToCharge_t_alphabet| accept_ultrasonic_1_P_ReturnToCharge_t_alphabet| InitialNode0_P_ReturnToCharge_t_alphabet| accept_battery_level_1_P_ReturnToCharge_t_alphabet| DecisionNode_MergeNode3_P_ReturnToCharge_t_alphabet| signal_move_forward_2_P_ReturnToCharge_t_alphabet| signal_move_forward_1_P_ReturnToCharge_t_alphabet| DecisionNode_MergeNode4_P_ReturnToCharge_t_alphabet| DecisionNode_MergeNode2_P_ReturnToCharge_t_alphabet| signal_clean_false__1_P_ReturnToCharge_t_alphabet| DecisionNode_MergeNode0_P_ReturnToCharge_t_alphabet| signal_turn_Direction_left__1_P_ReturnToCharge_t_alphabet| x_1_P_ReturnToCharge_t_alphabet| signal_turn_Direction_left__3_P_ReturnToCharge_t_alphabet| signal_turn_Direction_left__2_P_ReturnToCharge_t_alphabet| signal_turn_Direction_left__4_P_ReturnToCharge_t_alphabet
core_int_P_ReturnToCharge = {(-2)..2}
countGet_P_ReturnToCharge = {1..2}
countSet_P_ReturnToCharge = {1..1}
countCe_P_ReturnToCharge = {1..12}
countOe_P_ReturnToCharge = {1..6}
countUpdate_P_ReturnToCharge = {1..1}
countClear_P_ReturnToCharge = {1..0}
limiteUpdate_P_ReturnToCharge = {(1)..(1)}
channel startActivity_P_ReturnToCharge: ID_P_ReturnToCharge
channel endActivity_P_ReturnToCharge: ID_P_ReturnToCharge
channel get_b_battery_level_P_ReturnToCharge: ID_P_ReturnToCharge.countGet_P_ReturnToCharge.core_int_P_ReturnToCharge
channel set_b_battery_level_P_ReturnToCharge: ID_P_ReturnToCharge.countSet_P_ReturnToCharge.core_int_P_ReturnToCharge
channel get_y_x_P_ReturnToCharge: ID_P_ReturnToCharge.countGet_P_ReturnToCharge.core_int_P_ReturnToCharge
channel set_y_x_P_ReturnToCharge: ID_P_ReturnToCharge.countSet_P_ReturnToCharge.core_int_P_ReturnToCharge
channel ce_P_ReturnToCharge: ID_P_ReturnToCharge.countCe_P_ReturnToCharge
channel oe_3_P_ReturnToCharge: ID_P_ReturnToCharge.core_int_P_ReturnToCharge
channel oe_4_P_ReturnToCharge: ID_P_ReturnToCharge.core_int_P_ReturnToCharge
channel oe_1_P_ReturnToCharge: ID_P_ReturnToCharge.core_int_P_ReturnToCharge
channel oe_6_P_ReturnToCharge: ID_P_ReturnToCharge.core_int_P_ReturnToCharge
channel oe_2_P_ReturnToCharge: ID_P_ReturnToCharge.core_int_P_ReturnToCharge
channel oe_5_P_ReturnToCharge: ID_P_ReturnToCharge.core_int_P_ReturnToCharge
channel clear_P_ReturnToCharge: ID_P_ReturnToCharge.countClear_P_ReturnToCharge
channel update_P_ReturnToCharge: ID_P_ReturnToCharge.countUpdate_P_ReturnToCharge.limiteUpdate_P_ReturnToCharge
channel endDiagram_P_ReturnToCharge: ID_P_ReturnToCharge
channel dc

alphabet_Astah_P_ReturnToCharge = {| startActivity_P_ReturnToCharge, endActivity_P_ReturnToCharge, ce_P_ReturnToCharge, oe_3_P_ReturnToCharge, oe_4_P_ReturnToCharge, oe_1_P_ReturnToCharge, oe_6_P_ReturnToCharge, oe_2_P_ReturnToCharge, oe_5_P_ReturnToCharge, clear_P_ReturnToCharge, update_P_ReturnToCharge, endDiagram_P_ReturnToCharge, dc |}

MAIN = normal(P_ReturnToCharge(1))
END_DIAGRAM_P_ReturnToCharge(id) = endDiagram_P_ReturnToCharge.id -> SKIP
P_ReturnToCharge(ID_P_ReturnToCharge) = (Internal_P_ReturnToCharge(ID_P_ReturnToCharge) [|{|update_P_ReturnToCharge,clear_P_ReturnToCharge,endDiagram_P_ReturnToCharge|}|] TokenManager_P_ReturnToCharge_t(ID_P_ReturnToCharge,0,0))
Internal_P_ReturnToCharge(id) = StartActivity_P_ReturnToCharge(id); Node_P_ReturnToCharge(id); EndActivity_P_ReturnToCharge(id)
StartActivity_P_ReturnToCharge(id) = startActivity_P_ReturnToCharge.id -> SKIP
EndActivity_P_ReturnToCharge(id) = endActivity_P_ReturnToCharge.id -> SKIP
AlphabetDiagram_P_ReturnToCharge(id,accept_charging_1_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.11,ce_P_ReturnToCharge.id.3,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,P_NoFall_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.4,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,accept_ultrasonic_1_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.9,oe_4_P_ReturnToCharge.id,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,InitialNode0_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.1,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,accept_battery_level_1_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.2,oe_1_P_ReturnToCharge.id,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode3_P_ReturnToCharge_t_alphabet) = {|oe_4_P_ReturnToCharge.id,dc,oe_5_P_ReturnToCharge.id,oe_6_P_ReturnToCharge.id,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,signal_move_forward_2_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.10,ce_P_ReturnToCharge.id.11,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,signal_move_forward_1_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.6,ce_P_ReturnToCharge.id.7,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode4_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.8,ce_P_ReturnToCharge.id.12,ce_P_ReturnToCharge.id.9,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode2_P_ReturnToCharge_t_alphabet) = {|oe_1_P_ReturnToCharge.id,dc,oe_2_P_ReturnToCharge.id,oe_3_P_ReturnToCharge.id,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,signal_clean_false__1_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.7,ce_P_ReturnToCharge.id.8,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode0_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.1,ce_P_ReturnToCharge.id.3,ce_P_ReturnToCharge.id.2,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__1_P_ReturnToCharge_t_alphabet) = {|oe_2_P_ReturnToCharge.id,ce_P_ReturnToCharge.id.4,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,x_1_P_ReturnToCharge_t_alphabet) = {|oe_5_P_ReturnToCharge.id,ce_P_ReturnToCharge.id.12,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__3_P_ReturnToCharge_t_alphabet) = {|oe_6_P_ReturnToCharge.id,ce_P_ReturnToCharge.id.10,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__2_P_ReturnToCharge_t_alphabet) = {|ce_P_ReturnToCharge.id.5,ce_P_ReturnToCharge.id.6,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__4_P_ReturnToCharge_t_alphabet) = {|oe_3_P_ReturnToCharge.id,ce_P_ReturnToCharge.id.5,endDiagram_P_ReturnToCharge.id|}
AlphabetDiagram_P_ReturnToCharge_t(id) = union(union(union(union(union(union(union(union(union(union(union(union(union(union(union(union(AlphabetDiagram_P_ReturnToCharge(id,accept_charging_1_P_ReturnToCharge_t_alphabet),AlphabetDiagram_P_ReturnToCharge(id,P_NoFall_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,accept_ultrasonic_1_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,InitialNode0_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,accept_battery_level_1_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode3_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,signal_move_forward_2_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,signal_move_forward_1_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode4_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode2_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,signal_clean_false__1_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode0_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__1_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,x_1_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__3_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__2_P_ReturnToCharge_t_alphabet)),AlphabetDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__4_P_ReturnToCharge_t_alphabet))

ProcessDiagram_P_ReturnToCharge(id,accept_charging_1_P_ReturnToCharge_t_alphabet) = normal(accept_charging_1_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,P_NoFall_P_ReturnToCharge_t_alphabet) = normal(P_NoFall_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,accept_ultrasonic_1_P_ReturnToCharge_t_alphabet) = normal(accept_ultrasonic_1_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,InitialNode0_P_ReturnToCharge_t_alphabet) = normal(InitialNode0_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,accept_battery_level_1_P_ReturnToCharge_t_alphabet) = normal(accept_battery_level_1_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode3_P_ReturnToCharge_t_alphabet) = normal(DecisionNode_MergeNode3_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,signal_move_forward_2_P_ReturnToCharge_t_alphabet) = normal(signal_move_forward_2_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,signal_move_forward_1_P_ReturnToCharge_t_alphabet) = normal(signal_move_forward_1_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode4_P_ReturnToCharge_t_alphabet) = normal(DecisionNode_MergeNode4_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode2_P_ReturnToCharge_t_alphabet) = normal(DecisionNode_MergeNode2_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,signal_clean_false__1_P_ReturnToCharge_t_alphabet) = normal(signal_clean_false__1_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,DecisionNode_MergeNode0_P_ReturnToCharge_t_alphabet) = normal(DecisionNode_MergeNode0_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__1_P_ReturnToCharge_t_alphabet) = normal(signal_turn_Direction_left__1_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,x_1_P_ReturnToCharge_t_alphabet) = normal(x_1_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__3_P_ReturnToCharge_t_alphabet) = normal(signal_turn_Direction_left__3_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__2_P_ReturnToCharge_t_alphabet) = normal(signal_turn_Direction_left__2_P_ReturnToCharge_t(id))
ProcessDiagram_P_ReturnToCharge(id,signal_turn_Direction_left__4_P_ReturnToCharge_t_alphabet) = normal(signal_turn_Direction_left__4_P_ReturnToCharge_t(id))
InitialNode0_P_ReturnToCharge(id) = update_P_ReturnToCharge.id.1!(1-0) -> ((ce_P_ReturnToCharge.id.1 -> SKIP))
InitialNode0_P_ReturnToCharge_t(id) = InitialNode0_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
accept_battery_level_1_P_ReturnToCharge(id) = ((ce_P_ReturnToCharge.id.2 -> SKIP)); WAIT_accept_battery_level_1(id, alphabet_robochart_P_ReturnToCharge) [| {|set_b_battery_level_P_ReturnToCharge.id |} |> get_b_battery_level_P_ReturnToCharge.id.1?b -> ((oe_1_P_ReturnToCharge.id!b -> SKIP)); accept_battery_level_1_P_ReturnToCharge(id)
accept_battery_level_1_P_ReturnToCharge_t(id) = ((accept_battery_level_1_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)) [|{|get_b_battery_level_P_ReturnToCharge.id,set_b_battery_level_P_ReturnToCharge.id,endDiagram_P_ReturnToCharge.id|}|] Mem_battery_level_P_ReturnToCharge_b_t(id,-2)) \{|get_b_battery_level_P_ReturnToCharge.id,set_b_battery_level_P_ReturnToCharge.id|}
DecisionNode_MergeNode0_P_ReturnToCharge(id) = ((ce_P_ReturnToCharge.id.1 -> SKIP) [] (ce_P_ReturnToCharge.id.3 -> SKIP)); ce_P_ReturnToCharge.id.2 -> DecisionNode_MergeNode0_P_ReturnToCharge(id)
DecisionNode_MergeNode0_P_ReturnToCharge_t(id) = DecisionNode_MergeNode0_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
signal_turn_Direction_left__1_P_ReturnToCharge(id) = ((oe_2_P_ReturnToCharge.id?x -> SKIP)); PathPlanningSM::turn.out.Direction_left -> ((ce_P_ReturnToCharge.id.4 -> SKIP)); signal_turn_Direction_left__1_P_ReturnToCharge(id)
signal_turn_Direction_left__1_P_ReturnToCharge_t(id) = signal_turn_Direction_left__1_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
DecisionNode_MergeNode2_P_ReturnToCharge(id) = oe_1_P_ReturnToCharge.id?b -> (b > 0 & (dc -> oe_2_P_ReturnToCharge.id!b -> SKIP) [] b <= 0 & (dc -> oe_3_P_ReturnToCharge.id!b -> SKIP)); DecisionNode_MergeNode2_P_ReturnToCharge(id)
DecisionNode_MergeNode2_P_ReturnToCharge_t(id) = (DecisionNode_MergeNode2_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)) \{|dc|}
signal_turn_Direction_left__2_P_ReturnToCharge(id) = ((ce_P_ReturnToCharge.id.5 -> SKIP)); PathPlanningSM::turn.out.Direction_left -> ((ce_P_ReturnToCharge.id.6 -> SKIP)); signal_turn_Direction_left__2_P_ReturnToCharge(id)
signal_turn_Direction_left__2_P_ReturnToCharge_t(id) = signal_turn_Direction_left__2_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
signal_move_forward_1_P_ReturnToCharge(id) = ((ce_P_ReturnToCharge.id.6 -> SKIP)); PathPlanningSM::move_forward.out -> ((ce_P_ReturnToCharge.id.7 -> SKIP)); signal_move_forward_1_P_ReturnToCharge(id)
signal_move_forward_1_P_ReturnToCharge_t(id) = signal_move_forward_1_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
signal_clean_false__1_P_ReturnToCharge(id) = ((ce_P_ReturnToCharge.id.7 -> SKIP)); PathPlanningSM::clean.out.false -> ((ce_P_ReturnToCharge.id.8 -> SKIP)); signal_clean_false__1_P_ReturnToCharge(id)
signal_clean_false__1_P_ReturnToCharge_t(id) = signal_clean_false__1_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
accept_ultrasonic_1_P_ReturnToCharge(id) = ((ce_P_ReturnToCharge.id.9 -> SKIP)); PathPlanningSM::ultrasonic.in?u -> ((oe_4_P_ReturnToCharge.id!u -> SKIP)); accept_ultrasonic_1_P_ReturnToCharge(id)
accept_ultrasonic_1_P_ReturnToCharge_t(id) = accept_ultrasonic_1_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
DecisionNode_MergeNode3_P_ReturnToCharge(id) = oe_4_P_ReturnToCharge.id?u -> (u < 1 & (dc -> oe_5_P_ReturnToCharge.id!u -> SKIP) [] u >= 1 & (dc -> oe_6_P_ReturnToCharge.id!u -> SKIP)); DecisionNode_MergeNode3_P_ReturnToCharge(id)
DecisionNode_MergeNode3_P_ReturnToCharge_t(id) = (DecisionNode_MergeNode3_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)) \{|dc|}
signal_turn_Direction_left__3_P_ReturnToCharge(id) = ((oe_6_P_ReturnToCharge.id?x -> SKIP)); PathPlanningSM::turn.out.Direction_left -> ((ce_P_ReturnToCharge.id.10 -> SKIP)); signal_turn_Direction_left__3_P_ReturnToCharge(id)
signal_turn_Direction_left__3_P_ReturnToCharge_t(id) = signal_turn_Direction_left__3_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
signal_move_forward_2_P_ReturnToCharge(id) = ((ce_P_ReturnToCharge.id.10 -> SKIP)); PathPlanningSM::move_forward.out -> ((ce_P_ReturnToCharge.id.11 -> SKIP)); signal_move_forward_2_P_ReturnToCharge(id)
signal_move_forward_2_P_ReturnToCharge_t(id) = signal_move_forward_2_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
accept_charging_1_P_ReturnToCharge(id) = ((ce_P_ReturnToCharge.id.11 -> SKIP)); PathPlanningSM::charging.in -> ((ce_P_ReturnToCharge.id.3 -> SKIP)); accept_charging_1_P_ReturnToCharge(id)
accept_charging_1_P_ReturnToCharge_t(id) = accept_charging_1_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
DecisionNode_MergeNode4_P_ReturnToCharge(id) = ((ce_P_ReturnToCharge.id.8 -> SKIP) [] (ce_P_ReturnToCharge.id.12 -> SKIP)); ce_P_ReturnToCharge.id.9 -> DecisionNode_MergeNode4_P_ReturnToCharge(id)
DecisionNode_MergeNode4_P_ReturnToCharge_t(id) = DecisionNode_MergeNode4_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
x_1_P_ReturnToCharge(id) = ((oe_5_P_ReturnToCharge.id?y -> set_y_x_P_ReturnToCharge.id.1!y -> SKIP)); get_y_x_P_ReturnToCharge.id.2?y -> ((ce_P_ReturnToCharge.id.12 -> SKIP)); x_1_P_ReturnToCharge(id)
x_1_P_ReturnToCharge_t(id) = ((x_1_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)) [|{|get_y_x_P_ReturnToCharge.id,set_y_x_P_ReturnToCharge.id,endDiagram_P_ReturnToCharge.id|}|] Mem_x_P_ReturnToCharge_y_t(id,-2)) \{|get_y_x_P_ReturnToCharge.id,set_y_x_P_ReturnToCharge.id|}
signal_turn_Direction_left__4_P_ReturnToCharge(id) = ((oe_3_P_ReturnToCharge.id?x -> SKIP)); PathPlanningSM::turn.out.Direction_left -> ((ce_P_ReturnToCharge.id.5 -> SKIP)); signal_turn_Direction_left__4_P_ReturnToCharge(id)
signal_turn_Direction_left__4_P_ReturnToCharge_t(id) = signal_turn_Direction_left__4_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
P_NoFall_P_ReturnToCharge(id) = ((ce_P_ReturnToCharge.id.4 -> SKIP)); normal(P_NoFall(1));P_NoFall_P_ReturnToCharge(id)
P_NoFall_P_ReturnToCharge_t(id) = P_NoFall_P_ReturnToCharge(id) /\ END_DIAGRAM_P_ReturnToCharge(id)
Mem_battery_level_P_ReturnToCharge_b(id,b) = get_b_battery_level_P_ReturnToCharge.id?c!b -> Mem_battery_level_P_ReturnToCharge_b(id,b) [] set_b_battery_level_P_ReturnToCharge.id?c?b -> Mem_battery_level_P_ReturnToCharge_b(id,b)
Mem_battery_level_P_ReturnToCharge_b_t(id,b) = Mem_battery_level_P_ReturnToCharge_b(id,b) /\ END_DIAGRAM_P_ReturnToCharge(id)
Mem_x_P_ReturnToCharge_y(id,y) = get_y_x_P_ReturnToCharge.id?c!y -> Mem_x_P_ReturnToCharge_y(id,y) [] set_y_x_P_ReturnToCharge.id?c?y -> Mem_x_P_ReturnToCharge_y(id,y)
Mem_x_P_ReturnToCharge_y_t(id,y) = Mem_x_P_ReturnToCharge_y(id,y) /\ END_DIAGRAM_P_ReturnToCharge(id)
AlphabetMemP_NoFall_P_ReturnToCharge(id) = {|endDiagram_P_ReturnToCharge.id|}

TokenManager_P_ReturnToCharge(id,x,init) = update_P_ReturnToCharge.id?c?y:limiteUpdate_P_ReturnToCharge -> x+y < 10 & x+y > -10 & TokenManager_P_ReturnToCharge(id,x+y,1) [] clear_P_ReturnToCharge.id?c -> endDiagram_P_ReturnToCharge.id -> SKIP [] x == 0 & init == 1 & endDiagram_P_ReturnToCharge.id -> SKIP
TokenManager_P_ReturnToCharge_t(id,x,init) = TokenManager_P_ReturnToCharge(id,x,init)

datatype alphabet_P_NoFall = signal_move_forward_4_P_NoFall_t_alphabet | DecisionNode_MergeNode9_P_NoFall_t_alphabet| DecisionNode_MergeNode8_P_NoFall_t_alphabet| DecisionNode_MergeNode7_P_NoFall_t_alphabet| signal_move_forward_3_P_NoFall_t_alphabet| DecisionNode_MergeNode6_P_NoFall_t_alphabet| DecisionNode_MergeNode5_P_NoFall_t_alphabet| DecisionNode_MergeNode2_P_NoFall_t_alphabet| signal_turn_Direction_right__1_P_NoFall_t_alphabet| DecisionNode_MergeNode1_P_NoFall_t_alphabet| DecisionNode_MergeNode0_P_NoFall_t_alphabet| InitialNode0_P_NoFall_t_alphabet| accept_ultrasonic_2_P_NoFall_t_alphabet| signal_turn_Direction_right__2_P_NoFall_t_alphabet| signal_turn_Direction_left__5_P_NoFall_t_alphabet| signal_turn_Direction_left__6_P_NoFall_t_alphabet| signal_turn_Direction_left__7_P_NoFall_t_alphabet| w_1_P_NoFall_t_alphabet| x_1_P_NoFall_t_alphabet
core_int_P_NoFall = {(-2)..2}
robochart_P_NoFall = "file_PathPlanningSM_coreassertions.csp"
robochart_alphabet_P_NoFall = {|PathPlanningSM::move_forward.out,PathPlanningSM::turn.out.Direction_left,PathPlanningSM::turn.out.Direction_right,PathPlanningSM::clean.out.true,PathPlanningSM::clean.out.false,PathPlanningSM::charging.in,PathPlanningSM::stop.out,PathPlanningSM::displacement.out,PathPlanningSM::displacement.in,PathPlanningSM::ultrasonic.in,PathPlanningSM::battery_level.in|}
countGet_P_NoFall = {1..3}
countSet_P_NoFall = {1..2}
countCe_P_NoFall = {1..21}
countOe_P_NoFall = {1..3}
countUpdate_P_NoFall = {1..1}
countClear_P_NoFall = {1..0}
limiteUpdate_P_NoFall = {(1)..(1)}
channel startActivity_P_NoFall: ID_P_NoFall
channel endActivity_P_NoFall: ID_P_NoFall
channel get_y_x_P_NoFall: ID_P_NoFall.countGet_P_NoFall.core_int_P_NoFall
channel set_y_x_P_NoFall: ID_P_NoFall.countSet_P_NoFall.core_int_P_NoFall
channel get_z_w_P_NoFall: ID_P_NoFall.countGet_P_NoFall.core_int_P_NoFall
channel set_z_w_P_NoFall: ID_P_NoFall.countSet_P_NoFall.core_int_P_NoFall
channel get_u_ultrasonic_P_NoFall: ID_P_NoFall.countGet_P_NoFall.core_int_P_NoFall
channel set_u_ultrasonic_P_NoFall: ID_P_NoFall.countSet_P_NoFall.core_int_P_NoFall
channel ce_P_NoFall: ID_P_NoFall.countCe_P_NoFall
channel oe_2_P_NoFall: ID_P_NoFall.core_int_P_NoFall
channel oe_1_P_NoFall: ID_P_NoFall.core_int_P_NoFall
channel oe_3_P_NoFall: ID_P_NoFall.core_int_P_NoFall
channel clear_P_NoFall: ID_P_NoFall.countClear_P_NoFall
channel update_P_NoFall: ID_P_NoFall.countUpdate_P_NoFall.limiteUpdate_P_NoFall
channel endDiagram_P_NoFall: ID_P_NoFall

alphabet_Astah_P_NoFall = {| startActivity_P_NoFall, endActivity_P_NoFall, ce_P_NoFall, oe_2_P_NoFall, oe_1_P_NoFall, oe_3_P_NoFall, clear_P_NoFall, update_P_NoFall, endDiagram_P_NoFall |}

END_DIAGRAM_P_NoFall(id) = endDiagram_P_NoFall.id -> SKIP
P_NoFall(ID_P_NoFall) = (Internal_P_NoFall(ID_P_NoFall) [|{|update_P_NoFall,clear_P_NoFall,endDiagram_P_NoFall|}|] TokenManager_P_NoFall_t(ID_P_NoFall,0,0))
Internal_P_NoFall(id) = StartActivity_P_NoFall(id); Node_P_NoFall(id); EndActivity_P_NoFall(id)
StartActivity_P_NoFall(id) = startActivity_P_NoFall.id -> SKIP
EndActivity_P_NoFall(id) = endActivity_P_NoFall.id -> SKIP
AlphabetDiagram_P_NoFall(id,signal_move_forward_4_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.18,ce_P_NoFall.id.4,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode9_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.19,dc,ce_P_NoFall.id.20,ce_P_NoFall.id.18,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode8_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.17,ce_P_NoFall.id.21,ce_P_NoFall.id.19,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode7_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.13,ce_P_NoFall.id.14,ce_P_NoFall.id.12,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,signal_move_forward_3_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.12,ce_P_NoFall.id.3,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode6_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.11,dc,ce_P_NoFall.id.14,ce_P_NoFall.id.16,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode5_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.10,dc,ce_P_NoFall.id.13,ce_P_NoFall.id.15,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode2_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.7,dc,ce_P_NoFall.id.8,ce_P_NoFall.id.9,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,signal_turn_Direction_right__1_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.9,ce_P_NoFall.id.11,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode1_P_NoFall_t_alphabet) = {|oe_1_P_NoFall.id,dc,oe_2_P_NoFall.id,oe_3_P_NoFall.id,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode0_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.1,ce_P_NoFall.id.3,ce_P_NoFall.id.4,ce_P_NoFall.id.5,ce_P_NoFall.id.6,ce_P_NoFall.id.2,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,InitialNode0_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.1,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,accept_ultrasonic_2_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.2,oe_1_P_NoFall.id,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,signal_turn_Direction_right__2_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.16,ce_P_NoFall.id.21,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,signal_turn_Direction_left__5_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.8,ce_P_NoFall.id.10,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,signal_turn_Direction_left__6_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.15,ce_P_NoFall.id.17,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,signal_turn_Direction_left__7_P_NoFall_t_alphabet) = {|ce_P_NoFall.id.20,ce_P_NoFall.id.5,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,w_1_P_NoFall_t_alphabet) = {|oe_3_P_NoFall.id,ce_P_NoFall.id.7,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall(id,x_1_P_NoFall_t_alphabet) = {|oe_2_P_NoFall.id,ce_P_NoFall.id.6,endDiagram_P_NoFall.id|}
AlphabetDiagram_P_NoFall_t(id) = union(union(union(union(union(union(union(union(union(union(union(union(union(union(union(union(union(union(AlphabetDiagram_P_NoFall(id,signal_move_forward_4_P_NoFall_t_alphabet),AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode9_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode8_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode7_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,signal_move_forward_3_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode6_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode5_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode2_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,signal_turn_Direction_right__1_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode1_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,DecisionNode_MergeNode0_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,InitialNode0_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,accept_ultrasonic_2_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,signal_turn_Direction_right__2_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,signal_turn_Direction_left__5_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,signal_turn_Direction_left__6_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,signal_turn_Direction_left__7_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,w_1_P_NoFall_t_alphabet)),AlphabetDiagram_P_NoFall(id,x_1_P_NoFall_t_alphabet))

ProcessDiagram_P_NoFall(id,signal_move_forward_4_P_NoFall_t_alphabet) = normal(signal_move_forward_4_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,DecisionNode_MergeNode9_P_NoFall_t_alphabet) = normal(DecisionNode_MergeNode9_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,DecisionNode_MergeNode8_P_NoFall_t_alphabet) = normal(DecisionNode_MergeNode8_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,DecisionNode_MergeNode7_P_NoFall_t_alphabet) = normal(DecisionNode_MergeNode7_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,signal_move_forward_3_P_NoFall_t_alphabet) = normal(signal_move_forward_3_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,DecisionNode_MergeNode6_P_NoFall_t_alphabet) = normal(DecisionNode_MergeNode6_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,DecisionNode_MergeNode5_P_NoFall_t_alphabet) = normal(DecisionNode_MergeNode5_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,DecisionNode_MergeNode2_P_NoFall_t_alphabet) = normal(DecisionNode_MergeNode2_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,signal_turn_Direction_right__1_P_NoFall_t_alphabet) = normal(signal_turn_Direction_right__1_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,DecisionNode_MergeNode1_P_NoFall_t_alphabet) = normal(DecisionNode_MergeNode1_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,DecisionNode_MergeNode0_P_NoFall_t_alphabet) = normal(DecisionNode_MergeNode0_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,InitialNode0_P_NoFall_t_alphabet) = normal(InitialNode0_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,accept_ultrasonic_2_P_NoFall_t_alphabet) = normal(accept_ultrasonic_2_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,signal_turn_Direction_right__2_P_NoFall_t_alphabet) = normal(signal_turn_Direction_right__2_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,signal_turn_Direction_left__5_P_NoFall_t_alphabet) = normal(signal_turn_Direction_left__5_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,signal_turn_Direction_left__6_P_NoFall_t_alphabet) = normal(signal_turn_Direction_left__6_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,signal_turn_Direction_left__7_P_NoFall_t_alphabet) = normal(signal_turn_Direction_left__7_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,w_1_P_NoFall_t_alphabet) = normal(w_1_P_NoFall_t(id))
ProcessDiagram_P_NoFall(id,x_1_P_NoFall_t_alphabet) = normal(x_1_P_NoFall_t(id))
InitialNode0_P_NoFall(id) = update_P_NoFall.id.1!(1-0) -> ((ce_P_NoFall.id.1 -> SKIP))
InitialNode0_P_NoFall_t(id) = InitialNode0_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
accept_ultrasonic_2_P_NoFall(id) = ((ce_P_NoFall.id.2 -> SKIP)); WAIT_accept_ultrasonic_2(id, alphabet_robochart_P_NoFall) [| {|set_u_ultrasonic_P_NoFall.id |} |> get_u_ultrasonic_P_NoFall.id.1?u -> ((oe_1_P_NoFall.id!u -> SKIP)); accept_ultrasonic_2_P_NoFall(id)
accept_ultrasonic_2_P_NoFall_t(id) = ((accept_ultrasonic_2_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)) [|{|get_u_ultrasonic_P_NoFall.id,set_u_ultrasonic_P_NoFall.id,endDiagram_P_NoFall.id|}|] Mem_ultrasonic_P_NoFall_u_t(id,-2)) \{|get_u_ultrasonic_P_NoFall.id,set_u_ultrasonic_P_NoFall.id|}
DecisionNode_MergeNode0_P_NoFall(id) = ((ce_P_NoFall.id.1 -> SKIP) [] (ce_P_NoFall.id.3 -> SKIP) [] (ce_P_NoFall.id.4 -> SKIP) [] (ce_P_NoFall.id.5 -> SKIP) [] (ce_P_NoFall.id.6 -> SKIP)); ce_P_NoFall.id.2 -> DecisionNode_MergeNode0_P_NoFall(id)
DecisionNode_MergeNode0_P_NoFall_t(id) = DecisionNode_MergeNode0_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
DecisionNode_MergeNode2_P_NoFall(id) = ce_P_NoFall.id.7 -> ((dc -> ce_P_NoFall.id.8 -> SKIP) [] (dc -> ce_P_NoFall.id.9 -> SKIP)); DecisionNode_MergeNode2_P_NoFall(id)
DecisionNode_MergeNode2_P_NoFall_t(id) = DecisionNode_MergeNode2_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id) \{|dc|}
signal_turn_Direction_left__5_P_NoFall(id) = ((ce_P_NoFall.id.8 -> SKIP)); PathPlanningSM::turn.out.Direction_left -> ((ce_P_NoFall.id.10 -> SKIP)); signal_turn_Direction_left__5_P_NoFall(id)
signal_turn_Direction_left__5_P_NoFall_t(id) = signal_turn_Direction_left__5_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
signal_turn_Direction_right__1_P_NoFall(id) = ((ce_P_NoFall.id.9 -> SKIP)); PathPlanningSM::turn.out.Direction_right -> ((ce_P_NoFall.id.11 -> SKIP)); signal_turn_Direction_right__1_P_NoFall(id)
signal_turn_Direction_right__1_P_NoFall_t(id) = signal_turn_Direction_right__1_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
DecisionNode_MergeNode1_P_NoFall(id) = oe_1_P_NoFall.id?u -> (u<1 & (dc -> oe_2_P_NoFall.id!u -> SKIP) [] u>=1 & (dc -> oe_3_P_NoFall.id!u -> SKIP)); DecisionNode_MergeNode1_P_NoFall(id)
DecisionNode_MergeNode1_P_NoFall_t(id) = (DecisionNode_MergeNode1_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)) \{|dc|}
signal_move_forward_3_P_NoFall(id) = ((ce_P_NoFall.id.12 -> SKIP)); PathPlanningSM::move_forward.out -> ((ce_P_NoFall.id.3 -> SKIP)); signal_move_forward_3_P_NoFall(id)
signal_move_forward_3_P_NoFall_t(id) = signal_move_forward_3_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
DecisionNode_MergeNode7_P_NoFall(id) = ((ce_P_NoFall.id.13 -> SKIP) [] (ce_P_NoFall.id.14 -> SKIP)); ce_P_NoFall.id.12 -> DecisionNode_MergeNode7_P_NoFall(id)
DecisionNode_MergeNode7_P_NoFall_t(id) = DecisionNode_MergeNode7_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
DecisionNode_MergeNode5_P_NoFall(id) = ce_P_NoFall.id.10 -> ((dc -> ce_P_NoFall.id.13 -> SKIP) [] (dc -> ce_P_NoFall.id.15 -> SKIP)); DecisionNode_MergeNode5_P_NoFall(id)
DecisionNode_MergeNode5_P_NoFall_t(id) = DecisionNode_MergeNode5_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id) \{|dc|}
DecisionNode_MergeNode6_P_NoFall(id) = ce_P_NoFall.id.11 -> ((dc -> ce_P_NoFall.id.14 -> SKIP) [] (dc -> ce_P_NoFall.id.16 -> SKIP)); DecisionNode_MergeNode6_P_NoFall(id)
DecisionNode_MergeNode6_P_NoFall_t(id) = DecisionNode_MergeNode6_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id) \{|dc|}
signal_turn_Direction_left__6_P_NoFall(id) = ((ce_P_NoFall.id.15 -> SKIP)); PathPlanningSM::turn.out.Direction_left -> ((ce_P_NoFall.id.17 -> SKIP)); signal_turn_Direction_left__6_P_NoFall(id)
signal_turn_Direction_left__6_P_NoFall_t(id) = signal_turn_Direction_left__6_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
signal_move_forward_4_P_NoFall(id) = ((ce_P_NoFall.id.18 -> SKIP)); PathPlanningSM::move_forward.out -> ((ce_P_NoFall.id.4 -> SKIP)); signal_move_forward_4_P_NoFall(id)
signal_move_forward_4_P_NoFall_t(id) = signal_move_forward_4_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
DecisionNode_MergeNode9_P_NoFall(id) = ce_P_NoFall.id.19 -> ((dc -> ce_P_NoFall.id.20 -> SKIP) [] (dc -> ce_P_NoFall.id.18 -> SKIP)); DecisionNode_MergeNode9_P_NoFall(id)
DecisionNode_MergeNode9_P_NoFall_t(id) = DecisionNode_MergeNode9_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id) \{|dc|}
signal_turn_Direction_left__7_P_NoFall(id) = ((ce_P_NoFall.id.20 -> SKIP)); PathPlanningSM::turn.out.Direction_left -> ((ce_P_NoFall.id.5 -> SKIP)); signal_turn_Direction_left__7_P_NoFall(id)
signal_turn_Direction_left__7_P_NoFall_t(id) = signal_turn_Direction_left__7_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
signal_turn_Direction_right__2_P_NoFall(id) = ((ce_P_NoFall.id.16 -> SKIP)); PathPlanningSM::turn.out.Direction_right -> ((ce_P_NoFall.id.21 -> SKIP)); signal_turn_Direction_right__2_P_NoFall(id)
signal_turn_Direction_right__2_P_NoFall_t(id) = signal_turn_Direction_right__2_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
DecisionNode_MergeNode8_P_NoFall(id) = ((ce_P_NoFall.id.17 -> SKIP) [] (ce_P_NoFall.id.21 -> SKIP)); ce_P_NoFall.id.19 -> DecisionNode_MergeNode8_P_NoFall(id)
DecisionNode_MergeNode8_P_NoFall_t(id) = DecisionNode_MergeNode8_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)
x_1_P_NoFall(id) = ((oe_2_P_NoFall.id?y -> set_y_x_P_NoFall.id.1!y -> SKIP)); get_y_x_P_NoFall.id.2?y -> ((ce_P_NoFall.id.6 -> SKIP)); x_1_P_NoFall(id)
x_1_P_NoFall_t(id) = ((x_1_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)) [|{|get_y_x_P_NoFall.id,set_y_x_P_NoFall.id,endDiagram_P_NoFall.id|}|] Mem_x_P_NoFall_y_t(id,-2)) \{|get_y_x_P_NoFall.id,set_y_x_P_NoFall.id|}
w_1_P_NoFall(id) = ((oe_3_P_NoFall.id?z -> set_z_w_P_NoFall.id.2!z -> SKIP)); get_z_w_P_NoFall.id.3?z -> ((ce_P_NoFall.id.7 -> SKIP)); w_1_P_NoFall(id)
w_1_P_NoFall_t(id) = ((w_1_P_NoFall(id) /\ END_DIAGRAM_P_NoFall(id)) [|{|get_z_w_P_NoFall.id,set_z_w_P_NoFall.id,endDiagram_P_NoFall.id|}|] Mem_w_P_NoFall_z_t(id,-2)) \{|get_z_w_P_NoFall.id,set_z_w_P_NoFall.id|}
Mem_x_P_NoFall_y(id,y) = get_y_x_P_NoFall.id?c!y -> Mem_x_P_NoFall_y(id,y) [] set_y_x_P_NoFall.id?c?y -> Mem_x_P_NoFall_y(id,y)
Mem_x_P_NoFall_y_t(id,y) = Mem_x_P_NoFall_y(id,y) /\ END_DIAGRAM_P_NoFall(id)
Mem_w_P_NoFall_z(id,z) = get_z_w_P_NoFall.id?c!z -> Mem_w_P_NoFall_z(id,z) [] set_z_w_P_NoFall.id?c?z -> Mem_w_P_NoFall_z(id,z)
Mem_w_P_NoFall_z_t(id,z) = Mem_w_P_NoFall_z(id,z) /\ END_DIAGRAM_P_NoFall(id)
Mem_ultrasonic_P_NoFall_u(id,u) = get_u_ultrasonic_P_NoFall.id?c!u -> Mem_ultrasonic_P_NoFall_u(id,u) [] set_u_ultrasonic_P_NoFall.id?c?u -> Mem_ultrasonic_P_NoFall_u(id,u)
Mem_ultrasonic_P_NoFall_u_t(id,u) = Mem_ultrasonic_P_NoFall_u(id,u) /\ END_DIAGRAM_P_NoFall(id)

TokenManager_P_NoFall(id,x,init) = update_P_NoFall.id?c?y:limiteUpdate_P_NoFall -> x+y < 10 & x+y > -10 & TokenManager_P_NoFall(id,x+y,1) [] clear_P_NoFall.id?c -> endDiagram_P_NoFall.id -> SKIP [] x == 0 & init == 1 & endDiagram_P_NoFall.id -> SKIP
TokenManager_P_NoFall_t(id,x,init) = TokenManager_P_NoFall(id,x,init)


WAIT_accept_ultrasonic_2(id, alphabet) = 
NRecurse(diff(alphabet, {|PathPlanningSM::ultrasonic.in|}), WAIT_accept_ultrasonic_2(id, alphabet))
 |~| 
PathPlanningSM::ultrasonic.in?u -> set_u_ultrasonic_P_NoFall.id?c!u -> SKIP

WAIT_PROCCESSES_P_NoFall(processes) = ( ||| CONTROL : processes @ CONTROL )  /\ endDiagram_P_NoFall?id -> SKIP

Prop_P_NoFall = PROP_P_NoFall(Wait_control_processes_P_NoFall) \ alphabet_Astah_P_NoFall 

alphabet_robochart_P_NoFall = {| PathPlanningSM::move_forward.out, PathPlanningSM::turn.out.Direction_left, PathPlanningSM::turn.out.Direction_right, PathPlanningSM::stop.out, PathPlanningSM::ultrasonic.in.-2, PathPlanningSM::ultrasonic.in.-1, PathPlanningSM::ultrasonic.in.0, PathPlanningSM::ultrasonic.in.1, PathPlanningSM::ultrasonic.in.2, PathPlanningSM::battery_level.in.-2, PathPlanningSM::battery_level.in.-1, PathPlanningSM::battery_level.in.0, PathPlanningSM::battery_level.in.1, PathPlanningSM::battery_level.in.2, PathPlanningSM::charging.in, PathPlanningSM::clean.out.false, PathPlanningSM::clean.out.true, PathPlanningSM::displacement.in.-2, PathPlanningSM::displacement.in.-1, PathPlanningSM::displacement.in.0, PathPlanningSM::displacement.in.1, PathPlanningSM::displacement.in.2, PathPlanningSM::displacement.out.0 |}

PROP_P_NoFall(processes) = (MAIN)

Wait_control_processes_P_NoFall = {}

Node_P_NoFall(id) = composeNodes_P_NoFall(id)

composeNodes_P_NoFall(id) = 
	let
	    alphabet_P_NoFall_s = seq(alphabet_P_NoFall)
		composeNodes_(id,<ev>,_) = ProcessDiagram_P_NoFall(id,ev)
		composeNodes_(id,<ev>^tail,past) = 
			ProcessDiagram_P_NoFall(id,ev) 
				[|union(diff(AlphabetDiagram_P_NoFall(id,ev),past),{endDiagram_P_NoFall.id})|] 
			( composeNodes_(id,tail,union(past,AlphabetDiagram_P_NoFall(id,ev))) )
	within 
		composeNodes_(id,alphabet_P_NoFall_s,{})


assert Prop_P_ReturnToCharge [T= P_PathPlanningSM

NRecurse(S, P) = |~| ev : S @ ev -> P

WAIT_accept_battery_level_1(id, alphabet) = 
NRecurse(diff(alphabet, {|PathPlanningSM::battery_level.in|}), WAIT_accept_battery_level_1(id, alphabet))
 |~| 
PathPlanningSM::battery_level.in?b -> set_b_battery_level_P_ReturnToCharge.id?c!b -> SKIP

WAIT(alphabet,event) = 
	NRecurse(diff(alphabet, {event}), WAIT(alphabet,event))
	|~|
	event -> SKIP

WAIT_PROCCESSES_P_ReturnToCharge(processes) = ( ||| CONTROL : processes @ CONTROL )  /\ endDiagram_P_ReturnToCharge?id -> SKIP

Prop_P_ReturnToCharge = PROP_P_ReturnToCharge(Wait_control_processes_P_ReturnToCharge) \ union(alphabet_Astah_P_NoFall, alphabet_Astah_P_ReturnToCharge) 

alphabet_robochart_P_ReturnToCharge = {| PathPlanningSM::move_forward.out, PathPlanningSM::turn.out.Direction_left, PathPlanningSM::turn.out.Direction_right, PathPlanningSM::stop.out, PathPlanningSM::ultrasonic.in.-2, PathPlanningSM::ultrasonic.in.-1, PathPlanningSM::ultrasonic.in.0, PathPlanningSM::ultrasonic.in.1, PathPlanningSM::ultrasonic.in.2, PathPlanningSM::battery_level.in.-2, PathPlanningSM::battery_level.in.-1, PathPlanningSM::battery_level.in.0, PathPlanningSM::battery_level.in.1, PathPlanningSM::battery_level.in.2, PathPlanningSM::charging.in, PathPlanningSM::clean.out.false, PathPlanningSM::clean.out.true, PathPlanningSM::displacement.in.-2, PathPlanningSM::displacement.in.-1, PathPlanningSM::displacement.in.0, PathPlanningSM::displacement.in.1, PathPlanningSM::displacement.in.2, PathPlanningSM::displacement.out.0 |}

PROP_P_ReturnToCharge(processes) = (MAIN)

Wait_control_processes_P_ReturnToCharge = {}

Node_P_ReturnToCharge(id) = composeNodes_P_ReturnToCharge(id)

composeNodes_P_ReturnToCharge(id) = 
	let
	    alphabet_P_ReturnToCharge_s = seq(alphabet_P_ReturnToCharge)
		composeNodes_(id,<ev>,_) = ProcessDiagram_P_ReturnToCharge(id,ev)
		composeNodes_(id,<ev>^tail,past) = 
			ProcessDiagram_P_ReturnToCharge(id,ev) 
				[|union(diff(AlphabetDiagram_P_ReturnToCharge(id,ev),past),{endDiagram_P_ReturnToCharge.id})|] 
			( composeNodes_(id,tail,union(past,AlphabetDiagram_P_ReturnToCharge(id,ev))) )
	within 
		composeNodes_(id,alphabet_P_ReturnToCharge_s,{})

