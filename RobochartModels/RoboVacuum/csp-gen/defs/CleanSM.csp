module CleanSM
exports
	-- flow channels
	channel internal__ : TIDS
	channel enteredV, enterV, exitV, exitedV : SIDS
	channel enter, entered: SIDS.SIDS
	channel exit,exited: SIDS.SIDS
	channel terminate
	
	-- variable channels
	channel get_clean_var, set_clean_var: core_boolean
			
	-- shared variable channels
	
	-- local variable channels for defined operations that are required by the state machine
	
	-- declaring state machine events
	channel clean__: TIDS.InOut.core_boolean
	channel clean: InOut.core_boolean
	
	-- declaring call and ret events for undefined operations
	channel vacuumCall: core_int
	channel brushCall: core_int
	
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machien module.
	CALL__vacuum(id__,
			    x) =  vacuumCall.x -> SKIP
	
	CALL__brush(id__,
			    x) =  brushCall.x -> SKIP
	
	
	
	-- definition of functions used to expose flow channels
	ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
					   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
					   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
					   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
						 
	ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	
	-- declaring identifiers of state and final states
	datatype SIDS = SID_CleanSM
	              | SID_CleanSM_clean
	              | SID_CleanSM_dont_clean
	
	-- declaring identifiers of transitions
	datatype TIDS = NULLTRANSITION__
	              | TID_CleanSM_t0
	              | TID_CleanSM_t1
	              | TID_CleanSM_t2
	
	-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
	
	ITIDS = {
		TID_CleanSM_t1,	TID_CleanSM_t2
	}
	
	int_int = {|
		clean__.TID_CleanSM_t1,
		internal__.TID_CleanSM_t1,
		clean__.TID_CleanSM_t2,
		internal__.TID_CleanSM_t2
	|}
		
	
	internal_events = {|enter,entered,exit,exited|}
	shared_variable_events = {|
	|}
			
	
	-- declaring all states
	CS_CleanSM_clean_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_CleanSM_clean,SID_CleanSM_dont_clean},
		y____ <- {SID_CleanSM_clean}
	|}
	
	
	CleanSM_clean_triggers = {|
		clean__.TID_CleanSM_t2,
		clean__.TID_CleanSM_t1
	|}
	
	State_CleanSM_clean(id__,
			    const_CleanSM_voltage) = let
		T_CleanSM_t2(id__,
				    const_CleanSM_voltage) = clean__!TID_CleanSM_t2.in?clean_var -> set_clean_var!clean_var ->  (exit.SID_CleanSM_clean.SID_CleanSM_clean -> SKIP;
							SKIP;exited.SID_CleanSM_clean.SID_CleanSM_clean -> SKIP;
							enter!SID_CleanSM_clean!SID_CleanSM_dont_clean -> entered!SID_CleanSM_clean!SID_CleanSM_dont_clean ->
							State_CleanSM_clean(id__,
									    const_CleanSM_voltage)
		)
		State_CleanSM_clean_execute(id__,o____) = true&CALL__brush(
					id__,
					const_CleanSM_voltage
				);true&CALL__vacuum(
					id__,
					const_CleanSM_voltage
				); 
			entered!o____!SID_CleanSM_clean ->
			(SKIP; STOP /\ (
				T_CleanSM_t2(id__,
						    const_CleanSM_voltage)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t2,TID_CleanSM_t1}) -> exit?y____:diff(SIDS,{SID_CleanSM_clean})!SID_CleanSM_clean -> (
						SKIP;
						exited!y____!SID_CleanSM_clean -> SKIP);
						State_CleanSM_clean(id__,
								    const_CleanSM_voltage)
				[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t2,TID_CleanSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_CleanSM_clean})!SID_CleanSM_clean -> (
						SKIP;
						exited!y____!SID_CleanSM_clean -> SKIP);
						State_CleanSM_clean(id__,
								    const_CleanSM_voltage)
			))
	within
		enter?x____:diff(SIDS,{SID_CleanSM_clean})!SID_CleanSM_clean -> (State_CleanSM_clean_execute(id__,x____))
	
	CS_CleanSM_dont_clean_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_CleanSM_clean,SID_CleanSM_dont_clean},
		y____ <- {SID_CleanSM_dont_clean}
	|}
	
	
	CleanSM_dont_clean_triggers = {|
		clean__.TID_CleanSM_t2,
		clean__.TID_CleanSM_t1
	|}
	
	State_CleanSM_dont_clean(id__,
			    const_CleanSM_voltage) = let
		T_CleanSM_t1(id__,
				    const_CleanSM_voltage) = clean__!TID_CleanSM_t1.in?clean_var -> set_clean_var!clean_var ->  (exit.SID_CleanSM_dont_clean.SID_CleanSM_dont_clean -> SKIP;
							SKIP;exited.SID_CleanSM_dont_clean.SID_CleanSM_dont_clean -> SKIP;
							enter!SID_CleanSM_dont_clean!SID_CleanSM_clean -> entered!SID_CleanSM_dont_clean!SID_CleanSM_clean ->
							State_CleanSM_dont_clean(id__,
									    const_CleanSM_voltage)
		)
		State_CleanSM_dont_clean_execute(id__,o____) = true&CALL__brush(
					id__,
					0
				);true&CALL__vacuum(
					id__,
					0
				); 
			entered!o____!SID_CleanSM_dont_clean ->
			(SKIP; STOP /\ (
				T_CleanSM_t1(id__,
						    const_CleanSM_voltage)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t2,TID_CleanSM_t1}) -> exit?y____:diff(SIDS,{SID_CleanSM_dont_clean})!SID_CleanSM_dont_clean -> (
						SKIP;
						exited!y____!SID_CleanSM_dont_clean -> SKIP);
						State_CleanSM_dont_clean(id__,
								    const_CleanSM_voltage)
				[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t2,TID_CleanSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_CleanSM_dont_clean})!SID_CleanSM_dont_clean -> (
						SKIP;
						exited!y____!SID_CleanSM_dont_clean -> SKIP);
						State_CleanSM_dont_clean(id__,
								    const_CleanSM_voltage)
			))
	within
		enter?x____:diff(SIDS,{SID_CleanSM_dont_clean})!SID_CleanSM_dont_clean -> (State_CleanSM_dont_clean_execute(id__,x____))
	
	
	I_CleanSM_i0(id__,
			    const_CleanSM_voltage) = let
		T_CleanSM_t0(id__,
				    const_CleanSM_voltage) = internal__!TID_CleanSM_t0 -> enter!SID_CleanSM!SID_CleanSM_dont_clean -> entered!SID_CleanSM!SID_CleanSM_dont_clean ->
		SKIP
	within
		T_CleanSM_t0(id__,
				    const_CleanSM_voltage)
	
	
	State_CleanSM_clean_R(id__,
			    const_CleanSM_voltage) = 
		State_CleanSM_clean(id__,
				    const_CleanSM_voltage)
			[|diff(int_int,CleanSM_clean_triggers)|]
		SKIP
			 		
	State_CleanSM_dont_clean_R(id__,
			    const_CleanSM_voltage) = 
		State_CleanSM_dont_clean(id__,
				    const_CleanSM_voltage)
			[|diff(int_int,CleanSM_dont_clean_triggers)|]
		SKIP
			 		
		
	STM(id__,
			    const_CleanSM_voltage) = (
		I_CleanSM_i0(id__,
				    const_CleanSM_voltage)
			[|
				{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
					x____ <- diff(SIDS,{SID_CleanSM_clean,SID_CleanSM_dont_clean}),
					y____ <- {SID_CleanSM_clean,SID_CleanSM_dont_clean}
			|}|]
		(
			State_CleanSM_clean_R(id__,
					    const_CleanSM_voltage)
				[|inter(CS_CleanSM_clean_sync,CS_CleanSM_dont_clean_sync)|]
			State_CleanSM_dont_clean_R(id__,
					    const_CleanSM_voltage)
		)
	)
	
	-- optimized memory process
	channel getV_clean_var: core_boolean
	
	-- individual memory processes
	Memory_clean_var(clean_var) = (
		get_clean_var!clean_var -> Memory_clean_var(clean_var)
		[]
		getV_clean_var!clean_var -> Memory_clean_var(clean_var)
		[]
		set_clean_var?x__ -> Memory_clean_var(x__)
		[]
		clean__!TID_CleanSM_t1.in?clean_var -> Memory_clean_var(clean_var)
		[]
		clean__!TID_CleanSM_t2.in?clean_var -> Memory_clean_var(clean_var)
	)
	
	-- processes that read variables and offer transitions
	MemoryTransitions(id__, clean_var
				,
			    const_CleanSM_voltage) = 		
	(internal__!TID_CleanSM_t0 -> SKIP
	[]
	clean__!TID_CleanSM_t1.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==true)} -> SKIP
	[]
	clean__!TID_CleanSM_t2.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==false)} -> SKIP[]
	set_clean_var?x__ -> SKIP)
	
	MemoryTransitions_CleanSM(id__, const_CleanSM_voltage) = (getV_clean_var?clean_var ->
	MemoryTransitions(id__, clean_var
				,
			    const_CleanSM_voltage); MemoryTransitions_CleanSM(id__, const_CleanSM_voltage))			
	
	-- synchronisation, hiding and process sets 
	MemoryVariablesProcesses_CleanSM = Union(
		{
			{
				(Memory_clean_var(true),{|get_clean_var,set_clean_var,clean__.TID_CleanSM_t2,clean__.TID_CleanSM_t1,getV_clean_var|})
			}
		}
	)
	
	MemoryVariablesSyncSet = Union({
		{|
			set_clean_var,
			clean__.TID_CleanSM_t2,
			clean__.TID_CleanSM_t1,
			getV_clean_var
		|}	
	})
	
	MemoryVariablesHideSet = Union({
		{|
			getV_clean_var
		|}
	})
	
	-- combined individual memory processes
	MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_CleanSM @ P
	
	-- complete memory process	
	MemoryN(id__, const_CleanSM_voltage) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_CleanSM(id__, const_CleanSM_voltage)))) \ MemoryVariablesHideSet))
	
	-- optimised memory
	-- Sets of named elements identified according to transition conditions:
	-- {}
	-- Summary of all identified named elements:
	-- {
	-- clean_var
	-- }
	
	-- Allocation plan:
	-- 0:{}
	--	=> {
	--		TID_CleanSM_t0,
	--		TID_CleanSM_t2,
	--		TID_CleanSM_t1}
	
	-- Memory transition processes
	MemoryTransitions_opt_0(id__) =
	(
		let
			Update = Current(id__)
			Current(id__)
			 	   = 
			 	   internal__!TID_CleanSM_t0 -> Update
			 	   []
			 	   clean__!TID_CleanSM_t2.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==false)} -> Update
			 	   []
			 	   clean__!TID_CleanSM_t1.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==true)} -> Update
		within
			Update
	)
	
	-- Memory cell processes
	Memory_opt_clean_var(x__) = ( 
		get_clean_var!x__ -> Memory_opt_clean_var(x__)
		[]
		set_clean_var?x__ -> Memory_opt_clean_var(x__)
	)
	
	-- Composition of memory, StateMachine and Memory transition processes
	
	MemorySTM_opt(id__,
			    const_CleanSM_voltage) =
		sbisim(	
		  dbisim(
		    sbisim(dbisim(sbisim(Memory_opt_clean_var(true)
		          	[| {|set_clean_var,get_clean_var|} |] 
		          	STM_core(id__,
		          			    const_CleanSM_voltage)
		          	)\ {|set_clean_var,get_clean_var|}
		          )
		      	  [| {|clean__.TID_CleanSM_t2,clean__.TID_CleanSM_t1,internal__.TID_CleanSM_t0|} |]
		      	  MemoryTransitions_opt_0(id__)
		      	  )\{|internal__.TID_CleanSM_t0|})
		      )
	
	-- main process
	
	MachineMemorySyncSet = Union({
		union(
			union(
				{|get_clean_var,set_clean_var|},
				{||}
			)
				
			,
			{|internal__.TID_CleanSM_t0,
			clean__.TID_CleanSM_t1,
			clean__.TID_CleanSM_t2|}
		)
	})
	
	MachineMemoryHidingSet = Union({
		union(
			{|get_clean_var,set_clean_var|},
			{||}
		)
	})
	
	MachineInternalEvents = {|
		internal__
	|}
	
	AUX(id__,
			    const_CleanSM_voltage) = (
		(
			STM(id__,
					    const_CleanSM_voltage)
				[|MachineMemorySyncSet|]
			sbisim(diamond(MemoryN(id__, const_CleanSM_voltage)))
		)[[
			clean__.x____ <- clean
			| x____ <- TIDS
		]]
		\MachineMemoryHidingSet
	)
	[|{|terminate|}|>SKIP\MachineInternalEvents
	
	
	STM_core(id__,
			    const_CleanSM_voltage) = 
		sbisim(diamond(STM(id__,
				    const_CleanSM_voltage)))
		
	AUX_opt(id__,
			    const_CleanSM_voltage) = 
		(MemorySTM_opt(id__,
				    const_CleanSM_voltage)
		)[[
			clean__.x____ <- clean
			| x____ <- TIDS
		]]
		[|{|terminate|}|>SKIP\MachineInternalEvents

	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
			
	FVS__(id__,
			    const_CleanSM_voltage) = AUX_opt(id__,
			    const_CleanSM_voltage)
	Dunopt__(id__,
			    const_CleanSM_voltage) = AUX(id__,
			    const_CleanSM_voltage) \ internal_events
	D__(id__,
			    const_CleanSM_voltage) = AUX_opt(id__,
			    const_CleanSM_voltage) \ internal_events
	O__(id__,
			    const_CleanSM_voltage) = sbisim(diamond(D__(id__,
			    const_CleanSM_voltage)))
	VS__(id__,
			    const_CleanSM_voltage) = ShowV(FVS__(id__,
			    const_CleanSM_voltage))
	VS_O__(id__,
			    const_CleanSM_voltage) = sbisim(diamond(VS__(id__,
			    const_CleanSM_voltage)))
	HEXT__(id__,
			    const_CleanSM_voltage) = O__(id__,
			    const_CleanSM_voltage) [|shared_variable_events|] SKIP	
endmodule
