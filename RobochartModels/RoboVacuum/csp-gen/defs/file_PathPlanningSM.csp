
--
-- RoboChart generator version 3.0.0.202112100958
-- Automatically generated on 08-03-2022 18:58:35
--
-- Iterated compression status: true
-- Assertions compression status: true
--




module PathPlanningSM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_Go_up|
	              NID_Go_right|
	              NID_Go_down|
	              NID_Go_right_again|
	              NID_Return|
	              NID_Dock|
	              NID_Sleep|
	              NID_Check_end|
	              NID_Check_battery|
	              NID_Resume
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_cycles, set_cycles, setL_cycles, setR_cycles: core_int
	channel get_u, set_u, setL_u, setR_u: core_int
	channel get_d, set_d, setL_d, setR_d: core_int
	channel get_b, set_b, setL_b, setR_b: core_int
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel move_forward__: NIDS.InOut
	channel move_forward: InOut
	channel turn__: NIDS.InOut.Direction
	channel turn: InOut.Direction
	channel stop__: NIDS.InOut
	channel stop: InOut
	channel ultrasonic__: NIDS.InOut.core_int
	channel ultrasonic: InOut.core_int
	channel battery_level__: NIDS.InOut.core_int
	channel battery_level: InOut.core_int
	channel charging__: NIDS.InOut
	channel charging: InOut
	channel clean__: NIDS.InOut.core_boolean
	channel clean: InOut.core_boolean
	channel displacement__: NIDS.InOut.core_int
	channel displacement: InOut.core_int
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	Go_up::enter,
	Go_right::enter,
	Go_down::enter,
	Go_right_again::enter,
	Return::enter,
	Dock::enter,
	Sleep::enter,
	Check_end::enter,
	Check_battery::enter,
	Resume::enter
	|}
	
	enteredSS = 	{|
	Go_up::entered,
	Go_right::entered,
	Go_down::entered,
	Go_right_again::entered,
	Return::entered,
	Dock::entered,
	Sleep::entered,
	Check_end::entered,
	Check_battery::entered,
	Resume::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	move_forward,
		turn,
		stop,
		ultrasonic,
		battery_level,
		charging,
		clean,
		displacement
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Go_up
	module Go_up
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(move_forward.out -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(move_forward.out -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Go_right
	module Go_right
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(turn.out!Direction_right -> SKIP));true&(share__choice(move_forward.out -> SKIP));true&(share__choice(displacement.out!0 -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(turn.out!Direction_right -> SKIP));true&(share__choice(move_forward.out -> SKIP));true&(share__choice(displacement.out!0 -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Go_down
	module Go_down
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(turn.out!Direction_right -> SKIP));true&(share__choice(move_forward.out -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(turn.out!Direction_right -> SKIP));true&(share__choice(move_forward.out -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Go_right_again
	module Go_right_again
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Return
	module Return
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(turn.out!Direction_left -> SKIP));true&(share__choice(turn.out!Direction_left -> SKIP));true&(share__choice(move_forward.out -> SKIP));true&(share__choice(clean.out!false -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(turn.out!Direction_left -> SKIP));true&(share__choice(turn.out!Direction_left -> SKIP));true&(share__choice(move_forward.out -> SKIP));true&(share__choice(clean.out!false -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Dock
	module Dock
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(turn.out!Direction_left -> SKIP));true&(share__choice(move_forward.out -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(turn.out!Direction_left -> SKIP));true&(share__choice(move_forward.out -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Sleep
	module Sleep
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(stop.out -> SKIP));SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(stop.out -> SKIP));SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Check_end
	module Check_end
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Check_battery
	module Check_battery
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Resume
	module Resume
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(turn.out!Direction_right -> SKIP));true&(share__choice(move_forward.out -> SKIP));true&(share__choice(displacement.out!0 -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&(share__choice(turn.out!Direction_left -> SKIP)) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(turn.out!Direction_right -> SKIP));true&(share__choice(move_forward.out -> SKIP));true&(share__choice(displacement.out!0 -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&(share__choice(turn.out!Direction_left -> SKIP)) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance))
	)\sharedVarHide
	
	STM_VS_O(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = ((let
		Trans = share__choice(get_d?d -> get_u?u -> get_cycles?cycles -> get_b?b -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_cycles!0 -> SKIP))) ; Resume::enter -> SKIP))))
			 	 [] dbisim((ultrasonic__!NID_Go_up.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> share__choice(set_u!u -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Go_right::enter -> SKIP)))
			 	 [] dbisim((displacement__!NID_Go_right.in?d:{d|d <- core_int, (d>=const_PathPlanningSM_nozzle)} -> share__choice(set_d!d -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Go_down::enter -> SKIP)))
			 	 [] dbisim((ultrasonic__!NID_Go_down.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> share__choice(set_u!u -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(turn.out!Direction_left -> SKIP));true&(share__choice(move_forward.out -> SKIP));true&(share__choice(displacement.out!0 -> SKIP)) ; Go_right_again::enter -> SKIP)))
			 	 [] dbisim((ultrasonic__!NID_Go_right_again.in?u:{u|u <- core_int, (u<const_PathPlanningSM_cliff)} -> share__choice(set_u!u -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Check_end::enter -> SKIP)))
			 	 [] dbisim((ultrasonic__!NID_Go_right_again.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> share__choice(set_u!u -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_cycles!0 -> SKIP))) ; Return::enter -> SKIP)))
			 	 [] dbisim((displacement__!NID_Check_end.in?d:{d|d <- core_int, (d<const_PathPlanningSM_nozzle)} -> share__choice(set_d!d -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Go_right_again::enter -> SKIP)))
			 	 [] dbisim((displacement__!NID_Check_end.in?d:{d|d <- core_int, (d>=const_PathPlanningSM_nozzle)} -> share__choice(set_d!d -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_cycles?cycles -> true & (share__choice(set_cycles!Plus(cycles, 1, core_int) -> SKIP)))) ; Check_battery::enter -> SKIP)))
			 	 [] dbisim((battery_level__!NID_Check_battery.in?b:{b|b <- core_int, (b>const_PathPlanningSM_battery_low)} -> share__choice(set_b!b -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(turn.out!Direction_left -> SKIP)) ; Go_up::enter -> SKIP)))
			 	 [] dbisim((battery_level__!NID_Check_battery.in?b:{b|b <- core_int, (b<=const_PathPlanningSM_battery_low)} -> share__choice(set_b!b -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Return::enter -> SKIP)))
			 	 [] dbisim((ultrasonic__!NID_Return.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> share__choice(set_u!u -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Dock::enter -> SKIP)))
			 	 [] dbisim((true)&(charging__!NID_Dock.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Sleep::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_Sleep -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(turn.out!Direction_left -> SKIP));true&(share__choice(turn.out!Direction_left -> SKIP));true&(share__choice(move_forward.out -> SKIP)) ; Resume::enter -> SKIP)))
			 	 [] dbisim((displacement__!NID_Resume.in?d:{d|d <- core_int, (d>=Mult(Mult(cycles, 2, core_int), const_PathPlanningSM_nozzle, core_int))} -> share__choice(set_d!d -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(clean.out!true -> SKIP)) ; Go_up::enter -> SKIP)))
			 	 [] dbisim((ultrasonic__!NID_Go_right.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> share__choice(set_u!u -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Go_down::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Go_up::enter,
				Go_right::enter,
				Go_down::enter,
				Go_right_again::enter,
				Return::enter,
				Dock::enter,
				Sleep::enter,
				Check_end::enter,
				Check_battery::enter,
				Resume::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,ultrasonic__.NID_Go_up.in,displacement__.NID_Go_right.in,ultrasonic__.NID_Go_down.in,ultrasonic__.NID_Go_right_again.in,ultrasonic__.NID_Go_right_again.in,displacement__.NID_Check_end.in,displacement__.NID_Check_end.in,battery_level__.NID_Check_battery.in,battery_level__.NID_Check_battery.in,ultrasonic__.NID_Return.in,charging__.NID_Dock.in,internal__.NID_Sleep,displacement__.NID_Resume.in,ultrasonic__.NID_Go_right.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Go_up::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Go_right::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Go_down::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Go_right_again::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Return::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Dock::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Sleep::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Check_end::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Check_battery::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Resume::D__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					 )
					 [[Go_up::interrupt <- x__ | x__ <- {|interrupt,ultrasonic__.NID_Go_up.in|}]]
					 [[Go_right::interrupt <- x__ | x__ <- {|interrupt,displacement__.NID_Go_right.in,ultrasonic__.NID_Go_right.in|}]]
					 [[Go_down::interrupt <- x__ | x__ <- {|interrupt,ultrasonic__.NID_Go_down.in|}]]
					 [[Go_right_again::interrupt <- x__ | x__ <- {|interrupt,ultrasonic__.NID_Go_right_again.in,ultrasonic__.NID_Go_right_again.in|}]]
					 [[Return::interrupt <- x__ | x__ <- {|interrupt,ultrasonic__.NID_Return.in|}]]
					 [[Dock::interrupt <- x__ | x__ <- {|interrupt,charging__.NID_Dock.in|}]]
					 [[Sleep::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Sleep|}]]
					 [[Check_end::interrupt <- x__ | x__ <- {|interrupt,displacement__.NID_Check_end.in,displacement__.NID_Check_end.in|}]]
					 [[Check_battery::interrupt <- x__ | x__ <- {|interrupt,battery_level__.NID_Check_battery.in,battery_level__.NID_Check_battery.in|}]]
					 [[Resume::interrupt <- x__ | x__ <- {|interrupt,displacement__.NID_Resume.in|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_d,setR_u,setR_b |} ]] 
					  [[set_d <- setL_d,set_u <- setL_u,set_cycles <- setL_cycles,set_b <- setL_b]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_d
					 			,setL_u
					 			,setL_cycles
					 			,setL_b
					 			,setR_d
					 			 			,setR_u
					 			 			,setR_b
					 			|}) |]
					 ((i0::enter -> Transitions(id__,
					 		    const_PathPlanningSM_cliff,
					 		    const_PathPlanningSM_nozzle,
					 		    const_PathPlanningSM_battery_low,
					 		    const_PathPlanningSM_sleep_time,
					 		    const_PathPlanningSM_acc_distance))
					  [[ share__ <- x__ | x__ <- {| share__,setL_d,setL_u,setL_cycles,setL_b |} ]]
					  [[set_d <- setR_d,set_u <- setR_u,set_b <- setR_b]]
					 )
					)[[setL_d <- set_d,setL_u <- set_u,setL_cycles <- set_cycles,setL_b <- set_b]]
					 [[setR_d <- set_d,setR_u <- set_u,setR_b <- set_b]]
					)
				)
				 \ hideSet)
				[[
					move_forward__.x____ <- move_forward,
					turn__.x____ <- turn,
					stop__.x____ <- stop,
					ultrasonic__.x____ <- ultrasonic,
					battery_level__.x____ <- battery_level,
					charging__.x____ <- charging,
					clean__.x____ <- clean,
					displacement__.x____ <- displacement
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = 
		dbisim((MachineBody(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance)\ enteredSS)
		)
	
	IteratedBehaviour(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = 
		dbisim((MachineBody(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance)\ enteredSS)
		)
	
	Stateful(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = 
		((
			(Behaviour(id__,
					    const_PathPlanningSM_cliff,
					    const_PathPlanningSM_nozzle,
					    const_PathPlanningSM_battery_low,
					    const_PathPlanningSM_sleep_time,
					    const_PathPlanningSM_acc_distance) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_PathPlanningSM_cliff,
					    const_PathPlanningSM_nozzle,
					    const_PathPlanningSM_battery_low,
					    const_PathPlanningSM_sleep_time,
					    const_PathPlanningSM_acc_distance))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[| {|get_b,set_b,terminate|} |]
										Memory_b(0)
									)\{|get_b,set_b|}
								)
								[| {|get_d,set_d,terminate|} |]
								Memory_d(0)
							)\{|get_d,set_d|}
						)
						[| {|get_u,set_u,terminate|} |]
						Memory_u(0)
					)\{|get_u,set_u|}
				)
				[| {|get_cycles,set_cycles,terminate|} |]
				Memory_cycles(0)
			)\{|get_cycles,set_cycles|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Go_up::enter,
				Go_right::enter,
				Go_down::enter,
				Go_right_again::enter,
				Return::enter,
				Dock::enter,
				Sleep::enter,
				Check_end::enter,
				Check_battery::enter,
				Resume::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,ultrasonic__.NID_Go_up.in,displacement__.NID_Go_right.in,ultrasonic__.NID_Go_down.in,ultrasonic__.NID_Go_right_again.in,ultrasonic__.NID_Go_right_again.in,displacement__.NID_Check_end.in,displacement__.NID_Check_end.in,battery_level__.NID_Check_battery.in,battery_level__.NID_Check_battery.in,ultrasonic__.NID_Return.in,charging__.NID_Dock.in,internal__.NID_Sleep,displacement__.NID_Resume.in,ultrasonic__.NID_Go_right.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Go_up::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Go_right::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Go_down::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Go_right_again::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Return::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Dock::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Sleep::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Check_end::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Check_battery::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   [| { share__, terminate } |] (
					   Resume::VS_O__(id__,
					   		    const_PathPlanningSM_cliff,
					   		    const_PathPlanningSM_nozzle,
					   		    const_PathPlanningSM_battery_low,
					   		    const_PathPlanningSM_sleep_time,
					   		    const_PathPlanningSM_acc_distance)
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					   )
					 )
					 [[Go_up::interrupt <- x__ | x__ <- {|interrupt,ultrasonic__.NID_Go_up.in|}]]
					 [[Go_right::interrupt <- x__ | x__ <- {|interrupt,displacement__.NID_Go_right.in,ultrasonic__.NID_Go_right.in|}]]
					 [[Go_down::interrupt <- x__ | x__ <- {|interrupt,ultrasonic__.NID_Go_down.in|}]]
					 [[Go_right_again::interrupt <- x__ | x__ <- {|interrupt,ultrasonic__.NID_Go_right_again.in,ultrasonic__.NID_Go_right_again.in|}]]
					 [[Return::interrupt <- x__ | x__ <- {|interrupt,ultrasonic__.NID_Return.in|}]]
					 [[Dock::interrupt <- x__ | x__ <- {|interrupt,charging__.NID_Dock.in|}]]
					 [[Sleep::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Sleep|}]]
					 [[Check_end::interrupt <- x__ | x__ <- {|interrupt,displacement__.NID_Check_end.in,displacement__.NID_Check_end.in|}]]
					 [[Check_battery::interrupt <- x__ | x__ <- {|interrupt,battery_level__.NID_Check_battery.in,battery_level__.NID_Check_battery.in|}]]
					 [[Resume::interrupt <- x__ | x__ <- {|interrupt,displacement__.NID_Resume.in|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_d,setR_u,setR_b |} ]] 
					  [[set_d <- setL_d,set_u <- setL_u,set_cycles <- setL_cycles,set_b <- setL_b]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_d
					 			,setL_u
					 			,setL_cycles
					 			,setL_b
					 			,setR_d
					 			 			,setR_u
					 			 			,setR_b
					 			|}) |]
					 ((i0::enter -> Transitions(id__,
					 		    const_PathPlanningSM_cliff,
					 		    const_PathPlanningSM_nozzle,
					 		    const_PathPlanningSM_battery_low,
					 		    const_PathPlanningSM_sleep_time,
					 		    const_PathPlanningSM_acc_distance))
					  [[ share__ <- x__ | x__ <- {| share__,setL_d,setL_u,setL_cycles,setL_b |} ]]
					  [[set_d <- setR_d,set_u <- setR_u,set_b <- setR_b]]
					 )
					)[[setL_d <- set_d,setL_u <- set_u,setL_cycles <- set_cycles,setL_b <- set_b]]
					 [[setR_d <- set_d,setR_u <- set_u,setR_b <- set_b]]
					)
				)
				 \ hideSet)
				[[
					move_forward__.x____ <- move_forward,
					turn__.x____ <- turn,
					stop__.x____ <- stop,
					ultrasonic__.x____ <- ultrasonic,
					battery_level__.x____ <- battery_level,
					charging__.x____ <- charging,
					clean__.x____ <- clean,
					displacement__.x____ <- displacement
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = 
		dbisim((MachineBody_VS_O(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance))
		)
	
	IteratedBehaviour_VS_O(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = 
		dbisim((MachineBody_VS_O(id__,
				    const_PathPlanningSM_cliff,
				    const_PathPlanningSM_nozzle,
				    const_PathPlanningSM_battery_low,
				    const_PathPlanningSM_sleep_time,
				    const_PathPlanningSM_acc_distance))
		)
	
	Stateful_VS_O(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = 
		dbisim((
			(Behaviour_VS_O(id__,
					    const_PathPlanningSM_cliff,
					    const_PathPlanningSM_nozzle,
					    const_PathPlanningSM_battery_low,
					    const_PathPlanningSM_sleep_time,
					    const_PathPlanningSM_acc_distance) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_PathPlanningSM_cliff,
					    const_PathPlanningSM_nozzle,
					    const_PathPlanningSM_battery_low,
					    const_PathPlanningSM_sleep_time,
					    const_PathPlanningSM_acc_distance))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour_VS_O(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[| {|get_b,set_b,terminate|} |]
										Memory_b(0)
									)\{|get_b,set_b|}
								)
								[| {|get_d,set_d,terminate|} |]
								Memory_d(0)
							)\{|get_d,set_d|}
						)
						[| {|get_u,set_u,terminate|} |]
						Memory_u(0)
					)\{|get_u,set_u|}
				)
				[| {|get_cycles,set_cycles,terminate|} |]
				Memory_cycles(0)
			)\{|get_cycles,set_cycles|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_cycles(cycles) =
		get_cycles!cycles -> Memory_cycles(cycles)
		[]
		set_cycles?x__ -> Memory_cycles(x__)
		[]
		terminate -> SKIP
	Memory_u(u) =
		get_u!u -> Memory_u(u)
		[]
		set_u?x__ -> Memory_u(x__)
		[]
		terminate -> SKIP
	Memory_d(d) =
		get_d!d -> Memory_d(d)
		[]
		set_d?x__ -> Memory_d(x__)
		[]
		terminate -> SKIP
	Memory_b(b) =
		get_b!b -> Memory_b(b)
		[]
		set_b?x__ -> Memory_b(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = Memory_cycles(0)
	[| { terminate } |] (
	Memory_u(0)
	[| { terminate } |] (
	Memory_d(0)
	[| { terminate } |] (
	Memory_b(0)
	)
	)
	)
	
	getsetLocalChannels = {|get_cycles,set_cycles,get_u,set_u,get_d,set_d,get_b,set_b|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = STM_VS_O(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance)
	
	D__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = STM(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) \ internal_events
	O__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = sbisim(diamond(D__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance)))
	VS__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = FVS__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance)
	VS_O__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = sbisim(diamond(FVS__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance)))
	HEXT__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = O__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) [|shared_variable_events|] SKIP
	HUP__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = O__(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__,
			    const_PathPlanningSM_cliff,
			    const_PathPlanningSM_nozzle,
			    const_PathPlanningSM_battery_low,
			    const_PathPlanningSM_sleep_time,
			    const_PathPlanningSM_acc_distance) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule


