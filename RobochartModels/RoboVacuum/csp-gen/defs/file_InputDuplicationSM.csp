


module InputDuplicationSM
exports
	-- flow channels
	channel internal__ : TIDS
	channel enteredV, enterV, exitV, exitedV : SIDS
	channel enter, entered: SIDS.SIDS
	channel exit,exited: SIDS.SIDS
	channel terminate
	
	-- variable channels
	channel get_x, set_x: TripleAxis
			
	-- shared variable channels
	
	-- local variable channels for defined operations that are required by the state machine
	
	-- declaring state machine events
	channel input__: TIDS.InOut.TripleAxis
	channel input: InOut.TripleAxis
	channel output1__: TIDS.InOut.TripleAxis
	channel output1: InOut.TripleAxis
	channel output2__: TIDS.InOut.TripleAxis
	channel output2: InOut.TripleAxis
	
	-- declaring call and ret events for undefined operations
	
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machien module.
	
	
	-- definition of functions used to expose flow channels
	ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
					   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
					   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
					   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
						 
	ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	
	-- declaring identifiers of state and final states
	datatype SIDS = SID_InputDuplicationSM
	              | SID_InputDuplicationSM_wait_input
	              | SID_InputDuplicationSM_send_output
	
	-- declaring identifiers of transitions
	datatype TIDS = NULLTRANSITION__
	              | TID_InputDuplicationSM_t0
	              | TID_InputDuplicationSM_t1
	              | TID_InputDuplicationSM_t2
	
	-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
	
	ITIDS = {
		TID_InputDuplicationSM_t1,	TID_InputDuplicationSM_t2
	}
	
	int_int = {|
		input__.TID_InputDuplicationSM_t1,
		output1__.TID_InputDuplicationSM_t1,
		output2__.TID_InputDuplicationSM_t1,
		internal__.TID_InputDuplicationSM_t1,
		input__.TID_InputDuplicationSM_t2,
		output1__.TID_InputDuplicationSM_t2,
		output2__.TID_InputDuplicationSM_t2,
		internal__.TID_InputDuplicationSM_t2
	|}
		
	
	internal_events = {|enter,entered,exit,exited|}
	shared_variable_events = {|
	|}
			
	
	-- declaring all states
	CS_InputDuplicationSM_wait_input_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output},
		y____ <- {SID_InputDuplicationSM_wait_input}
	|}
	
	
	InputDuplicationSM_wait_input_triggers = {|
		input__.TID_InputDuplicationSM_t1,
		internal__.TID_InputDuplicationSM_t2
	|}
	
	State_InputDuplicationSM_wait_input(id__) = let
		T_InputDuplicationSM_t1(id__) = input__!TID_InputDuplicationSM_t1.in?x -> set_x!x ->  (exit.SID_InputDuplicationSM_wait_input.SID_InputDuplicationSM_wait_input -> SKIP;
							SKIP;exited.SID_InputDuplicationSM_wait_input.SID_InputDuplicationSM_wait_input -> SKIP;
							enter!SID_InputDuplicationSM_wait_input!SID_InputDuplicationSM_send_output -> entered!SID_InputDuplicationSM_wait_input!SID_InputDuplicationSM_send_output ->
							State_InputDuplicationSM_wait_input(id__)
		)
		State_InputDuplicationSM_wait_input_execute(id__,o____) = SKIP; 
			entered!o____!SID_InputDuplicationSM_wait_input ->
			(SKIP; STOP /\ (
				T_InputDuplicationSM_t1(id__)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2}) -> exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
						SKIP;
						exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
						State_InputDuplicationSM_wait_input(id__)
				[] input__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
						SKIP;
						exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
						State_InputDuplicationSM_wait_input(id__)
				[] output1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
						SKIP;
						exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
						State_InputDuplicationSM_wait_input(id__)
				[] output2__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
						SKIP;
						exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
						State_InputDuplicationSM_wait_input(id__)
			))
	within
		enter?x____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (State_InputDuplicationSM_wait_input_execute(id__,x____))
	
	CS_InputDuplicationSM_send_output_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output},
		y____ <- {SID_InputDuplicationSM_send_output}
	|}
	
	
	InputDuplicationSM_send_output_triggers = {|
		input__.TID_InputDuplicationSM_t1,
		internal__.TID_InputDuplicationSM_t2
	|}
	
	State_InputDuplicationSM_send_output(id__) = let
		T_InputDuplicationSM_t2(id__) = internal__!TID_InputDuplicationSM_t2 ->  exit.SID_InputDuplicationSM_send_output.SID_InputDuplicationSM_send_output -> SKIP;
							SKIP;exited.SID_InputDuplicationSM_send_output.SID_InputDuplicationSM_send_output -> SKIP;
							get_x?x -> true&(output1.out!x -> SKIP);get_x?x -> true&(output2.out!x -> SKIP);enter!SID_InputDuplicationSM_send_output!SID_InputDuplicationSM_wait_input -> entered!SID_InputDuplicationSM_send_output!SID_InputDuplicationSM_wait_input ->
							State_InputDuplicationSM_send_output(id__)
		State_InputDuplicationSM_send_output_execute(id__,o____) = SKIP; 
			entered!o____!SID_InputDuplicationSM_send_output ->
			(SKIP; STOP /\ (
				T_InputDuplicationSM_t2(id__)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2}) -> exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
						SKIP;
						exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
						State_InputDuplicationSM_send_output(id__)
				[] input__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
						SKIP;
						exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
						State_InputDuplicationSM_send_output(id__)
				[] output1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
						SKIP;
						exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
						State_InputDuplicationSM_send_output(id__)
				[] output2__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
						SKIP;
						exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
						State_InputDuplicationSM_send_output(id__)
			))
	within
		enter?x____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (State_InputDuplicationSM_send_output_execute(id__,x____))
	
	
	I_InputDuplicationSM_i0(id__) = let
		T_InputDuplicationSM_t0(id__) = internal__!TID_InputDuplicationSM_t0 -> enter!SID_InputDuplicationSM!SID_InputDuplicationSM_wait_input -> entered!SID_InputDuplicationSM!SID_InputDuplicationSM_wait_input ->
		SKIP
	within
		T_InputDuplicationSM_t0(id__)
	
	
	State_InputDuplicationSM_wait_input_R(id__) = 
		State_InputDuplicationSM_wait_input(id__)
			[|diff(int_int,InputDuplicationSM_wait_input_triggers)|]
		SKIP
			 		
	State_InputDuplicationSM_send_output_R(id__) = 
		State_InputDuplicationSM_send_output(id__)
			[|diff(int_int,InputDuplicationSM_send_output_triggers)|]
		SKIP
			 		
		
	STM(id__) = (
		I_InputDuplicationSM_i0(id__)
			[|
				{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
					x____ <- diff(SIDS,{SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output}),
					y____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output}
			|}|]
		(
			State_InputDuplicationSM_wait_input_R(id__)
				[|inter(CS_InputDuplicationSM_wait_input_sync,CS_InputDuplicationSM_send_output_sync)|]
			State_InputDuplicationSM_send_output_R(id__)
		)
	)
	
	-- optimized memory process
	channel getV_x: TripleAxis
	
	-- individual memory processes
	Memory_x(x) = (
		get_x!x -> Memory_x(x)
		[]
		getV_x!x -> Memory_x(x)
		[]
		set_x?x__ -> Memory_x(x__)
		[]
		input__!TID_InputDuplicationSM_t1.in?x -> Memory_x(x)
	)
	
	-- processes that read variables and offer transitions
	MemoryTransitions(id__, x) = 		
	(internal__!TID_InputDuplicationSM_t0 -> SKIP
	[]
	input__!TID_InputDuplicationSM_t1.in?x -> SKIP
	[]
	internal__!TID_InputDuplicationSM_t2 -> SKIP[]
	set_x?x__ -> SKIP)
	
	MemoryTransitions_InputDuplicationSM(id__) = (getV_x?x ->
	MemoryTransitions(id__, x)			
	); MemoryTransitions_InputDuplicationSM(id__)
			
	
	-- synchronisation, hiding and process sets 
	MemoryVariablesProcesses_InputDuplicationSM = Union(
		{
			{
				(Memory_x((0,0,0)),{|getV_x,get_x,input__.TID_InputDuplicationSM_t1,set_x|})
			}
		}
	)
	
	MemoryVariablesSyncSet = Union({
		{|
			getV_x,
			input__.TID_InputDuplicationSM_t1,
			set_x
		|}	
	})
	
	MemoryVariablesHideSet = Union({
		{|
			getV_x
		|}
	})
	
	-- combined individual memory processes
	MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_InputDuplicationSM @ P
	
	-- complete memory process	
	MemoryN(id__) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_InputDuplicationSM(id__)))) \ MemoryVariablesHideSet))
	
	-- optimised memory
	-- Sets of named elements identified according to transition conditions:
	-- {}
	-- Summary of all identified named elements:
	-- {
	-- x
	-- }
	
	-- Allocation plan:
	-- 0:{}
	--	=> {
	--		TID_InputDuplicationSM_t1,
	--		TID_InputDuplicationSM_t0,
	--		TID_InputDuplicationSM_t2}
	
	-- Memory transition processes
	MemoryTransitions_opt_0(id__) =
	(
		let
			Update = Current(id__)
			Current(id__)
			 	   = 
			 	   input__!TID_InputDuplicationSM_t1.in?x -> Update
			 	   []
			 	   internal__!TID_InputDuplicationSM_t0 -> Update
			 	   []
			 	   internal__!TID_InputDuplicationSM_t2 -> Update
		within
			Update
	)
	
	-- Memory cell processes
	Memory_opt_x(x__) = ( 
		get_x!x__ -> Memory_opt_x(x__)
		[]
		set_x?x__ -> Memory_opt_x(x__)
	)
	
	-- Composition of memory, StateMachine and Memory transition processes
	
	MemorySTM_opt(id__) =
		sbisim(	
		  dbisim(
		    sbisim(dbisim(sbisim(Memory_opt_x((0,0,0))
		          	[| {|get_x,set_x|} |] 
		          	STM_core(id__)
		          	)\ {|get_x,set_x|}
		          )
		      	  [| {|internal__.TID_InputDuplicationSM_t0,internal__.TID_InputDuplicationSM_t2,input__.TID_InputDuplicationSM_t1|} |]
		      	  MemoryTransitions_opt_0(id__)
		      	  )\{||})
		      )
	
	-- main process
	
	MachineMemorySyncSet = Union({
		union(
			union(
				{|get_x,set_x|},
				{||}
			)
				
			,
			{|internal__.TID_InputDuplicationSM_t0,
			input__.TID_InputDuplicationSM_t1,
			internal__.TID_InputDuplicationSM_t2|}
		)
	})
	
	MachineMemoryHidingSet = Union({
		union(
			{|get_x,set_x|},
			{||}
		)
	})
	
	MachineInternalEvents = {|
		internal__
	|}
	
	AUX(id__) = (
		(
			STM(id__)
				[|MachineMemorySyncSet|]
			sbisim(diamond(MemoryN(id__)))
		)[[
			input__.x____ <- input,
			output1__.x____ <- output1,
			output2__.x____ <- output2
			| x____ <- TIDS
		]]
		\MachineMemoryHidingSet
	)
	[|{|terminate|}|>SKIP\MachineInternalEvents
	
	
	STM_core(id__) = 
		sbisim(diamond(STM(id__)))
		
	AUX_opt(id__) = 
		(MemorySTM_opt(id__)
		)[[
			input__.x____ <- input,
			output1__.x____ <- output1,
			output2__.x____ <- output2
			| x____ <- TIDS
		]]
		[|{|terminate|}|>SKIP\MachineInternalEvents

	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
			
	FVS__(id__) = AUX_opt(id__)
	Dunopt__(id__) = AUX(id__) \ internal_events
	D__(id__) = AUX_opt(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = ShowV(FVS__(id__))
	VS_O__(id__) = sbisim(diamond(VS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP	
endmodule


