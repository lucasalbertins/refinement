
--
-- RoboChart generator version 3.0.0.202112100958
-- Automatically generated on 08-03-2022 18:58:32
--
-- Iterated compression status: true
-- Assertions compression status: true
--

module PID
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_Update|
	              NID_Wait_target|
	              NID_Wait_actual|
	              NID_Reset
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_prior_error, set_prior_error, setL_prior_error, setR_prior_error: core_int
	channel get_integral, set_integral, setL_integral, setR_integral: core_int
	channel get_error, set_error, setL_error, setR_error: core_int
	channel get_derivative, set_derivative, setL_derivative, setR_derivative: core_int
	channel get_output, set_output, setL_output, setR_output: core_int
	channel get_target_value, set_target_value, setL_target_value, setR_target_value: core_int
	channel get_actual_value, set_actual_value, setL_actual_value, setR_actual_value: core_int
	channel get_old_target, set_old_target, setL_old_target, setR_old_target: core_int
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel err_output__: NIDS.InOut.core_int
	channel err_output: InOut.core_int
	channel actual__: NIDS.InOut.core_int
	channel actual: InOut.core_int
	channel target__: NIDS.InOut.core_int
	channel target: InOut.core_int
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	Update::enter,
	Wait_target::enter,
	Wait_actual::enter,
	Reset::enter
	|}
	
	enteredSS = 	{|
	Update::entered,
	Wait_target::entered,
	Wait_actual::entered,
	Reset::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	err_output,
		actual,
		target
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step) = D__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Update
	module Update
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(share__choice(get_target_value?target_value -> share__choice(get_actual_value?actual_value -> true & (share__choice(set_error!Minus(actual_value, target_value, core_int) -> SKIP)))));share__choice(share__choice(get_integral?integral -> share__choice(get_error?error -> true & (share__choice(set_integral!Plus(integral, (Mult(error, const_PID_step, core_int)), core_int) -> SKIP)))));share__choice(share__choice(get_error?error -> share__choice(get_prior_error?prior_error -> const_PID_step != 0 & (share__choice(set_derivative!floor(Div((Minus(error, prior_error, core_int)), const_PID_step, core_real)) -> SKIP)))));share__choice(share__choice(get_error?error -> share__choice(get_integral?integral -> share__choice(get_derivative?derivative -> true & (share__choice(set_output!Plus(Plus(Mult(const_PID_kp, error, core_int), Mult(const_PID_ki, integral, core_int), core_int), Mult(const_PID_kd, derivative, core_int), core_int) -> SKIP))))));share__choice(share__choice(get_error?error -> true & (share__choice(set_prior_error!error -> SKIP))));share__choice(get_output?output -> true&(share__choice(err_output.out!output -> SKIP)));share__choice(share__choice(get_target_value?target_value -> true & (share__choice(set_old_target!target_value -> SKIP)))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(share__choice(get_target_value?target_value -> share__choice(get_actual_value?actual_value -> true & (share__choice(set_error!Minus(actual_value, target_value, core_int) -> SKIP)))));share__choice(share__choice(get_integral?integral -> share__choice(get_error?error -> true & (share__choice(set_integral!Plus(integral, (Mult(error, const_PID_step, core_int)), core_int) -> SKIP)))));share__choice(share__choice(get_error?error -> share__choice(get_prior_error?prior_error -> const_PID_step != 0 & (share__choice(set_derivative!floor(Div((Minus(error, prior_error, core_int)), const_PID_step, core_real)) -> SKIP)))));share__choice(share__choice(get_error?error -> share__choice(get_integral?integral -> share__choice(get_derivative?derivative -> true & (share__choice(set_output!Plus(Plus(Mult(const_PID_kp, error, core_int), Mult(const_PID_ki, integral, core_int), core_int), Mult(const_PID_kd, derivative, core_int), core_int) -> SKIP))))));share__choice(share__choice(get_error?error -> true & (share__choice(set_prior_error!error -> SKIP))));share__choice(get_output?output -> true&(share__choice(err_output.out!output -> SKIP)));share__choice(share__choice(get_target_value?target_value -> true & (share__choice(set_old_target!target_value -> SKIP)))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Wait_target
	module Wait_target
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Wait_actual
	module Wait_actual
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Reset
	module Reset
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(true & (share__choice(set_prior_error!0 -> SKIP)));share__choice(true & (share__choice(set_integral!0 -> SKIP))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(true & (share__choice(set_prior_error!0 -> SKIP)));share__choice(true & (share__choice(set_integral!0 -> SKIP))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__,
						    const_PID_kp,
						    const_PID_ki,
						    const_PID_kd,
						    const_PID_step) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step))
	)\sharedVarHide
	
	STM_VS_O(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__,
						    const_PID_kp,
						    const_PID_ki,
						    const_PID_kd,
						    const_PID_step) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = ((let
		Trans = share__choice(get_target_value?target_value -> get_old_target?old_target -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_prior_error!0 -> SKIP)));share__choice(true & (share__choice(set_integral!0 -> SKIP))) ; Wait_target::enter -> SKIP))))
			 	 [] dbisim((true)&(internal__!NID_Update -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait_target::enter -> SKIP)))
			 	 [] dbisim((target__!NID_Wait_target.in?target_value:{target_value|target_value <- core_int, (target_value==old_target)} -> share__choice(set_target_value!target_value -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait_actual::enter -> SKIP)))
			 	 [] dbisim((true)&(actual__!NID_Wait_actual.in?actual_value:{actual_value|actual_value <- core_int, true} -> share__choice(set_actual_value!actual_value -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Update::enter -> SKIP)))
			 	 [] dbisim((target__!NID_Wait_target.in?target_value:{target_value|target_value <- core_int, (target_value!=old_target)} -> share__choice(set_target_value!target_value -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Reset::enter -> SKIP)))
			 	 [] dbisim((true)&(actual__!NID_Reset.in?actual_value:{actual_value|actual_value <- core_int, true} -> share__choice(set_actual_value!actual_value -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Update::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Update::enter,
				Wait_target::enter,
				Wait_actual::enter,
				Reset::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,internal__.NID_Update,target__.NID_Wait_target.in,actual__.NID_Wait_actual.in,target__.NID_Wait_target.in,actual__.NID_Reset.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__,
					   		    const_PID_kp,
					   		    const_PID_ki,
					   		    const_PID_kd,
					   		    const_PID_step)
					   [| { share__, terminate } |] (
					   Update::D__(id__,
					   		    const_PID_kp,
					   		    const_PID_ki,
					   		    const_PID_kd,
					   		    const_PID_step)
					   [| { share__, terminate } |] (
					   Wait_target::D__(id__,
					   		    const_PID_kp,
					   		    const_PID_ki,
					   		    const_PID_kd,
					   		    const_PID_step)
					   [| { share__, terminate } |] (
					   Wait_actual::D__(id__,
					   		    const_PID_kp,
					   		    const_PID_ki,
					   		    const_PID_kd,
					   		    const_PID_step)
					   [| { share__, terminate } |] (
					   Reset::D__(id__,
					   		    const_PID_kp,
					   		    const_PID_ki,
					   		    const_PID_kd,
					   		    const_PID_step)
					   )
					   )
					   )
					   )
					 )
					 [[Update::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Update|}]]
					 [[Wait_target::interrupt <- x__ | x__ <- {|interrupt,target__.NID_Wait_target.in,target__.NID_Wait_target.in|}]]
					 [[Wait_actual::interrupt <- x__ | x__ <- {|interrupt,actual__.NID_Wait_actual.in|}]]
					 [[Reset::interrupt <- x__ | x__ <- {|interrupt,actual__.NID_Reset.in|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_target_value,setR_actual_value |} ]] 
					  [[set_target_value <- setL_target_value,set_old_target <- setL_old_target]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_target_value
					 			,setL_old_target
					 			,setR_target_value
					 			 			,setR_actual_value
					 			|}) |]
					 ((i0::enter -> Transitions(id__,
					 		    const_PID_kp,
					 		    const_PID_ki,
					 		    const_PID_kd,
					 		    const_PID_step))
					  [[ share__ <- x__ | x__ <- {| share__,setL_target_value,setL_old_target |} ]]
					  [[set_target_value <- setR_target_value,set_actual_value <- setR_actual_value]]
					 )
					)[[setL_target_value <- set_target_value,setL_old_target <- set_old_target]]
					 [[setR_target_value <- set_target_value,setR_actual_value <- set_actual_value]]
					)
				)
				 \ hideSet)
				[[
					err_output__.x____ <- err_output,
					actual__.x____ <- actual,
					target__.x____ <- target
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = 
		dbisim((MachineBody(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step)\ enteredSS)
		)
	
	IteratedBehaviour(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = 
		dbisim((MachineBody(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step)\ enteredSS)
		)
	
	Stateful(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = 
		((
			(Behaviour(id__,
					    const_PID_kp,
					    const_PID_ki,
					    const_PID_kd,
					    const_PID_step) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_PID_kp,
					    const_PID_ki,
					    const_PID_kd,
					    const_PID_step))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																dbisim(
																	sbisim(
																		Behaviour(id__,
																				    const_PID_kp,
																				    const_PID_ki,
																				    const_PID_kd,
																				    const_PID_step)
																		[| {|get_old_target,set_old_target,terminate|} |]
																		Memory_old_target(0)
																	)\{|get_old_target,set_old_target|}
																)
																[| {|get_actual_value,set_actual_value,terminate|} |]
																Memory_actual_value(0)
															)\{|get_actual_value,set_actual_value|}
														)
														[| {|get_target_value,set_target_value,terminate|} |]
														Memory_target_value(0)
													)\{|get_target_value,set_target_value|}
												)
												[| {|get_output,set_output,terminate|} |]
												Memory_output(0)
											)\{|get_output,set_output|}
										)
										[| {|get_derivative,set_derivative,terminate|} |]
										Memory_derivative(0)
									)\{|get_derivative,set_derivative|}
								)
								[| {|get_error,set_error,terminate|} |]
								Memory_error(0)
							)\{|get_error,set_error|}
						)
						[| {|get_integral,set_integral,terminate|} |]
						Memory_integral(0)
					)\{|get_integral,set_integral|}
				)
				[| {|get_prior_error,set_prior_error,terminate|} |]
				Memory_prior_error(0)
			)\{|get_prior_error,set_prior_error|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Update::enter,
				Wait_target::enter,
				Wait_actual::enter,
				Reset::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,internal__.NID_Update,target__.NID_Wait_target.in,actual__.NID_Wait_actual.in,target__.NID_Wait_target.in,actual__.NID_Reset.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__,
					   		    const_PID_kp,
					   		    const_PID_ki,
					   		    const_PID_kd,
					   		    const_PID_step)
					   [| { share__, terminate } |] (
					   Update::VS_O__(id__,
					   		    const_PID_kp,
					   		    const_PID_ki,
					   		    const_PID_kd,
					   		    const_PID_step)
					   [| { share__, terminate } |] (
					   Wait_target::VS_O__(id__,
					   		    const_PID_kp,
					   		    const_PID_ki,
					   		    const_PID_kd,
					   		    const_PID_step)
					   [| { share__, terminate } |] (
					   Wait_actual::VS_O__(id__,
					   		    const_PID_kp,
					   		    const_PID_ki,
					   		    const_PID_kd,
					   		    const_PID_step)
					   [| { share__, terminate } |] (
					   Reset::VS_O__(id__,
					   		    const_PID_kp,
					   		    const_PID_ki,
					   		    const_PID_kd,
					   		    const_PID_step)
					   )
					   )
					   )
					   )
					 )
					 [[Update::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Update|}]]
					 [[Wait_target::interrupt <- x__ | x__ <- {|interrupt,target__.NID_Wait_target.in,target__.NID_Wait_target.in|}]]
					 [[Wait_actual::interrupt <- x__ | x__ <- {|interrupt,actual__.NID_Wait_actual.in|}]]
					 [[Reset::interrupt <- x__ | x__ <- {|interrupt,actual__.NID_Reset.in|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_target_value,setR_actual_value |} ]] 
					  [[set_target_value <- setL_target_value,set_old_target <- setL_old_target]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_target_value
					 			,setL_old_target
					 			,setR_target_value
					 			 			,setR_actual_value
					 			|}) |]
					 ((i0::enter -> Transitions(id__,
					 		    const_PID_kp,
					 		    const_PID_ki,
					 		    const_PID_kd,
					 		    const_PID_step))
					  [[ share__ <- x__ | x__ <- {| share__,setL_target_value,setL_old_target |} ]]
					  [[set_target_value <- setR_target_value,set_actual_value <- setR_actual_value]]
					 )
					)[[setL_target_value <- set_target_value,setL_old_target <- set_old_target]]
					 [[setR_target_value <- set_target_value,setR_actual_value <- set_actual_value]]
					)
				)
				 \ hideSet)
				[[
					err_output__.x____ <- err_output,
					actual__.x____ <- actual,
					target__.x____ <- target
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = 
		dbisim((MachineBody_VS_O(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step))
		)
	
	IteratedBehaviour_VS_O(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = 
		dbisim((MachineBody_VS_O(id__,
				    const_PID_kp,
				    const_PID_ki,
				    const_PID_kd,
				    const_PID_step))
		)
	
	Stateful_VS_O(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = 
		dbisim((
			(Behaviour_VS_O(id__,
					    const_PID_kp,
					    const_PID_ki,
					    const_PID_kd,
					    const_PID_step) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_PID_kp,
					    const_PID_ki,
					    const_PID_kd,
					    const_PID_step))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																dbisim(
																	sbisim(
																		Behaviour_VS_O(id__,
																				    const_PID_kp,
																				    const_PID_ki,
																				    const_PID_kd,
																				    const_PID_step)
																		[| {|get_old_target,set_old_target,terminate|} |]
																		Memory_old_target(0)
																	)\{|get_old_target,set_old_target|}
																)
																[| {|get_actual_value,set_actual_value,terminate|} |]
																Memory_actual_value(0)
															)\{|get_actual_value,set_actual_value|}
														)
														[| {|get_target_value,set_target_value,terminate|} |]
														Memory_target_value(0)
													)\{|get_target_value,set_target_value|}
												)
												[| {|get_output,set_output,terminate|} |]
												Memory_output(0)
											)\{|get_output,set_output|}
										)
										[| {|get_derivative,set_derivative,terminate|} |]
										Memory_derivative(0)
									)\{|get_derivative,set_derivative|}
								)
								[| {|get_error,set_error,terminate|} |]
								Memory_error(0)
							)\{|get_error,set_error|}
						)
						[| {|get_integral,set_integral,terminate|} |]
						Memory_integral(0)
					)\{|get_integral,set_integral|}
				)
				[| {|get_prior_error,set_prior_error,terminate|} |]
				Memory_prior_error(0)
			)\{|get_prior_error,set_prior_error|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_prior_error(prior_error) =
		get_prior_error!prior_error -> Memory_prior_error(prior_error)
		[]
		set_prior_error?x__ -> Memory_prior_error(x__)
		[]
		terminate -> SKIP
	Memory_integral(integral) =
		get_integral!integral -> Memory_integral(integral)
		[]
		set_integral?x__ -> Memory_integral(x__)
		[]
		terminate -> SKIP
	Memory_error(error) =
		get_error!error -> Memory_error(error)
		[]
		set_error?x__ -> Memory_error(x__)
		[]
		terminate -> SKIP
	Memory_derivative(derivative) =
		get_derivative!derivative -> Memory_derivative(derivative)
		[]
		set_derivative?x__ -> Memory_derivative(x__)
		[]
		terminate -> SKIP
	Memory_output(output) =
		get_output!output -> Memory_output(output)
		[]
		set_output?x__ -> Memory_output(x__)
		[]
		terminate -> SKIP
	Memory_target_value(target_value) =
		get_target_value!target_value -> Memory_target_value(target_value)
		[]
		set_target_value?x__ -> Memory_target_value(x__)
		[]
		terminate -> SKIP
	Memory_actual_value(actual_value) =
		get_actual_value!actual_value -> Memory_actual_value(actual_value)
		[]
		set_actual_value?x__ -> Memory_actual_value(x__)
		[]
		terminate -> SKIP
	Memory_old_target(old_target) =
		get_old_target!old_target -> Memory_old_target(old_target)
		[]
		set_old_target?x__ -> Memory_old_target(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = Memory_prior_error(0)
	[| { terminate } |] (
	Memory_integral(0)
	[| { terminate } |] (
	Memory_error(0)
	[| { terminate } |] (
	Memory_derivative(0)
	[| { terminate } |] (
	Memory_output(0)
	[| { terminate } |] (
	Memory_target_value(0)
	[| { terminate } |] (
	Memory_actual_value(0)
	[| { terminate } |] (
	Memory_old_target(0)
	)
	)
	)
	)
	)
	)
	)
	
	getsetLocalChannels = {|get_prior_error,set_prior_error,get_integral,set_integral,get_error,set_error,get_derivative,set_derivative,get_output,set_output,get_target_value,set_target_value,get_actual_value,set_actual_value,get_old_target,set_old_target|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = STM_VS_O(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step)
	
	D__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = STM(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) \ internal_events
	O__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = sbisim(diamond(D__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step)))
	VS__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = FVS__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step)
	VS_O__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = sbisim(diamond(FVS__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step)))
	HEXT__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = O__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) [|shared_variable_events|] SKIP
	HUP__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = O__(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__,
			    const_PID_kp,
			    const_PID_ki,
			    const_PID_kd,
			    const_PID_step) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule
