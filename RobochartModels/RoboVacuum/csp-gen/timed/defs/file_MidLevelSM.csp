
--
-- RoboChart generator version 3.0.0.202112100958
-- Automatically generated on 08-03-2022 18:58:31
--
-- Iterated compression status: true
-- Assertions compression status: true
--




module MidLevelSM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_Go_up|
	              NID_Turn_right|
	              NID_Go_down|
	              NID_Turn_left|
	              NID_Go_side|
	              NID_Stop
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_lspeed, set_lspeed, setL_lspeed, setR_lspeed: core_int
	channel get_rspeed, set_rspeed, setL_rspeed, setR_rspeed: core_int
	channel get_angle, set_angle, setL_angle, setR_angle: core_int
	channel get_speed_adj, set_speed_adj, setL_speed_adj, setR_speed_adj: core_int
	channel get_angle_adj, set_angle_adj, setL_angle_adj, setR_angle_adj: core_int
	channel get_direction, set_direction, setL_direction, setR_direction: Direction
	channel get_orientation, set_orientation, setL_orientation, setR_orientation: Orientation
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel target_speed__: NIDS.InOut.core_int
	channel target_speed: InOut.core_int
	channel target_angle__: NIDS.InOut.core_int
	channel target_angle: InOut.core_int
	channel speed_adjustment__: NIDS.InOut.core_int
	channel speed_adjustment: InOut.core_int
	channel angle_adjustment__: NIDS.InOut.core_int
	channel angle_adjustment: InOut.core_int
	channel move_forward__: NIDS.InOut
	channel move_forward: InOut
	channel turn__: NIDS.InOut.Direction
	channel turn: InOut.Direction
	channel stop__: NIDS.InOut
	channel stop: InOut
	
	-- Declaring call and ret events for undefined operations
	channel output_left_motorCall: core_int
	channel output_right_motorCall: core_int
	
	enterSS = {|
	i0::enter,
	Go_up::enter,
	Turn_right::enter,
	Go_down::enter,
	Turn_left::enter,
	Go_side::enter,
	Stop::enter
	|}
	
	enteredSS = 	{|
	Go_up::entered,
	Turn_right::entered,
	Go_down::entered,
	Turn_left::entered,
	Go_side::entered,
	Stop::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	target_speed,
		target_angle,
		speed_adjustment,
		angle_adjustment,
		move_forward,
		turn,
		stop
	,	output_left_motorCall,
		output_right_motorCall
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_Go_up : core_clock_type 
	channel get_CLID_Go_down : core_clock_type 
	channel get_CLID_Turn_left : core_clock_type 
	channel get_CLID_Stop : core_clock_type 
	channel get_CLID_Go_side : core_clock_type 
	channel get_CLID_Turn_right : core_clock_type 
	--channel increment__
	
	CLID_Go_up_clock_type(id__,
			          const_MidLevelSM_step,
			          const_MidLevelSM_climb_speed,
			          const_MidLevelSM_descent_speed,
			          const_MidLevelSM_side_speed,
			          const_MidLevelSM_forward_angle,
			          const_MidLevelSM_left_angle,
			          const_MidLevelSM_right_angle,
			          const_MidLevelSM_turn_speed,
			          const_MidLevelSM_movesp,
			          const_MidLevelSM_stopsp) = 
		let
			max = (clock_type_max(Union({
	{},
	({const_MidLevelSM_step|step <- core_int})
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Go_down_clock_type(id__,
			          const_MidLevelSM_step,
			          const_MidLevelSM_climb_speed,
			          const_MidLevelSM_descent_speed,
			          const_MidLevelSM_side_speed,
			          const_MidLevelSM_forward_angle,
			          const_MidLevelSM_left_angle,
			          const_MidLevelSM_right_angle,
			          const_MidLevelSM_turn_speed,
			          const_MidLevelSM_movesp,
			          const_MidLevelSM_stopsp) = 
		let
			max = (clock_type_max(Union({
	{},
	({const_MidLevelSM_step|step <- core_int})
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Turn_left_clock_type(id__,
			          const_MidLevelSM_step,
			          const_MidLevelSM_climb_speed,
			          const_MidLevelSM_descent_speed,
			          const_MidLevelSM_side_speed,
			          const_MidLevelSM_forward_angle,
			          const_MidLevelSM_left_angle,
			          const_MidLevelSM_right_angle,
			          const_MidLevelSM_turn_speed,
			          const_MidLevelSM_movesp,
			          const_MidLevelSM_stopsp) = 
		let
			max = (clock_type_max(Union({
	{},
	({const_MidLevelSM_step|step <- core_int}),
	({const_MidLevelSM_step|step <- core_int})
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Stop_clock_type(id__,
			          const_MidLevelSM_step,
			          const_MidLevelSM_climb_speed,
			          const_MidLevelSM_descent_speed,
			          const_MidLevelSM_side_speed,
			          const_MidLevelSM_forward_angle,
			          const_MidLevelSM_left_angle,
			          const_MidLevelSM_right_angle,
			          const_MidLevelSM_turn_speed,
			          const_MidLevelSM_movesp,
			          const_MidLevelSM_stopsp) = 
		let
			max = (clock_type_max(Union({
	{},
	({const_MidLevelSM_step|step <- core_int})
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Go_side_clock_type(id__,
			          const_MidLevelSM_step,
			          const_MidLevelSM_climb_speed,
			          const_MidLevelSM_descent_speed,
			          const_MidLevelSM_side_speed,
			          const_MidLevelSM_forward_angle,
			          const_MidLevelSM_left_angle,
			          const_MidLevelSM_right_angle,
			          const_MidLevelSM_turn_speed,
			          const_MidLevelSM_movesp,
			          const_MidLevelSM_stopsp) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Turn_right_clock_type(id__,
			          const_MidLevelSM_step,
			          const_MidLevelSM_climb_speed,
			          const_MidLevelSM_descent_speed,
			          const_MidLevelSM_side_speed,
			          const_MidLevelSM_forward_angle,
			          const_MidLevelSM_left_angle,
			          const_MidLevelSM_right_angle,
			          const_MidLevelSM_turn_speed,
			          const_MidLevelSM_movesp,
			          const_MidLevelSM_stopsp) = 
		let
			max = (clock_type_max(Union({
	{},
	({const_MidLevelSM_step|step <- core_int})
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = D__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Go_up
		module Go_up
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_climb_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_forward_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_climb_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_forward_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Turn_right
		module Turn_right
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_turn_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_right_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_turn_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_right_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Go_down
		module Go_down
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_descent_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_forward_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_descent_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_forward_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Turn_left
		module Turn_left
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_turn_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_left_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_turn_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_left_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Go_side
		module Go_side
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_side_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_forward_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_side_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_forward_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Stop
		module Stop
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_turn_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_forward_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(target_speed.out!const_MidLevelSM_turn_speed -> SKIP));true&(share__choice(speed_adjustment.in?speed_adj -> (SStop /\ set_speed_adj!speed_adj -> SKIP)));true&(share__choice(target_angle.out!const_MidLevelSM_forward_angle -> SKIP));true&(share__choice(angle_adjustment.in?angle_adj -> (SStop /\ set_angle_adj!angle_adj -> SKIP)));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_angle_adj?angle_adj -> share__choice(get_lspeed?lspeed -> true & (share__choice(set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(share__choice(get_speed_adj?speed_adj -> share__choice(get_rspeed?rspeed -> share__choice(get_angle_adj?angle_adj -> true & (share__choice(set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP))))));share__choice(get_lspeed?lspeed -> true&CALL__output_left_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								lspeed
							));share__choice(get_rspeed?rspeed -> true&CALL__output_right_motor(
								id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp,
								rspeed
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		CALL__output_left_motor(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp,
					param_x) = EDeadline(output_left_motorCall.param_x,0)
		CALL__output_right_motor(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp,
					param_x) = EDeadline(output_right_motorCall.param_x,0)
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_MidLevelSM_step,
					    const_MidLevelSM_climb_speed,
					    const_MidLevelSM_descent_speed,
					    const_MidLevelSM_side_speed,
					    const_MidLevelSM_forward_angle,
					    const_MidLevelSM_left_angle,
					    const_MidLevelSM_right_angle,
					    const_MidLevelSM_turn_speed,
					    const_MidLevelSM_movesp,
					    const_MidLevelSM_stopsp))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		STM_VS_O(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__,
							    const_MidLevelSM_step,
							    const_MidLevelSM_climb_speed,
							    const_MidLevelSM_descent_speed,
							    const_MidLevelSM_side_speed,
							    const_MidLevelSM_forward_angle,
							    const_MidLevelSM_left_angle,
							    const_MidLevelSM_right_angle,
							    const_MidLevelSM_turn_speed,
							    const_MidLevelSM_movesp,
							    const_MidLevelSM_stopsp) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_MidLevelSM_step,
					    const_MidLevelSM_climb_speed,
					    const_MidLevelSM_descent_speed,
					    const_MidLevelSM_side_speed,
					    const_MidLevelSM_forward_angle,
					    const_MidLevelSM_left_angle,
					    const_MidLevelSM_right_angle,
					    const_MidLevelSM_turn_speed,
					    const_MidLevelSM_movesp,
					    const_MidLevelSM_stopsp))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		-- Transitions
		Transitions(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = ((let
			Trans = share__choice(get_direction?direction -> get_orientation?orientation -> get_CLID_Go_up?Go_up:CLID_Go_up_clock_type(id__,
					          const_MidLevelSM_step,
					          const_MidLevelSM_climb_speed,
					          const_MidLevelSM_descent_speed,
					          const_MidLevelSM_side_speed,
					          const_MidLevelSM_forward_angle,
					          const_MidLevelSM_left_angle,
					          const_MidLevelSM_right_angle,
					          const_MidLevelSM_turn_speed,
					          const_MidLevelSM_movesp,
					          const_MidLevelSM_stopsp) -> get_CLID_Turn_left?Turn_left:CLID_Turn_left_clock_type(id__,
					          const_MidLevelSM_step,
					          const_MidLevelSM_climb_speed,
					          const_MidLevelSM_descent_speed,
					          const_MidLevelSM_side_speed,
					          const_MidLevelSM_forward_angle,
					          const_MidLevelSM_left_angle,
					          const_MidLevelSM_right_angle,
					          const_MidLevelSM_turn_speed,
					          const_MidLevelSM_movesp,
					          const_MidLevelSM_stopsp) -> get_CLID_Go_down?Go_down:CLID_Go_down_clock_type(id__,
					          const_MidLevelSM_step,
					          const_MidLevelSM_climb_speed,
					          const_MidLevelSM_descent_speed,
					          const_MidLevelSM_side_speed,
					          const_MidLevelSM_forward_angle,
					          const_MidLevelSM_left_angle,
					          const_MidLevelSM_right_angle,
					          const_MidLevelSM_turn_speed,
					          const_MidLevelSM_movesp,
					          const_MidLevelSM_stopsp) -> get_CLID_Stop?Stop:CLID_Stop_clock_type(id__,
					          const_MidLevelSM_step,
					          const_MidLevelSM_climb_speed,
					          const_MidLevelSM_descent_speed,
					          const_MidLevelSM_side_speed,
					          const_MidLevelSM_forward_angle,
					          const_MidLevelSM_left_angle,
					          const_MidLevelSM_right_angle,
					          const_MidLevelSM_turn_speed,
					          const_MidLevelSM_movesp,
					          const_MidLevelSM_stopsp) -> get_CLID_Turn_right?Turn_right:CLID_Turn_right_clock_type(id__,
					          const_MidLevelSM_step,
					          const_MidLevelSM_climb_speed,
					          const_MidLevelSM_descent_speed,
					          const_MidLevelSM_side_speed,
					          const_MidLevelSM_forward_angle,
					          const_MidLevelSM_left_angle,
					          const_MidLevelSM_right_angle,
					          const_MidLevelSM_turn_speed,
					          const_MidLevelSM_movesp,
					          const_MidLevelSM_stopsp) -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((turn__!NID_Go_up.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_right(orientation) -> SKIP))));share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_stopsp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_stopsp -> SKIP))) ; Turn_right::enter -> SKIP)))
				 [] dbisim((((orientation==Orientation_left) or (orientation==Orientation_right)))&(move_forward__!NID_Turn_right.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_movesp -> SKIP)));share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_movesp -> SKIP))) ; Go_side::enter -> SKIP)))
				 [] dbisim((turn__!NID_Go_up.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_left(orientation) -> SKIP))));share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_stopsp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_stopsp -> SKIP))) ; Turn_left::enter -> SKIP)))
				 [] dbisim((turn__!NID_Turn_right.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_right(orientation) -> SKIP)))) ; Turn_right::enter -> SKIP)))
				 [] dbisim((((orientation==Orientation_left) or (orientation==Orientation_right)))&(move_forward__!NID_Turn_left.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_movesp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_movesp -> SKIP))) ; Go_side::enter -> SKIP)))
				 [] dbisim((turn__!NID_Turn_left.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_left(orientation) -> SKIP)))) ; Turn_left::enter -> SKIP)))
				 [] dbisim(((orientation==Orientation_up))&(move_forward__!NID_Turn_right.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_movesp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_movesp -> SKIP))) ; Go_up::enter -> SKIP)))
				 [] dbisim(((orientation==Orientation_down))&(move_forward__!NID_Turn_right.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_movesp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_movesp -> SKIP))) ; Go_down::enter -> SKIP)))
				 [] dbisim(((orientation==Orientation_up))&(move_forward__!NID_Turn_left.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_movesp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_movesp -> SKIP))) ; Go_up::enter -> SKIP)))
				 [] dbisim(((orientation==Orientation_down))&(move_forward__!NID_Turn_left.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_movesp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_movesp -> SKIP))) ; Go_down::enter -> SKIP)))
				 [] dbisim((turn__!NID_Go_side.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_left(orientation) -> SKIP))));share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_stopsp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_stopsp -> SKIP))) ; Turn_left::enter -> SKIP)))
				 [] dbisim((turn__!NID_Go_side.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_right(orientation) -> SKIP))));share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_stopsp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_stopsp -> SKIP))) ; Turn_right::enter -> SKIP)))
				 [] dbisim((turn__!NID_Go_down.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_left(orientation) -> SKIP))));share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_stopsp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_stopsp -> SKIP))) ; Turn_left::enter -> SKIP)))
				 [] dbisim((turn__!NID_Go_down.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_right(orientation) -> SKIP))));share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_stopsp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_stopsp -> SKIP))) ; Turn_right::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_orientation!Orientation_up -> SKIP)));share__choice(true & (share__choice(set_lspeed!0 -> SKIP)));share__choice(true & (share__choice(set_rspeed!0 -> SKIP))) ; Go_up::enter -> SKIP))))
				 [] dbisim((turn__!NID_Turn_right.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_left(orientation) -> SKIP)))) ; Turn_left::enter -> SKIP)))
				 [] dbisim((turn__!NID_Turn_left.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_right(orientation) -> SKIP)))) ; Turn_right::enter -> SKIP)))
				 [] dbisim((true)&(stop__!NID_Go_up.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_stopsp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_stopsp -> SKIP))) ; Stop::enter -> SKIP)))
				 [] dbisim((true)&(stop__!NID_Go_down.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_stopsp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_stopsp -> SKIP))) ; Stop::enter -> SKIP)))
				 [] dbisim((true)&(stop__!NID_Go_side.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lspeed!const_MidLevelSM_stopsp -> SKIP)));share__choice(true & (share__choice(set_rspeed!const_MidLevelSM_stopsp -> SKIP))) ; Stop::enter -> SKIP)))
				 [] dbisim((turn__!NID_Stop.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_right(orientation) -> SKIP)))) ; Turn_right::enter -> SKIP)))
				 [] dbisim((turn__!NID_Stop.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> share__choice(set_direction!direction -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_orientation?orientation -> true & (share__choice(set_orientation!turn_left(orientation) -> SKIP)))) ; Turn_left::enter -> SKIP)))
				 [] dbisim(((Turn_right>=const_MidLevelSM_step))&(internal__!NID_Turn_right -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Turn_right::enter -> SKIP)))
				 [] dbisim(((Turn_left>=const_MidLevelSM_step))&(internal__!NID_Go_side -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Go_side::enter -> SKIP)))
				 [] dbisim(((Go_up>=const_MidLevelSM_step))&(internal__!NID_Go_up -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Go_up::enter -> SKIP)))
				 [] dbisim(((Turn_left>=const_MidLevelSM_step))&(internal__!NID_Turn_left -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Turn_left::enter -> SKIP)))
				 [] dbisim(((Stop>=const_MidLevelSM_step))&(internal__!NID_Stop -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Stop::enter -> SKIP)))
				 [] dbisim(((Go_down>=const_MidLevelSM_step))&(internal__!NID_Go_down -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Go_down::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					Go_up::enter,
					Turn_right::enter,
					Go_down::enter,
					Turn_left::enter,
					Go_side::enter,
					Stop::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|turn__.NID_Go_up.in,move_forward__.NID_Turn_right.in,turn__.NID_Go_up.in,turn__.NID_Turn_right.in,move_forward__.NID_Turn_left.in,turn__.NID_Turn_left.in,move_forward__.NID_Turn_right.in,move_forward__.NID_Turn_right.in,move_forward__.NID_Turn_left.in,move_forward__.NID_Turn_left.in,turn__.NID_Go_side.in,turn__.NID_Go_side.in,turn__.NID_Go_down.in,turn__.NID_Go_down.in,internal__.NID_i0,turn__.NID_Turn_right.in,turn__.NID_Turn_left.in,stop__.NID_Go_up.in,stop__.NID_Go_down.in,stop__.NID_Go_side.in,turn__.NID_Stop.in,turn__.NID_Stop.in,internal__.NID_Turn_right,internal__.NID_Go_side,internal__.NID_Go_up,internal__.NID_Turn_left,internal__.NID_Stop,internal__.NID_Go_down|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Go_up::D__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Turn_right::D__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Go_down::D__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Turn_left::D__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Go_side::D__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Stop::D__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   )
						   )
						   )
						   )
						   )
						   )
						 )
						 [[Go_up::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Go_up.in,turn__.NID_Go_up.in,stop__.NID_Go_up.in,internal__.NID_Go_up|}]]
						 [[Turn_right::interrupt <- x__ | x__ <- {|interrupt,move_forward__.NID_Turn_right.in,turn__.NID_Turn_right.in,move_forward__.NID_Turn_right.in,move_forward__.NID_Turn_right.in,turn__.NID_Turn_right.in,internal__.NID_Turn_right|}]]
						 [[Go_down::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Go_down.in,turn__.NID_Go_down.in,stop__.NID_Go_down.in,internal__.NID_Go_down|}]]
						 [[Turn_left::interrupt <- x__ | x__ <- {|interrupt,move_forward__.NID_Turn_left.in,turn__.NID_Turn_left.in,move_forward__.NID_Turn_left.in,move_forward__.NID_Turn_left.in,turn__.NID_Turn_left.in,internal__.NID_Turn_left|}]]
						 [[Go_side::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Go_side.in,turn__.NID_Go_side.in,stop__.NID_Go_side.in,internal__.NID_Go_side|}]]
						 [[Stop::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Stop.in,turn__.NID_Stop.in,internal__.NID_Stop|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_direction |} ]] 
						  [[set_direction <- setL_direction,set_orientation <- setL_orientation,Go_up::entered <- Go_up::enteredL,Turn_left::entered <- Turn_left::enteredL,Go_down::entered <- Go_down::enteredL,Stop::entered <- Stop::enteredL,Turn_right::entered <- Turn_right::enteredL]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_direction
						 			,setL_orientation
						 			,Go_up::enteredL
						 			,Turn_left::enteredL
						 			,Go_down::enteredL
						 			,Stop::enteredL
						 			,Turn_right::enteredL
						 			,setR_direction
						 			|}) |]
						 ((i0::enter -> Transitions(id__,
						 		    const_MidLevelSM_step,
						 		    const_MidLevelSM_climb_speed,
						 		    const_MidLevelSM_descent_speed,
						 		    const_MidLevelSM_side_speed,
						 		    const_MidLevelSM_forward_angle,
						 		    const_MidLevelSM_left_angle,
						 		    const_MidLevelSM_right_angle,
						 		    const_MidLevelSM_turn_speed,
						 		    const_MidLevelSM_movesp,
						 		    const_MidLevelSM_stopsp))
						  [[ share__ <- x__ | x__ <- {| share__,setL_direction,setL_orientation,Go_up::enteredL,Turn_left::enteredL,Go_down::enteredL,Stop::enteredL,Turn_right::enteredL |} ]]
						  [[set_direction <- setR_direction]]
						 )
						)[[setL_direction <- set_direction,setL_orientation <- set_orientation,Go_up::enteredL <- Go_up::entered,Turn_left::enteredL <- Turn_left::entered,Go_down::enteredL <- Go_down::entered,Stop::enteredL <- Stop::entered,Turn_right::enteredL <- Turn_right::entered]]
						 [[setR_direction <- set_direction]]
						)
					)
					 \ hideSet)
					[[
						target_speed__.x____ <- target_speed,
						target_angle__.x____ <- target_angle,
						speed_adjustment__.x____ <- speed_adjustment,
						angle_adjustment__.x____ <- angle_adjustment,
						move_forward__.x____ <- move_forward,
						turn__.x____ <- turn,
						stop__.x____ <- stop
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_MidLevelSM_step,
				 		          const_MidLevelSM_climb_speed,
				 		          const_MidLevelSM_descent_speed,
				 		          const_MidLevelSM_side_speed,
				 		          const_MidLevelSM_forward_angle,
				 		          const_MidLevelSM_left_angle,
				 		          const_MidLevelSM_right_angle,
				 		          const_MidLevelSM_turn_speed,
				 		          const_MidLevelSM_movesp,
				 		          const_MidLevelSM_stopsp)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = 
			dbisim((let
				stateClockSync = {|get_CLID_Go_up,Go_up::entered,get_CLID_Go_down,Go_down::entered,get_CLID_Turn_left,Turn_left::entered,get_CLID_Stop,Stop::entered,get_CLID_Go_side,Go_side::entered,get_CLID_Turn_right,Turn_right::entered|}
			 within
				(MachineBody(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = 
			dbisim((let
				stateClockSync = {|get_CLID_Go_up,Go_up::entered,get_CLID_Go_down,Go_down::entered,get_CLID_Turn_left,Turn_left::entered,get_CLID_Stop,Stop::entered,get_CLID_Go_side,Go_side::entered,get_CLID_Turn_right,Turn_right::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																MachineBody(id__,
																		    const_MidLevelSM_step,
																		    const_MidLevelSM_climb_speed,
																		    const_MidLevelSM_descent_speed,
																		    const_MidLevelSM_side_speed,
																		    const_MidLevelSM_forward_angle,
																		    const_MidLevelSM_left_angle,
																		    const_MidLevelSM_right_angle,
																		    const_MidLevelSM_turn_speed,
																		    const_MidLevelSM_movesp,
																		    const_MidLevelSM_stopsp)
																[| {|get_CLID_Turn_right,Turn_right::entered,terminate|} |]
																dbisim(Clock_CLID_Turn_right(id__,0,
																		          const_MidLevelSM_step,
																		          const_MidLevelSM_climb_speed,
																		          const_MidLevelSM_descent_speed,
																		          const_MidLevelSM_side_speed,
																		          const_MidLevelSM_forward_angle,
																		          const_MidLevelSM_left_angle,
																		          const_MidLevelSM_right_angle,
																		          const_MidLevelSM_turn_speed,
																		          const_MidLevelSM_movesp,
																		          const_MidLevelSM_stopsp))
															)\{|get_CLID_Turn_right|}
														)
														[| {|get_CLID_Go_side,Go_side::entered,terminate|} |]
														dbisim(Clock_CLID_Go_side(id__,0,
																          const_MidLevelSM_step,
																          const_MidLevelSM_climb_speed,
																          const_MidLevelSM_descent_speed,
																          const_MidLevelSM_side_speed,
																          const_MidLevelSM_forward_angle,
																          const_MidLevelSM_left_angle,
																          const_MidLevelSM_right_angle,
																          const_MidLevelSM_turn_speed,
																          const_MidLevelSM_movesp,
																          const_MidLevelSM_stopsp))
													)\{|get_CLID_Go_side|}
												)
												[| {|get_CLID_Stop,Stop::entered,terminate|} |]
												dbisim(Clock_CLID_Stop(id__,0,
														          const_MidLevelSM_step,
														          const_MidLevelSM_climb_speed,
														          const_MidLevelSM_descent_speed,
														          const_MidLevelSM_side_speed,
														          const_MidLevelSM_forward_angle,
														          const_MidLevelSM_left_angle,
														          const_MidLevelSM_right_angle,
														          const_MidLevelSM_turn_speed,
														          const_MidLevelSM_movesp,
														          const_MidLevelSM_stopsp))
											)\{|get_CLID_Stop|}
										)
										[| {|get_CLID_Turn_left,Turn_left::entered,terminate|} |]
										dbisim(Clock_CLID_Turn_left(id__,0,
												          const_MidLevelSM_step,
												          const_MidLevelSM_climb_speed,
												          const_MidLevelSM_descent_speed,
												          const_MidLevelSM_side_speed,
												          const_MidLevelSM_forward_angle,
												          const_MidLevelSM_left_angle,
												          const_MidLevelSM_right_angle,
												          const_MidLevelSM_turn_speed,
												          const_MidLevelSM_movesp,
												          const_MidLevelSM_stopsp))
									)\{|get_CLID_Turn_left|}
								)
								[| {|get_CLID_Go_down,Go_down::entered,terminate|} |]
								dbisim(Clock_CLID_Go_down(id__,0,
										          const_MidLevelSM_step,
										          const_MidLevelSM_climb_speed,
										          const_MidLevelSM_descent_speed,
										          const_MidLevelSM_side_speed,
										          const_MidLevelSM_forward_angle,
										          const_MidLevelSM_left_angle,
										          const_MidLevelSM_right_angle,
										          const_MidLevelSM_turn_speed,
										          const_MidLevelSM_movesp,
										          const_MidLevelSM_stopsp))
							)\{|get_CLID_Go_down|}
						)
						[| {|get_CLID_Go_up,Go_up::entered,terminate|} |]
						dbisim(Clock_CLID_Go_up(id__,0,
								          const_MidLevelSM_step,
								          const_MidLevelSM_climb_speed,
								          const_MidLevelSM_descent_speed,
								          const_MidLevelSM_side_speed,
								          const_MidLevelSM_forward_angle,
								          const_MidLevelSM_left_angle,
								          const_MidLevelSM_right_angle,
								          const_MidLevelSM_turn_speed,
								          const_MidLevelSM_movesp,
								          const_MidLevelSM_stopsp))
					)\{|get_CLID_Go_up|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = 
			((let
				getsetLocalChannels = {|get_lspeed,set_lspeed,
				get_rspeed,set_rspeed,
				get_angle,set_angle,
				get_speed_adj,set_speed_adj,
				get_angle_adj,set_angle_adj,
				get_direction,set_direction,
				get_orientation,set_orientation|}
				clockSync = {||}
			within
				(Behaviour(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_MidLevelSM_step,
				 		    const_MidLevelSM_climb_speed,
				 		    const_MidLevelSM_descent_speed,
				 		    const_MidLevelSM_side_speed,
				 		    const_MidLevelSM_forward_angle,
				 		    const_MidLevelSM_left_angle,
				 		    const_MidLevelSM_right_angle,
				 		    const_MidLevelSM_turn_speed,
				 		    const_MidLevelSM_movesp,
				 		    const_MidLevelSM_stopsp) [| {terminate} |] Clocks(id__,
				 		          const_MidLevelSM_step,
				 		          const_MidLevelSM_climb_speed,
				 		          const_MidLevelSM_descent_speed,
				 		          const_MidLevelSM_side_speed,
				 		          const_MidLevelSM_forward_angle,
				 		          const_MidLevelSM_left_angle,
				 		          const_MidLevelSM_right_angle,
				 		          const_MidLevelSM_turn_speed,
				 		          const_MidLevelSM_movesp,
				 		          const_MidLevelSM_stopsp))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															dbisim(
																sbisim(
																	IteratedBehaviour(id__,
																			    const_MidLevelSM_step,
																			    const_MidLevelSM_climb_speed,
																			    const_MidLevelSM_descent_speed,
																			    const_MidLevelSM_side_speed,
																			    const_MidLevelSM_forward_angle,
																			    const_MidLevelSM_left_angle,
																			    const_MidLevelSM_right_angle,
																			    const_MidLevelSM_turn_speed,
																			    const_MidLevelSM_movesp,
																			    const_MidLevelSM_stopsp)
																	[| {|get_orientation,set_orientation,terminate|} |]
																	Memory_orientation(Orientation_up)
																)\{|get_orientation,set_orientation|}
															)
															[| {|get_direction,set_direction,terminate|} |]
															Memory_direction(Direction_left)
														)\{|get_direction,set_direction|}
													)
													[| {|get_angle_adj,set_angle_adj,terminate|} |]
													Memory_angle_adj(0)
												)\{|get_angle_adj,set_angle_adj|}
											)
											[| {|get_speed_adj,set_speed_adj,terminate|} |]
											Memory_speed_adj(0)
										)\{|get_speed_adj,set_speed_adj|}
									)
									[| {|get_angle,set_angle,terminate|} |]
									Memory_angle(0)
								)\{|get_angle,set_angle|}
							)
							[| {|get_rspeed,set_rspeed,terminate|} |]
							Memory_rspeed(0)
						)\{|get_rspeed,set_rspeed|}
					)
					[| {|get_lspeed,set_lspeed,terminate|} |]
					Memory_lspeed(0)
				)\{|get_lspeed,set_lspeed|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					Go_up::enter,
					Turn_right::enter,
					Go_down::enter,
					Turn_left::enter,
					Go_side::enter,
					Stop::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|turn__.NID_Go_up.in,move_forward__.NID_Turn_right.in,turn__.NID_Go_up.in,turn__.NID_Turn_right.in,move_forward__.NID_Turn_left.in,turn__.NID_Turn_left.in,move_forward__.NID_Turn_right.in,move_forward__.NID_Turn_right.in,move_forward__.NID_Turn_left.in,move_forward__.NID_Turn_left.in,turn__.NID_Go_side.in,turn__.NID_Go_side.in,turn__.NID_Go_down.in,turn__.NID_Go_down.in,internal__.NID_i0,turn__.NID_Turn_right.in,turn__.NID_Turn_left.in,stop__.NID_Go_up.in,stop__.NID_Go_down.in,stop__.NID_Go_side.in,turn__.NID_Stop.in,turn__.NID_Stop.in,internal__.NID_Turn_right,internal__.NID_Go_side,internal__.NID_Go_up,internal__.NID_Turn_left,internal__.NID_Stop,internal__.NID_Go_down|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Go_up::VS_O__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Turn_right::VS_O__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Go_down::VS_O__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Turn_left::VS_O__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Go_side::VS_O__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   [| { share__, terminate } |] (
						   Stop::VS_O__(id__,
						   		    const_MidLevelSM_step,
						   		    const_MidLevelSM_climb_speed,
						   		    const_MidLevelSM_descent_speed,
						   		    const_MidLevelSM_side_speed,
						   		    const_MidLevelSM_forward_angle,
						   		    const_MidLevelSM_left_angle,
						   		    const_MidLevelSM_right_angle,
						   		    const_MidLevelSM_turn_speed,
						   		    const_MidLevelSM_movesp,
						   		    const_MidLevelSM_stopsp)
						   )
						   )
						   )
						   )
						   )
						   )
						 )
						 [[Go_up::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Go_up.in,turn__.NID_Go_up.in,stop__.NID_Go_up.in,internal__.NID_Go_up|}]]
						 [[Turn_right::interrupt <- x__ | x__ <- {|interrupt,move_forward__.NID_Turn_right.in,turn__.NID_Turn_right.in,move_forward__.NID_Turn_right.in,move_forward__.NID_Turn_right.in,turn__.NID_Turn_right.in,internal__.NID_Turn_right|}]]
						 [[Go_down::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Go_down.in,turn__.NID_Go_down.in,stop__.NID_Go_down.in,internal__.NID_Go_down|}]]
						 [[Turn_left::interrupt <- x__ | x__ <- {|interrupt,move_forward__.NID_Turn_left.in,turn__.NID_Turn_left.in,move_forward__.NID_Turn_left.in,move_forward__.NID_Turn_left.in,turn__.NID_Turn_left.in,internal__.NID_Turn_left|}]]
						 [[Go_side::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Go_side.in,turn__.NID_Go_side.in,stop__.NID_Go_side.in,internal__.NID_Go_side|}]]
						 [[Stop::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Stop.in,turn__.NID_Stop.in,internal__.NID_Stop|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_direction |} ]] 
						  [[set_direction <- setL_direction,set_orientation <- setL_orientation,Go_up::entered <- Go_up::enteredL,Turn_left::entered <- Turn_left::enteredL,Go_down::entered <- Go_down::enteredL,Stop::entered <- Stop::enteredL,Turn_right::entered <- Turn_right::enteredL]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_direction
						 			,setL_orientation
						 			,Go_up::enteredL
						 			,Turn_left::enteredL
						 			,Go_down::enteredL
						 			,Stop::enteredL
						 			,Turn_right::enteredL
						 			,setR_direction
						 			|}) |]
						 ((i0::enter -> Transitions(id__,
						 		    const_MidLevelSM_step,
						 		    const_MidLevelSM_climb_speed,
						 		    const_MidLevelSM_descent_speed,
						 		    const_MidLevelSM_side_speed,
						 		    const_MidLevelSM_forward_angle,
						 		    const_MidLevelSM_left_angle,
						 		    const_MidLevelSM_right_angle,
						 		    const_MidLevelSM_turn_speed,
						 		    const_MidLevelSM_movesp,
						 		    const_MidLevelSM_stopsp))
						  [[ share__ <- x__ | x__ <- {| share__,setL_direction,setL_orientation,Go_up::enteredL,Turn_left::enteredL,Go_down::enteredL,Stop::enteredL,Turn_right::enteredL |} ]]
						  [[set_direction <- setR_direction]]
						 )
						)[[setL_direction <- set_direction,setL_orientation <- set_orientation,Go_up::enteredL <- Go_up::entered,Turn_left::enteredL <- Turn_left::entered,Go_down::enteredL <- Go_down::entered,Stop::enteredL <- Stop::entered,Turn_right::enteredL <- Turn_right::entered]]
						 [[setR_direction <- set_direction]]
						)
					)
					 \ hideSet)
					[[
						target_speed__.x____ <- target_speed,
						target_angle__.x____ <- target_angle,
						speed_adjustment__.x____ <- speed_adjustment,
						angle_adjustment__.x____ <- angle_adjustment,
						move_forward__.x____ <- move_forward,
						turn__.x____ <- turn,
						stop__.x____ <- stop
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_MidLevelSM_step,
				 		          const_MidLevelSM_climb_speed,
				 		          const_MidLevelSM_descent_speed,
				 		          const_MidLevelSM_side_speed,
				 		          const_MidLevelSM_forward_angle,
				 		          const_MidLevelSM_left_angle,
				 		          const_MidLevelSM_right_angle,
				 		          const_MidLevelSM_turn_speed,
				 		          const_MidLevelSM_movesp,
				 		          const_MidLevelSM_stopsp)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = 
			dbisim((let
				stateClockSync = {|get_CLID_Go_up,Go_up::entered,get_CLID_Go_down,Go_down::entered,get_CLID_Turn_left,Turn_left::entered,get_CLID_Stop,Stop::entered,get_CLID_Go_side,Go_side::entered,get_CLID_Turn_right,Turn_right::entered|}
			 within
				(MachineBody_VS_O(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = 
			dbisim((let
				stateClockSync = {|get_CLID_Go_up,Go_up::entered,get_CLID_Go_down,Go_down::entered,get_CLID_Turn_left,Turn_left::entered,get_CLID_Stop,Stop::entered,get_CLID_Go_side,Go_side::entered,get_CLID_Turn_right,Turn_right::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																MachineBody_VS_O(id__,
																		    const_MidLevelSM_step,
																		    const_MidLevelSM_climb_speed,
																		    const_MidLevelSM_descent_speed,
																		    const_MidLevelSM_side_speed,
																		    const_MidLevelSM_forward_angle,
																		    const_MidLevelSM_left_angle,
																		    const_MidLevelSM_right_angle,
																		    const_MidLevelSM_turn_speed,
																		    const_MidLevelSM_movesp,
																		    const_MidLevelSM_stopsp)
																[| {|get_CLID_Turn_right,Turn_right::entered,terminate|} |]
																dbisim(Clock_CLID_Turn_right(id__,0,
																		          const_MidLevelSM_step,
																		          const_MidLevelSM_climb_speed,
																		          const_MidLevelSM_descent_speed,
																		          const_MidLevelSM_side_speed,
																		          const_MidLevelSM_forward_angle,
																		          const_MidLevelSM_left_angle,
																		          const_MidLevelSM_right_angle,
																		          const_MidLevelSM_turn_speed,
																		          const_MidLevelSM_movesp,
																		          const_MidLevelSM_stopsp))
															)\{|get_CLID_Turn_right|}
														)
														[| {|get_CLID_Go_side,Go_side::entered,terminate|} |]
														dbisim(Clock_CLID_Go_side(id__,0,
																          const_MidLevelSM_step,
																          const_MidLevelSM_climb_speed,
																          const_MidLevelSM_descent_speed,
																          const_MidLevelSM_side_speed,
																          const_MidLevelSM_forward_angle,
																          const_MidLevelSM_left_angle,
																          const_MidLevelSM_right_angle,
																          const_MidLevelSM_turn_speed,
																          const_MidLevelSM_movesp,
																          const_MidLevelSM_stopsp))
													)\{|get_CLID_Go_side|}
												)
												[| {|get_CLID_Stop,Stop::entered,terminate|} |]
												dbisim(Clock_CLID_Stop(id__,0,
														          const_MidLevelSM_step,
														          const_MidLevelSM_climb_speed,
														          const_MidLevelSM_descent_speed,
														          const_MidLevelSM_side_speed,
														          const_MidLevelSM_forward_angle,
														          const_MidLevelSM_left_angle,
														          const_MidLevelSM_right_angle,
														          const_MidLevelSM_turn_speed,
														          const_MidLevelSM_movesp,
														          const_MidLevelSM_stopsp))
											)\{|get_CLID_Stop|}
										)
										[| {|get_CLID_Turn_left,Turn_left::entered,terminate|} |]
										dbisim(Clock_CLID_Turn_left(id__,0,
												          const_MidLevelSM_step,
												          const_MidLevelSM_climb_speed,
												          const_MidLevelSM_descent_speed,
												          const_MidLevelSM_side_speed,
												          const_MidLevelSM_forward_angle,
												          const_MidLevelSM_left_angle,
												          const_MidLevelSM_right_angle,
												          const_MidLevelSM_turn_speed,
												          const_MidLevelSM_movesp,
												          const_MidLevelSM_stopsp))
									)\{|get_CLID_Turn_left|}
								)
								[| {|get_CLID_Go_down,Go_down::entered,terminate|} |]
								dbisim(Clock_CLID_Go_down(id__,0,
										          const_MidLevelSM_step,
										          const_MidLevelSM_climb_speed,
										          const_MidLevelSM_descent_speed,
										          const_MidLevelSM_side_speed,
										          const_MidLevelSM_forward_angle,
										          const_MidLevelSM_left_angle,
										          const_MidLevelSM_right_angle,
										          const_MidLevelSM_turn_speed,
										          const_MidLevelSM_movesp,
										          const_MidLevelSM_stopsp))
							)\{|get_CLID_Go_down|}
						)
						[| {|get_CLID_Go_up,Go_up::entered,terminate|} |]
						dbisim(Clock_CLID_Go_up(id__,0,
								          const_MidLevelSM_step,
								          const_MidLevelSM_climb_speed,
								          const_MidLevelSM_descent_speed,
								          const_MidLevelSM_side_speed,
								          const_MidLevelSM_forward_angle,
								          const_MidLevelSM_left_angle,
								          const_MidLevelSM_right_angle,
								          const_MidLevelSM_turn_speed,
								          const_MidLevelSM_movesp,
								          const_MidLevelSM_stopsp))
					)\{|get_CLID_Go_up|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = 
			dbisim((let
				getsetLocalChannels = {|get_lspeed,set_lspeed,
				get_rspeed,set_rspeed,
				get_angle,set_angle,
				get_speed_adj,set_speed_adj,
				get_angle_adj,set_angle_adj,
				get_direction,set_direction,
				get_orientation,set_orientation|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
						    const_MidLevelSM_step,
						    const_MidLevelSM_climb_speed,
						    const_MidLevelSM_descent_speed,
						    const_MidLevelSM_side_speed,
						    const_MidLevelSM_forward_angle,
						    const_MidLevelSM_left_angle,
						    const_MidLevelSM_right_angle,
						    const_MidLevelSM_turn_speed,
						    const_MidLevelSM_movesp,
						    const_MidLevelSM_stopsp) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_MidLevelSM_step,
				 		    const_MidLevelSM_climb_speed,
				 		    const_MidLevelSM_descent_speed,
				 		    const_MidLevelSM_side_speed,
				 		    const_MidLevelSM_forward_angle,
				 		    const_MidLevelSM_left_angle,
				 		    const_MidLevelSM_right_angle,
				 		    const_MidLevelSM_turn_speed,
				 		    const_MidLevelSM_movesp,
				 		    const_MidLevelSM_stopsp) [| {terminate} |] Clocks(id__,
				 		          const_MidLevelSM_step,
				 		          const_MidLevelSM_climb_speed,
				 		          const_MidLevelSM_descent_speed,
				 		          const_MidLevelSM_side_speed,
				 		          const_MidLevelSM_forward_angle,
				 		          const_MidLevelSM_left_angle,
				 		          const_MidLevelSM_right_angle,
				 		          const_MidLevelSM_turn_speed,
				 		          const_MidLevelSM_movesp,
				 		          const_MidLevelSM_stopsp))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															dbisim(
																sbisim(
																	IteratedBehaviour_VS_O(id__,
																			    const_MidLevelSM_step,
																			    const_MidLevelSM_climb_speed,
																			    const_MidLevelSM_descent_speed,
																			    const_MidLevelSM_side_speed,
																			    const_MidLevelSM_forward_angle,
																			    const_MidLevelSM_left_angle,
																			    const_MidLevelSM_right_angle,
																			    const_MidLevelSM_turn_speed,
																			    const_MidLevelSM_movesp,
																			    const_MidLevelSM_stopsp)
																	[| {|get_orientation,set_orientation,terminate|} |]
																	Memory_orientation(Orientation_up)
																)\{|get_orientation,set_orientation|}
															)
															[| {|get_direction,set_direction,terminate|} |]
															Memory_direction(Direction_left)
														)\{|get_direction,set_direction|}
													)
													[| {|get_angle_adj,set_angle_adj,terminate|} |]
													Memory_angle_adj(0)
												)\{|get_angle_adj,set_angle_adj|}
											)
											[| {|get_speed_adj,set_speed_adj,terminate|} |]
											Memory_speed_adj(0)
										)\{|get_speed_adj,set_speed_adj|}
									)
									[| {|get_angle,set_angle,terminate|} |]
									Memory_angle(0)
								)\{|get_angle,set_angle|}
							)
							[| {|get_rspeed,set_rspeed,terminate|} |]
							Memory_rspeed(0)
						)\{|get_rspeed,set_rspeed|}
					)
					[| {|get_lspeed,set_lspeed,terminate|} |]
					Memory_lspeed(0)
				)\{|get_lspeed,set_lspeed|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_lspeed(lspeed) =
			get_lspeed!lspeed -> Memory_lspeed(lspeed)
			[]
			set_lspeed?x__ -> Memory_lspeed(x__)
			[]
			terminate -> SKIP
		Memory_rspeed(rspeed) =
			get_rspeed!rspeed -> Memory_rspeed(rspeed)
			[]
			set_rspeed?x__ -> Memory_rspeed(x__)
			[]
			terminate -> SKIP
		Memory_angle(angle) =
			get_angle!angle -> Memory_angle(angle)
			[]
			set_angle?x__ -> Memory_angle(x__)
			[]
			terminate -> SKIP
		Memory_speed_adj(speed_adj) =
			get_speed_adj!speed_adj -> Memory_speed_adj(speed_adj)
			[]
			set_speed_adj?x__ -> Memory_speed_adj(x__)
			[]
			terminate -> SKIP
		Memory_angle_adj(angle_adj) =
			get_angle_adj!angle_adj -> Memory_angle_adj(angle_adj)
			[]
			set_angle_adj?x__ -> Memory_angle_adj(x__)
			[]
			terminate -> SKIP
		Memory_direction(direction) =
			get_direction!direction -> Memory_direction(direction)
			[]
			set_direction?x__ -> Memory_direction(x__)
			[]
			terminate -> SKIP
		Memory_orientation(orientation) =
			get_orientation!orientation -> Memory_orientation(orientation)
			[]
			set_orientation?x__ -> Memory_orientation(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = Memory_lspeed(0)
		[| { terminate } |] (
		Memory_rspeed(0)
		[| { terminate } |] (
		Memory_angle(0)
		[| { terminate } |] (
		Memory_speed_adj(0)
		[| { terminate } |] (
		Memory_angle_adj(0)
		[| { terminate } |] (
		Memory_direction(Direction_left)
		[| { terminate } |] (
		Memory_orientation(Orientation_up)
		)
		)
		)
		)
		)
		)
		
		getsetLocalChannels = {|get_lspeed,set_lspeed,get_rspeed,set_rspeed,get_angle,set_angle,get_speed_adj,set_speed_adj,get_angle_adj,set_angle_adj,get_direction,set_direction,get_orientation,set_orientation|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = STM_VS_O(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) \ localClockResets
		D__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = timed_priority(STM(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) \ union(internal_events,localClockResets))
		O__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = dbisim(D__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp))
		VS__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = FVS__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp)
		VS_O__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = dbisim(FVS__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp))
		HEXT__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = O__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) [|shared_variable_events|] SKIP
		FVS_C__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = dbisim(timed_priority(STM(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) \ internal_events))
		HUP__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = timed_priority(O__(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_Go_up(id__,x__,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp) = 
			TimeOut_1(
				Go_up::entered -> Clock_CLID_Go_up(id__,0,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				get_CLID_Go_up!x__ -> Clock_CLID_Go_up(id__,x__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				terminate -> SKIP,Clock_CLID_Go_up(id__,clock_type_plus(x__,1,CLID_Go_up_clock_type(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)),
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp))
		Clock_CLID_Go_down(id__,x__,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp) = 
			TimeOut_1(
				Go_down::entered -> Clock_CLID_Go_down(id__,0,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				get_CLID_Go_down!x__ -> Clock_CLID_Go_down(id__,x__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				terminate -> SKIP,Clock_CLID_Go_down(id__,clock_type_plus(x__,1,CLID_Go_down_clock_type(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)),
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp))
		Clock_CLID_Turn_left(id__,x__,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp) = 
			TimeOut_1(
				Turn_left::entered -> Clock_CLID_Turn_left(id__,0,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				get_CLID_Turn_left!x__ -> Clock_CLID_Turn_left(id__,x__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				terminate -> SKIP,Clock_CLID_Turn_left(id__,clock_type_plus(x__,1,CLID_Turn_left_clock_type(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)),
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp))
		Clock_CLID_Stop(id__,x__,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp) = 
			TimeOut_1(
				Stop::entered -> Clock_CLID_Stop(id__,0,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				get_CLID_Stop!x__ -> Clock_CLID_Stop(id__,x__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				terminate -> SKIP,Clock_CLID_Stop(id__,clock_type_plus(x__,1,CLID_Stop_clock_type(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)),
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp))
		Clock_CLID_Go_side(id__,x__,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp) = 
			TimeOut_1(
				Go_side::entered -> Clock_CLID_Go_side(id__,0,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				get_CLID_Go_side!x__ -> Clock_CLID_Go_side(id__,x__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				terminate -> SKIP,Clock_CLID_Go_side(id__,clock_type_plus(x__,1,CLID_Go_side_clock_type(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)),
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp))
		Clock_CLID_Turn_right(id__,x__,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp) = 
			TimeOut_1(
				Turn_right::entered -> Clock_CLID_Turn_right(id__,0,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				get_CLID_Turn_right!x__ -> Clock_CLID_Turn_right(id__,x__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)
				[]
				terminate -> SKIP,Clock_CLID_Turn_right(id__,clock_type_plus(x__,1,CLID_Turn_right_clock_type(id__,
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp)),
						          const_MidLevelSM_step,
						          const_MidLevelSM_climb_speed,
						          const_MidLevelSM_descent_speed,
						          const_MidLevelSM_side_speed,
						          const_MidLevelSM_forward_angle,
						          const_MidLevelSM_left_angle,
						          const_MidLevelSM_right_angle,
						          const_MidLevelSM_turn_speed,
						          const_MidLevelSM_movesp,
						          const_MidLevelSM_stopsp))
		
		StateClocks(id__,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp) = dbisim(Clock_CLID_Go_up(id__,0,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp))
		[| { terminate } |] (
		dbisim(Clock_CLID_Go_down(id__,0,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp))
		[| { terminate } |] (
		dbisim(Clock_CLID_Turn_left(id__,0,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp))
		[| { terminate } |] (
		dbisim(Clock_CLID_Stop(id__,0,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp))
		[| { terminate } |] (
		dbisim(Clock_CLID_Go_side(id__,0,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp))
		[| { terminate } |] (
		dbisim(Clock_CLID_Turn_right(id__,0,
				          const_MidLevelSM_step,
				          const_MidLevelSM_climb_speed,
				          const_MidLevelSM_descent_speed,
				          const_MidLevelSM_side_speed,
				          const_MidLevelSM_forward_angle,
				          const_MidLevelSM_left_angle,
				          const_MidLevelSM_right_angle,
				          const_MidLevelSM_turn_speed,
				          const_MidLevelSM_movesp,
				          const_MidLevelSM_stopsp))
		)
		)
		)
		)
		)
		
		stateClockSync = {|get_CLID_Go_up,Go_up::entered,get_CLID_Go_down,Go_down::entered,get_CLID_Turn_left,Turn_left::entered,get_CLID_Stop,Stop::entered,get_CLID_Go_side,Go_side::entered,get_CLID_Turn_right,Turn_right::entered|}
		
		-- Shared memory
		-- Shared memory variables
		
		-- sharedVarMemory process
		sharedVarMemory(id__,
				    const_MidLevelSM_step,
				    const_MidLevelSM_climb_speed,
				    const_MidLevelSM_descent_speed,
				    const_MidLevelSM_side_speed,
				    const_MidLevelSM_forward_angle,
				    const_MidLevelSM_left_angle,
				    const_MidLevelSM_right_angle,
				    const_MidLevelSM_turn_speed,
				    const_MidLevelSM_movesp,
				    const_MidLevelSM_stopsp) = terminate -> SKIP
		
		sharedVarSync = {||}
		
		sharedVarHide = {||}
		}
endmodule


