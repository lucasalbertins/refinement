
module Module
exports 

	transparent diamond
	transparent sbisim
	transparent wbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel acc_l: InOut.TripleAxis
	channel acc_r: InOut.TripleAxis
	channel ultrasonic: InOut.core_int
	channel battery_level: InOut.core_int
	channel charging: InOut
	
	channel output_left_motorCall: core_int
	channel output_right_motorCall: core_int
	channel vacuumCall: core_int
	channel brushCall: core_int
	
	-- declaring module termination channel
	channel terminate
				
	-- declaring robotic platform variables
	
		module PathPlanningController
			Timed(OneStep) {
				shared_variable_events = {|
				|}		
			}	
		exports
			transparent diamond
			transparent sbisim
			transparent wbisim
			transparent chase
			
					module stm_ref0
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_cycles, set_cycles: core_int
							channel get_u, set_u: core_int
							channel get_d, set_d: core_int
							channel get_b, set_b: core_int
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel move_forward__: TIDS.InOut
							channel move_forward: InOut
							channel turn__: TIDS.InOut.Direction
							channel turn: InOut.Direction
							channel stop__: TIDS.InOut
							channel stop: InOut
							channel ultrasonic__: TIDS.InOut.core_int
							channel ultrasonic: InOut.core_int
							channel battery_level__: TIDS.InOut.core_int
							channel battery_level: InOut.core_int
							channel charging__: TIDS.InOut
							channel charging: InOut
							channel clean__: TIDS.InOut.core_boolean
							channel clean: InOut.core_boolean
							channel displacement__: TIDS.InOut.core_int
							channel displacement: InOut.core_int
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_PathPlanningSM
							              | SID_PathPlanningSM_Go_up
							              | SID_PathPlanningSM_Go_right
							              | SID_PathPlanningSM_Go_down
							              | SID_PathPlanningSM_Go_right_again
							              | SID_PathPlanningSM_Return
							              | SID_PathPlanningSM_Dock
							              | SID_PathPlanningSM_Sleep
							              | SID_PathPlanningSM_Check_end
							              | SID_PathPlanningSM_Check_battery
							              | SID_PathPlanningSM_Resume
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_PathPlanningSM_t0
							              | TID_PathPlanningSM_t1
							              | TID_PathPlanningSM_t3
							              | TID_PathPlanningSM_t4
							              | TID_PathPlanningSM_t6
							              | TID_PathPlanningSM_t7
							              | TID_PathPlanningSM_t5
							              | TID_PathPlanningSM_t8
							              | TID_PathPlanningSM_t9
							              | TID_PathPlanningSM_t10
							              | TID_PathPlanningSM_t11
							              | TID_PathPlanningSM_t12
							              | TID_PathPlanningSM_t13
							              | TID_PathPlanningSM_t14
							              | TID_PathPlanningSM_t2
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_PathPlanningSM_t1,	TID_PathPlanningSM_t3,	TID_PathPlanningSM_t4,	TID_PathPlanningSM_t6,	TID_PathPlanningSM_t7,	TID_PathPlanningSM_t5,	TID_PathPlanningSM_t8,	TID_PathPlanningSM_t9,	TID_PathPlanningSM_t10,	TID_PathPlanningSM_t11,	TID_PathPlanningSM_t12,	TID_PathPlanningSM_t13,	TID_PathPlanningSM_t14,	TID_PathPlanningSM_t2
							}
							
							int_int = {|
								move_forward__.TID_PathPlanningSM_t1,
								turn__.TID_PathPlanningSM_t1,
								stop__.TID_PathPlanningSM_t1,
								ultrasonic__.TID_PathPlanningSM_t1,
								battery_level__.TID_PathPlanningSM_t1,
								charging__.TID_PathPlanningSM_t1,
								clean__.TID_PathPlanningSM_t1,
								displacement__.TID_PathPlanningSM_t1,
								internal__.TID_PathPlanningSM_t1,
								move_forward__.TID_PathPlanningSM_t3,
								turn__.TID_PathPlanningSM_t3,
								stop__.TID_PathPlanningSM_t3,
								ultrasonic__.TID_PathPlanningSM_t3,
								battery_level__.TID_PathPlanningSM_t3,
								charging__.TID_PathPlanningSM_t3,
								clean__.TID_PathPlanningSM_t3,
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t3,
								move_forward__.TID_PathPlanningSM_t4,
								turn__.TID_PathPlanningSM_t4,
								stop__.TID_PathPlanningSM_t4,
								ultrasonic__.TID_PathPlanningSM_t4,
								battery_level__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t4,
								clean__.TID_PathPlanningSM_t4,
								displacement__.TID_PathPlanningSM_t4,
								internal__.TID_PathPlanningSM_t4,
								move_forward__.TID_PathPlanningSM_t6,
								turn__.TID_PathPlanningSM_t6,
								stop__.TID_PathPlanningSM_t6,
								ultrasonic__.TID_PathPlanningSM_t6,
								battery_level__.TID_PathPlanningSM_t6,
								charging__.TID_PathPlanningSM_t6,
								clean__.TID_PathPlanningSM_t6,
								displacement__.TID_PathPlanningSM_t6,
								internal__.TID_PathPlanningSM_t6,
								move_forward__.TID_PathPlanningSM_t7,
								turn__.TID_PathPlanningSM_t7,
								stop__.TID_PathPlanningSM_t7,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t7,
								charging__.TID_PathPlanningSM_t7,
								clean__.TID_PathPlanningSM_t7,
								displacement__.TID_PathPlanningSM_t7,
								internal__.TID_PathPlanningSM_t7,
								move_forward__.TID_PathPlanningSM_t5,
								turn__.TID_PathPlanningSM_t5,
								stop__.TID_PathPlanningSM_t5,
								ultrasonic__.TID_PathPlanningSM_t5,
								battery_level__.TID_PathPlanningSM_t5,
								charging__.TID_PathPlanningSM_t5,
								clean__.TID_PathPlanningSM_t5,
								displacement__.TID_PathPlanningSM_t5,
								internal__.TID_PathPlanningSM_t5,
								move_forward__.TID_PathPlanningSM_t8,
								turn__.TID_PathPlanningSM_t8,
								stop__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t8,
								battery_level__.TID_PathPlanningSM_t8,
								charging__.TID_PathPlanningSM_t8,
								clean__.TID_PathPlanningSM_t8,
								displacement__.TID_PathPlanningSM_t8,
								internal__.TID_PathPlanningSM_t8,
								move_forward__.TID_PathPlanningSM_t9,
								turn__.TID_PathPlanningSM_t9,
								stop__.TID_PathPlanningSM_t9,
								ultrasonic__.TID_PathPlanningSM_t9,
								battery_level__.TID_PathPlanningSM_t9,
								charging__.TID_PathPlanningSM_t9,
								clean__.TID_PathPlanningSM_t9,
								displacement__.TID_PathPlanningSM_t9,
								internal__.TID_PathPlanningSM_t9,
								move_forward__.TID_PathPlanningSM_t10,
								turn__.TID_PathPlanningSM_t10,
								stop__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t10,
								battery_level__.TID_PathPlanningSM_t10,
								charging__.TID_PathPlanningSM_t10,
								clean__.TID_PathPlanningSM_t10,
								displacement__.TID_PathPlanningSM_t10,
								internal__.TID_PathPlanningSM_t10,
								move_forward__.TID_PathPlanningSM_t11,
								turn__.TID_PathPlanningSM_t11,
								stop__.TID_PathPlanningSM_t11,
								ultrasonic__.TID_PathPlanningSM_t11,
								battery_level__.TID_PathPlanningSM_t11,
								charging__.TID_PathPlanningSM_t11,
								clean__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t11,
								internal__.TID_PathPlanningSM_t11,
								move_forward__.TID_PathPlanningSM_t12,
								turn__.TID_PathPlanningSM_t12,
								stop__.TID_PathPlanningSM_t12,
								ultrasonic__.TID_PathPlanningSM_t12,
								battery_level__.TID_PathPlanningSM_t12,
								charging__.TID_PathPlanningSM_t12,
								clean__.TID_PathPlanningSM_t12,
								displacement__.TID_PathPlanningSM_t12,
								internal__.TID_PathPlanningSM_t12,
								move_forward__.TID_PathPlanningSM_t13,
								turn__.TID_PathPlanningSM_t13,
								stop__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t13,
								battery_level__.TID_PathPlanningSM_t13,
								charging__.TID_PathPlanningSM_t13,
								clean__.TID_PathPlanningSM_t13,
								displacement__.TID_PathPlanningSM_t13,
								internal__.TID_PathPlanningSM_t13,
								move_forward__.TID_PathPlanningSM_t14,
								turn__.TID_PathPlanningSM_t14,
								stop__.TID_PathPlanningSM_t14,
								ultrasonic__.TID_PathPlanningSM_t14,
								battery_level__.TID_PathPlanningSM_t14,
								charging__.TID_PathPlanningSM_t14,
								clean__.TID_PathPlanningSM_t14,
								displacement__.TID_PathPlanningSM_t14,
								internal__.TID_PathPlanningSM_t14,
								move_forward__.TID_PathPlanningSM_t2,
								turn__.TID_PathPlanningSM_t2,
								stop__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t2,
								battery_level__.TID_PathPlanningSM_t2,
								charging__.TID_PathPlanningSM_t2,
								clean__.TID_PathPlanningSM_t2,
								displacement__.TID_PathPlanningSM_t2,
								internal__.TID_PathPlanningSM_t2
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_PathPlanningSM_Go_up_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
								y____ <- {SID_PathPlanningSM_Go_up}
							|}
							
							
							PathPlanningSM_Go_up_triggers = {|
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t1,
								ultrasonic__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t14,
								displacement__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t12,
								displacement__.TID_PathPlanningSM_t5,
								battery_level__.TID_PathPlanningSM_t9,
								ultrasonic__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t6
							|}
							
							State_PathPlanningSM_Go_up(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t1(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t1.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Go_up.SID_PathPlanningSM_Go_up -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Go_up.SID_PathPlanningSM_Go_up -> SKIP;
													enter!SID_PathPlanningSM_Go_up!SID_PathPlanningSM_Go_right -> entered!SID_PathPlanningSM_Go_up!SID_PathPlanningSM_Go_right ->
													State_PathPlanningSM_Go_up(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								State_PathPlanningSM_Go_up_execute(id__,o____) = true&(move_forward.out -> SKIP); 
									entered!o____!SID_PathPlanningSM_Go_up ->
									(SKIP; STOP /\ (
										T_PathPlanningSM_t1(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
												State_PathPlanningSM_Go_up(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
												State_PathPlanningSM_Go_up(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
												State_PathPlanningSM_Go_up(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
												State_PathPlanningSM_Go_up(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
												State_PathPlanningSM_Go_up(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
												State_PathPlanningSM_Go_up(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
												State_PathPlanningSM_Go_up(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
												State_PathPlanningSM_Go_up(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
												State_PathPlanningSM_Go_up(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (State_PathPlanningSM_Go_up_execute(id__,x____))
							
							CS_PathPlanningSM_Go_right_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
								y____ <- {SID_PathPlanningSM_Go_right}
							|}
							
							
							PathPlanningSM_Go_right_triggers = {|
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t1,
								ultrasonic__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t14,
								displacement__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t12,
								displacement__.TID_PathPlanningSM_t5,
								battery_level__.TID_PathPlanningSM_t9,
								ultrasonic__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t6
							|}
							
							State_PathPlanningSM_Go_right(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t3(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = displacement__!TID_PathPlanningSM_t3.in?d -> set_d!d ->  (exit.SID_PathPlanningSM_Go_right.SID_PathPlanningSM_Go_right -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Go_right.SID_PathPlanningSM_Go_right -> SKIP;
													enter!SID_PathPlanningSM_Go_right!SID_PathPlanningSM_Go_down -> entered!SID_PathPlanningSM_Go_right!SID_PathPlanningSM_Go_down ->
													State_PathPlanningSM_Go_right(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								T_PathPlanningSM_t2(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t2.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Go_right.SID_PathPlanningSM_Go_right -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Go_right.SID_PathPlanningSM_Go_right -> SKIP;
													enter!SID_PathPlanningSM_Go_right!SID_PathPlanningSM_Go_down -> entered!SID_PathPlanningSM_Go_right!SID_PathPlanningSM_Go_down ->
													State_PathPlanningSM_Go_right(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								State_PathPlanningSM_Go_right_execute(id__,o____) = true&(turn.out!Direction_right -> SKIP);true&(move_forward.out -> SKIP);true&(displacement.out!0 -> SKIP); 
									entered!o____!SID_PathPlanningSM_Go_right ->
									(SKIP; STOP /\ (
										T_PathPlanningSM_t3(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)[]
										T_PathPlanningSM_t2(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
												State_PathPlanningSM_Go_right(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
												State_PathPlanningSM_Go_right(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
												State_PathPlanningSM_Go_right(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
												State_PathPlanningSM_Go_right(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
												State_PathPlanningSM_Go_right(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
												State_PathPlanningSM_Go_right(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
												State_PathPlanningSM_Go_right(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
												State_PathPlanningSM_Go_right(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
												State_PathPlanningSM_Go_right(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (State_PathPlanningSM_Go_right_execute(id__,x____))
							
							CS_PathPlanningSM_Go_down_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
								y____ <- {SID_PathPlanningSM_Go_down}
							|}
							
							
							PathPlanningSM_Go_down_triggers = {|
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t1,
								ultrasonic__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t14,
								displacement__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t12,
								displacement__.TID_PathPlanningSM_t5,
								battery_level__.TID_PathPlanningSM_t9,
								ultrasonic__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t6
							|}
							
							State_PathPlanningSM_Go_down(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t4(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t4.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Go_down.SID_PathPlanningSM_Go_down -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Go_down.SID_PathPlanningSM_Go_down -> SKIP;
													true&(turn.out!Direction_left -> SKIP);true&(move_forward.out -> SKIP);true&(displacement.out!0 -> SKIP);enter!SID_PathPlanningSM_Go_down!SID_PathPlanningSM_Go_right_again -> entered!SID_PathPlanningSM_Go_down!SID_PathPlanningSM_Go_right_again ->
													State_PathPlanningSM_Go_down(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								State_PathPlanningSM_Go_down_execute(id__,o____) = true&(turn.out!Direction_right -> SKIP);true&(move_forward.out -> SKIP); 
									entered!o____!SID_PathPlanningSM_Go_down ->
									(SKIP; STOP /\ (
										T_PathPlanningSM_t4(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
												State_PathPlanningSM_Go_down(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
												State_PathPlanningSM_Go_down(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
												State_PathPlanningSM_Go_down(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
												State_PathPlanningSM_Go_down(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
												State_PathPlanningSM_Go_down(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
												State_PathPlanningSM_Go_down(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
												State_PathPlanningSM_Go_down(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
												State_PathPlanningSM_Go_down(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
												State_PathPlanningSM_Go_down(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (State_PathPlanningSM_Go_down_execute(id__,x____))
							
							CS_PathPlanningSM_Go_right_again_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
								y____ <- {SID_PathPlanningSM_Go_right_again}
							|}
							
							
							PathPlanningSM_Go_right_again_triggers = {|
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t1,
								ultrasonic__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t14,
								displacement__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t12,
								displacement__.TID_PathPlanningSM_t5,
								battery_level__.TID_PathPlanningSM_t9,
								ultrasonic__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t6
							|}
							
							State_PathPlanningSM_Go_right_again(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t6(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t6.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Go_right_again.SID_PathPlanningSM_Go_right_again -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Go_right_again.SID_PathPlanningSM_Go_right_again -> SKIP;
													enter!SID_PathPlanningSM_Go_right_again!SID_PathPlanningSM_Check_end -> entered!SID_PathPlanningSM_Go_right_again!SID_PathPlanningSM_Check_end ->
													State_PathPlanningSM_Go_right_again(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								T_PathPlanningSM_t7(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t7.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Go_right_again.SID_PathPlanningSM_Go_right_again -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Go_right_again.SID_PathPlanningSM_Go_right_again -> SKIP;
													true & (set_cycles!0 -> SKIP);enter!SID_PathPlanningSM_Go_right_again!SID_PathPlanningSM_Return -> entered!SID_PathPlanningSM_Go_right_again!SID_PathPlanningSM_Return ->
													State_PathPlanningSM_Go_right_again(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								State_PathPlanningSM_Go_right_again_execute(id__,o____) = SKIP; 
									entered!o____!SID_PathPlanningSM_Go_right_again ->
									(SKIP; STOP /\ (
										T_PathPlanningSM_t6(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)[]
										T_PathPlanningSM_t7(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
												State_PathPlanningSM_Go_right_again(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
												State_PathPlanningSM_Go_right_again(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
												State_PathPlanningSM_Go_right_again(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
												State_PathPlanningSM_Go_right_again(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
												State_PathPlanningSM_Go_right_again(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
												State_PathPlanningSM_Go_right_again(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
												State_PathPlanningSM_Go_right_again(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
												State_PathPlanningSM_Go_right_again(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
												State_PathPlanningSM_Go_right_again(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (State_PathPlanningSM_Go_right_again_execute(id__,x____))
							
							CS_PathPlanningSM_Return_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
								y____ <- {SID_PathPlanningSM_Return}
							|}
							
							
							PathPlanningSM_Return_triggers = {|
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t1,
								ultrasonic__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t14,
								displacement__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t12,
								displacement__.TID_PathPlanningSM_t5,
								battery_level__.TID_PathPlanningSM_t9,
								ultrasonic__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t6
							|}
							
							State_PathPlanningSM_Return(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t11(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t11.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Return.SID_PathPlanningSM_Return -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Return.SID_PathPlanningSM_Return -> SKIP;
													enter!SID_PathPlanningSM_Return!SID_PathPlanningSM_Dock -> entered!SID_PathPlanningSM_Return!SID_PathPlanningSM_Dock ->
													State_PathPlanningSM_Return(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								State_PathPlanningSM_Return_execute(id__,o____) = true&(turn.out!Direction_left -> SKIP);true&(turn.out!Direction_left -> SKIP);true&(move_forward.out -> SKIP);true&(clean.out!false -> SKIP); 
									entered!o____!SID_PathPlanningSM_Return ->
									(SKIP; STOP /\ (
										T_PathPlanningSM_t11(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Return -> SKIP);
												State_PathPlanningSM_Return(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Return -> SKIP);
												State_PathPlanningSM_Return(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Return -> SKIP);
												State_PathPlanningSM_Return(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Return -> SKIP);
												State_PathPlanningSM_Return(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Return -> SKIP);
												State_PathPlanningSM_Return(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Return -> SKIP);
												State_PathPlanningSM_Return(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Return -> SKIP);
												State_PathPlanningSM_Return(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Return -> SKIP);
												State_PathPlanningSM_Return(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Return -> SKIP);
												State_PathPlanningSM_Return(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (State_PathPlanningSM_Return_execute(id__,x____))
							
							CS_PathPlanningSM_Dock_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
								y____ <- {SID_PathPlanningSM_Dock}
							|}
							
							
							PathPlanningSM_Dock_triggers = {|
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t1,
								displacement__.TID_PathPlanningSM_t14,
								ultrasonic__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t12,
								displacement__.TID_PathPlanningSM_t5,
								battery_level__.TID_PathPlanningSM_t9,
								ultrasonic__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t6
							|}
							
							State_PathPlanningSM_Dock(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t12(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = charging__!TID_PathPlanningSM_t12.in ->  (exit.SID_PathPlanningSM_Dock.SID_PathPlanningSM_Dock -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Dock.SID_PathPlanningSM_Dock -> SKIP;
													enter!SID_PathPlanningSM_Dock!SID_PathPlanningSM_Sleep -> entered!SID_PathPlanningSM_Dock!SID_PathPlanningSM_Sleep ->
													State_PathPlanningSM_Dock(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								State_PathPlanningSM_Dock_execute(id__,o____) = true&(turn.out!Direction_left -> SKIP);true&(move_forward.out -> SKIP); 
									entered!o____!SID_PathPlanningSM_Dock ->
									(SKIP; STOP /\ (
										T_PathPlanningSM_t12(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Dock -> SKIP);
												State_PathPlanningSM_Dock(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Dock -> SKIP);
												State_PathPlanningSM_Dock(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Dock -> SKIP);
												State_PathPlanningSM_Dock(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Dock -> SKIP);
												State_PathPlanningSM_Dock(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Dock -> SKIP);
												State_PathPlanningSM_Dock(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Dock -> SKIP);
												State_PathPlanningSM_Dock(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Dock -> SKIP);
												State_PathPlanningSM_Dock(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Dock -> SKIP);
												State_PathPlanningSM_Dock(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Dock -> SKIP);
												State_PathPlanningSM_Dock(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (State_PathPlanningSM_Dock_execute(id__,x____))
							
							CS_PathPlanningSM_Sleep_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
								y____ <- {SID_PathPlanningSM_Sleep}
							|}
							
							
							PathPlanningSM_Sleep_triggers = {|
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t1,
								displacement__.TID_PathPlanningSM_t14,
								ultrasonic__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t12,
								displacement__.TID_PathPlanningSM_t5,
								battery_level__.TID_PathPlanningSM_t9,
								ultrasonic__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t6
							|}
							
							State_PathPlanningSM_Sleep(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t13(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = internal__!TID_PathPlanningSM_t13 ->  exit.SID_PathPlanningSM_Sleep.SID_PathPlanningSM_Sleep -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Sleep.SID_PathPlanningSM_Sleep -> SKIP;
													true&(turn.out!Direction_left -> SKIP);true&(turn.out!Direction_left -> SKIP);true&(move_forward.out -> SKIP);enter!SID_PathPlanningSM_Sleep!SID_PathPlanningSM_Resume -> entered!SID_PathPlanningSM_Sleep!SID_PathPlanningSM_Resume ->
													State_PathPlanningSM_Sleep(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								State_PathPlanningSM_Sleep_execute(id__,o____) = true&(stop.out -> SKIP);WAIT(const_PathPlanningSM_sleep_time); 
									entered!o____!SID_PathPlanningSM_Sleep ->
									(SKIP; STOP /\ (
										T_PathPlanningSM_t13(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
												State_PathPlanningSM_Sleep(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
												State_PathPlanningSM_Sleep(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
												State_PathPlanningSM_Sleep(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
												State_PathPlanningSM_Sleep(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
												State_PathPlanningSM_Sleep(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
												State_PathPlanningSM_Sleep(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
												State_PathPlanningSM_Sleep(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
												State_PathPlanningSM_Sleep(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
												State_PathPlanningSM_Sleep(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (State_PathPlanningSM_Sleep_execute(id__,x____))
							
							CS_PathPlanningSM_Check_end_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
								y____ <- {SID_PathPlanningSM_Check_end}
							|}
							
							
							PathPlanningSM_Check_end_triggers = {|
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t1,
								ultrasonic__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t14,
								displacement__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t12,
								displacement__.TID_PathPlanningSM_t5,
								battery_level__.TID_PathPlanningSM_t9,
								ultrasonic__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t6
							|}
							
							State_PathPlanningSM_Check_end(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t5(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = displacement__!TID_PathPlanningSM_t5.in?d -> set_d!d ->  (exit.SID_PathPlanningSM_Check_end.SID_PathPlanningSM_Check_end -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Check_end.SID_PathPlanningSM_Check_end -> SKIP;
													enter!SID_PathPlanningSM_Check_end!SID_PathPlanningSM_Go_right_again -> entered!SID_PathPlanningSM_Check_end!SID_PathPlanningSM_Go_right_again ->
													State_PathPlanningSM_Check_end(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								T_PathPlanningSM_t8(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = displacement__!TID_PathPlanningSM_t8.in?d -> set_d!d ->  (exit.SID_PathPlanningSM_Check_end.SID_PathPlanningSM_Check_end -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Check_end.SID_PathPlanningSM_Check_end -> SKIP;
													get_cycles?cycles -> true & (set_cycles!Plus(cycles, 1, core_int) -> SKIP);enter!SID_PathPlanningSM_Check_end!SID_PathPlanningSM_Check_battery -> entered!SID_PathPlanningSM_Check_end!SID_PathPlanningSM_Check_battery ->
													State_PathPlanningSM_Check_end(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								State_PathPlanningSM_Check_end_execute(id__,o____) = SKIP; 
									entered!o____!SID_PathPlanningSM_Check_end ->
									(SKIP; STOP /\ (
										T_PathPlanningSM_t5(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)[]
										T_PathPlanningSM_t8(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
												State_PathPlanningSM_Check_end(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
												State_PathPlanningSM_Check_end(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
												State_PathPlanningSM_Check_end(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
												State_PathPlanningSM_Check_end(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
												State_PathPlanningSM_Check_end(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
												State_PathPlanningSM_Check_end(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
												State_PathPlanningSM_Check_end(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
												State_PathPlanningSM_Check_end(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
												State_PathPlanningSM_Check_end(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (State_PathPlanningSM_Check_end_execute(id__,x____))
							
							CS_PathPlanningSM_Check_battery_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
								y____ <- {SID_PathPlanningSM_Check_battery}
							|}
							
							
							PathPlanningSM_Check_battery_triggers = {|
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t1,
								ultrasonic__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t14,
								displacement__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t12,
								battery_level__.TID_PathPlanningSM_t9,
								displacement__.TID_PathPlanningSM_t5,
								ultrasonic__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t6
							|}
							
							State_PathPlanningSM_Check_battery(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t9(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = battery_level__!TID_PathPlanningSM_t9.in?b -> set_b!b ->  (exit.SID_PathPlanningSM_Check_battery.SID_PathPlanningSM_Check_battery -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Check_battery.SID_PathPlanningSM_Check_battery -> SKIP;
													true&(turn.out!Direction_left -> SKIP);enter!SID_PathPlanningSM_Check_battery!SID_PathPlanningSM_Go_up -> entered!SID_PathPlanningSM_Check_battery!SID_PathPlanningSM_Go_up ->
													State_PathPlanningSM_Check_battery(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								T_PathPlanningSM_t10(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = battery_level__!TID_PathPlanningSM_t10.in?b -> set_b!b ->  (exit.SID_PathPlanningSM_Check_battery.SID_PathPlanningSM_Check_battery -> SKIP;
													SKIP;exited.SID_PathPlanningSM_Check_battery.SID_PathPlanningSM_Check_battery -> SKIP;
													enter!SID_PathPlanningSM_Check_battery!SID_PathPlanningSM_Return -> entered!SID_PathPlanningSM_Check_battery!SID_PathPlanningSM_Return ->
													State_PathPlanningSM_Check_battery(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								State_PathPlanningSM_Check_battery_execute(id__,o____) = SKIP; 
									entered!o____!SID_PathPlanningSM_Check_battery ->
									(SKIP; STOP /\ (
										T_PathPlanningSM_t9(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)[]
										T_PathPlanningSM_t10(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
												State_PathPlanningSM_Check_battery(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
												State_PathPlanningSM_Check_battery(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
												State_PathPlanningSM_Check_battery(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
												State_PathPlanningSM_Check_battery(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
												State_PathPlanningSM_Check_battery(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
												State_PathPlanningSM_Check_battery(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
												State_PathPlanningSM_Check_battery(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
												State_PathPlanningSM_Check_battery(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
												SKIP;
												exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
												State_PathPlanningSM_Check_battery(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (State_PathPlanningSM_Check_battery_execute(id__,x____))
							
							CS_PathPlanningSM_Resume_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
								y____ <- {SID_PathPlanningSM_Resume}
							|}
							
							
							PathPlanningSM_Resume_triggers = {|
								displacement__.TID_PathPlanningSM_t3,
								internal__.TID_PathPlanningSM_t13,
								ultrasonic__.TID_PathPlanningSM_t1,
								displacement__.TID_PathPlanningSM_t14,
								ultrasonic__.TID_PathPlanningSM_t11,
								displacement__.TID_PathPlanningSM_t8,
								ultrasonic__.TID_PathPlanningSM_t7,
								battery_level__.TID_PathPlanningSM_t10,
								ultrasonic__.TID_PathPlanningSM_t4,
								charging__.TID_PathPlanningSM_t12,
								displacement__.TID_PathPlanningSM_t5,
								battery_level__.TID_PathPlanningSM_t9,
								ultrasonic__.TID_PathPlanningSM_t2,
								ultrasonic__.TID_PathPlanningSM_t6
							|}
							
							State_PathPlanningSM_Resume(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t14(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = displacement__!TID_PathPlanningSM_t14.in?d -> set_d!d ->  (exit.SID_PathPlanningSM_Resume.SID_PathPlanningSM_Resume -> SKIP;
													true&(turn.out!Direction_left -> SKIP);exited.SID_PathPlanningSM_Resume.SID_PathPlanningSM_Resume -> SKIP;
													true&(clean.out!true -> SKIP);enter!SID_PathPlanningSM_Resume!SID_PathPlanningSM_Go_up -> entered!SID_PathPlanningSM_Resume!SID_PathPlanningSM_Go_up ->
													State_PathPlanningSM_Resume(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
								)
								State_PathPlanningSM_Resume_execute(id__,o____) = true&(turn.out!Direction_right -> SKIP);true&(move_forward.out -> SKIP);true&(displacement.out!0 -> SKIP); 
									entered!o____!SID_PathPlanningSM_Resume ->
									(SKIP; STOP /\ (
										T_PathPlanningSM_t14(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
												true&(turn.out!Direction_left -> SKIP);
												exited!y____!SID_PathPlanningSM_Resume -> SKIP);
												State_PathPlanningSM_Resume(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
												true&(turn.out!Direction_left -> SKIP);
												exited!y____!SID_PathPlanningSM_Resume -> SKIP);
												State_PathPlanningSM_Resume(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
												true&(turn.out!Direction_left -> SKIP);
												exited!y____!SID_PathPlanningSM_Resume -> SKIP);
												State_PathPlanningSM_Resume(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
												true&(turn.out!Direction_left -> SKIP);
												exited!y____!SID_PathPlanningSM_Resume -> SKIP);
												State_PathPlanningSM_Resume(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
												true&(turn.out!Direction_left -> SKIP);
												exited!y____!SID_PathPlanningSM_Resume -> SKIP);
												State_PathPlanningSM_Resume(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
												true&(turn.out!Direction_left -> SKIP);
												exited!y____!SID_PathPlanningSM_Resume -> SKIP);
												State_PathPlanningSM_Resume(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
												true&(turn.out!Direction_left -> SKIP);
												exited!y____!SID_PathPlanningSM_Resume -> SKIP);
												State_PathPlanningSM_Resume(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
												true&(turn.out!Direction_left -> SKIP);
												exited!y____!SID_PathPlanningSM_Resume -> SKIP);
												State_PathPlanningSM_Resume(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
												true&(turn.out!Direction_left -> SKIP);
												exited!y____!SID_PathPlanningSM_Resume -> SKIP);
												State_PathPlanningSM_Resume(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (State_PathPlanningSM_Resume_execute(id__,x____))
							
							
							I_PathPlanningSM_i0(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = let
								T_PathPlanningSM_t0(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance) = internal__!TID_PathPlanningSM_t0 -> true & (set_cycles!0 -> SKIP);enter!SID_PathPlanningSM!SID_PathPlanningSM_Resume -> entered!SID_PathPlanningSM!SID_PathPlanningSM_Resume ->
								SKIP
							within
								T_PathPlanningSM_t0(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
							
							
							State_PathPlanningSM_Go_up_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								State_PathPlanningSM_Go_up(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|diff(int_int,PathPlanningSM_Go_up_triggers)|]
								SKIP
									 		
							State_PathPlanningSM_Go_right_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								State_PathPlanningSM_Go_right(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|diff(int_int,PathPlanningSM_Go_right_triggers)|]
								SKIP
									 		
							State_PathPlanningSM_Go_down_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								State_PathPlanningSM_Go_down(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|diff(int_int,PathPlanningSM_Go_down_triggers)|]
								SKIP
									 		
							State_PathPlanningSM_Go_right_again_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								State_PathPlanningSM_Go_right_again(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|diff(int_int,PathPlanningSM_Go_right_again_triggers)|]
								SKIP
									 		
							State_PathPlanningSM_Return_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								State_PathPlanningSM_Return(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|diff(int_int,PathPlanningSM_Return_triggers)|]
								SKIP
									 		
							State_PathPlanningSM_Dock_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								State_PathPlanningSM_Dock(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|diff(int_int,PathPlanningSM_Dock_triggers)|]
								SKIP
									 		
							State_PathPlanningSM_Sleep_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								State_PathPlanningSM_Sleep(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|diff(int_int,PathPlanningSM_Sleep_triggers)|]
								SKIP
									 		
							State_PathPlanningSM_Check_end_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								State_PathPlanningSM_Check_end(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|diff(int_int,PathPlanningSM_Check_end_triggers)|]
								SKIP
									 		
							State_PathPlanningSM_Check_battery_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								State_PathPlanningSM_Check_battery(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|diff(int_int,PathPlanningSM_Check_battery_triggers)|]
								SKIP
									 		
							State_PathPlanningSM_Resume_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								State_PathPlanningSM_Resume(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|diff(int_int,PathPlanningSM_Resume_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = (
								I_PathPlanningSM_i0(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume}),
											y____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume}
									|}|]
								(
									State_PathPlanningSM_Go_up_R(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
										[|inter(CS_PathPlanningSM_Go_up_sync,union(union(union(union(union(union(union(union(CS_PathPlanningSM_Go_right_sync,CS_PathPlanningSM_Go_down_sync),CS_PathPlanningSM_Go_right_again_sync),CS_PathPlanningSM_Return_sync),CS_PathPlanningSM_Dock_sync),CS_PathPlanningSM_Sleep_sync),CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
									(
										State_PathPlanningSM_Go_right_R(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
											[|inter(CS_PathPlanningSM_Go_right_sync,union(union(union(union(union(union(union(CS_PathPlanningSM_Go_down_sync,CS_PathPlanningSM_Go_right_again_sync),CS_PathPlanningSM_Return_sync),CS_PathPlanningSM_Dock_sync),CS_PathPlanningSM_Sleep_sync),CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
										(
											State_PathPlanningSM_Go_down_R(id__,
													    const_PathPlanningSM_cliff,
													    const_PathPlanningSM_nozzle,
													    const_PathPlanningSM_battery_low,
													    const_PathPlanningSM_sleep_time,
													    const_PathPlanningSM_acc_distance)
												[|inter(CS_PathPlanningSM_Go_down_sync,union(union(union(union(union(union(CS_PathPlanningSM_Go_right_again_sync,CS_PathPlanningSM_Return_sync),CS_PathPlanningSM_Dock_sync),CS_PathPlanningSM_Sleep_sync),CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
											(
												State_PathPlanningSM_Go_right_again_R(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
													[|inter(CS_PathPlanningSM_Go_right_again_sync,union(union(union(union(union(CS_PathPlanningSM_Return_sync,CS_PathPlanningSM_Dock_sync),CS_PathPlanningSM_Sleep_sync),CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
												(
													State_PathPlanningSM_Return_R(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
														[|inter(CS_PathPlanningSM_Return_sync,union(union(union(union(CS_PathPlanningSM_Dock_sync,CS_PathPlanningSM_Sleep_sync),CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
													(
														State_PathPlanningSM_Dock_R(id__,
																    const_PathPlanningSM_cliff,
																    const_PathPlanningSM_nozzle,
																    const_PathPlanningSM_battery_low,
																    const_PathPlanningSM_sleep_time,
																    const_PathPlanningSM_acc_distance)
															[|inter(CS_PathPlanningSM_Dock_sync,union(union(union(CS_PathPlanningSM_Sleep_sync,CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
														(
															State_PathPlanningSM_Sleep_R(id__,
																	    const_PathPlanningSM_cliff,
																	    const_PathPlanningSM_nozzle,
																	    const_PathPlanningSM_battery_low,
																	    const_PathPlanningSM_sleep_time,
																	    const_PathPlanningSM_acc_distance)
																[|inter(CS_PathPlanningSM_Sleep_sync,union(union(CS_PathPlanningSM_Check_end_sync,CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
															(
																State_PathPlanningSM_Check_end_R(id__,
																		    const_PathPlanningSM_cliff,
																		    const_PathPlanningSM_nozzle,
																		    const_PathPlanningSM_battery_low,
																		    const_PathPlanningSM_sleep_time,
																		    const_PathPlanningSM_acc_distance)
																	[|inter(CS_PathPlanningSM_Check_end_sync,union(CS_PathPlanningSM_Check_battery_sync,CS_PathPlanningSM_Resume_sync))|]
																(
																	State_PathPlanningSM_Check_battery_R(id__,
																			    const_PathPlanningSM_cliff,
																			    const_PathPlanningSM_nozzle,
																			    const_PathPlanningSM_battery_low,
																			    const_PathPlanningSM_sleep_time,
																			    const_PathPlanningSM_acc_distance)
																		[|inter(CS_PathPlanningSM_Check_battery_sync,CS_PathPlanningSM_Resume_sync)|]
																	State_PathPlanningSM_Resume_R(id__,
																			    const_PathPlanningSM_cliff,
																			    const_PathPlanningSM_nozzle,
																			    const_PathPlanningSM_battery_low,
																			    const_PathPlanningSM_sleep_time,
																			    const_PathPlanningSM_acc_distance)
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
							
							-- optimized memory process
							channel getV_cycles: core_int
							channel getV_u: core_int
							channel getV_d: core_int
							channel getV_b: core_int
							
							-- individual memory processes
							Memory_cycles(x__) = ( 
								get_cycles!x__ -> Memory_cycles(x__)
								[]
								getV_cycles!x__ -> Memory_cycles(x__)
								[]
								set_cycles?x__ -> Memory_cycles(x__)
							)
							Memory_u(x__) = ( 
								get_u!x__ -> Memory_u(x__)
								[]
								getV_u!x__ -> Memory_u(x__)
								[]
								set_u?x__ -> Memory_u(x__)
								[]
								ultrasonic__!TID_PathPlanningSM_t1.in?u -> Memory_u(u)
								[]
								ultrasonic__!TID_PathPlanningSM_t4.in?u -> Memory_u(u)
								[]
								ultrasonic__!TID_PathPlanningSM_t6.in?u -> Memory_u(u)
								[]
								ultrasonic__!TID_PathPlanningSM_t7.in?u -> Memory_u(u)
								[]
								ultrasonic__!TID_PathPlanningSM_t11.in?u -> Memory_u(u)
								[]
								ultrasonic__!TID_PathPlanningSM_t2.in?u -> Memory_u(u)
							)
							Memory_d(x__) = ( 
								get_d!x__ -> Memory_d(x__)
								[]
								getV_d!x__ -> Memory_d(x__)
								[]
								set_d?x__ -> Memory_d(x__)
								[]
								displacement__!TID_PathPlanningSM_t3.in?d -> Memory_d(d)
								[]
								displacement__!TID_PathPlanningSM_t5.in?d -> Memory_d(d)
								[]
								displacement__!TID_PathPlanningSM_t8.in?d -> Memory_d(d)
								[]
								displacement__!TID_PathPlanningSM_t14.in?d -> Memory_d(d)
							)
							Memory_b(x__) = ( 
								get_b!x__ -> Memory_b(x__)
								[]
								getV_b!x__ -> Memory_b(x__)
								[]
								set_b?x__ -> Memory_b(x__)
								[]
								battery_level__!TID_PathPlanningSM_t9.in?b -> Memory_b(b)
								[]
								battery_level__!TID_PathPlanningSM_t10.in?b -> Memory_b(b)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 cycles,
								 u,
								 d,
								 b,
								 const_PathPlanningSM_cliff,
								 const_PathPlanningSM_nozzle,
								 const_PathPlanningSM_battery_low,
								 const_PathPlanningSM_sleep_time,
								 const_PathPlanningSM_acc_distance) = (
								internal__!TID_PathPlanningSM_t0 -> SKIP
								[]
								ultrasonic__!TID_PathPlanningSM_t1.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> SKIP
								[]
								displacement__!TID_PathPlanningSM_t3.in?d:{d|d <- core_int, (d>=const_PathPlanningSM_nozzle)} -> SKIP
								[]
								ultrasonic__!TID_PathPlanningSM_t4.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> SKIP
								[]
								ultrasonic__!TID_PathPlanningSM_t6.in?u:{u|u <- core_int, (u<const_PathPlanningSM_cliff)} -> SKIP
								[]
								ultrasonic__!TID_PathPlanningSM_t7.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> SKIP
								[]
								displacement__!TID_PathPlanningSM_t5.in?d:{d|d <- core_int, (d<const_PathPlanningSM_nozzle)} -> SKIP
								[]
								displacement__!TID_PathPlanningSM_t8.in?d:{d|d <- core_int, (d>=const_PathPlanningSM_nozzle)} -> SKIP
								[]
								battery_level__!TID_PathPlanningSM_t9.in?b:{b|b <- core_int, (b>const_PathPlanningSM_battery_low)} -> SKIP
								[]
								battery_level__!TID_PathPlanningSM_t10.in?b:{b|b <- core_int, (b<=const_PathPlanningSM_battery_low)} -> SKIP
								[]
								ultrasonic__!TID_PathPlanningSM_t11.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> SKIP
								[]
								charging__!TID_PathPlanningSM_t12.in -> SKIP
								[]
								internal__!TID_PathPlanningSM_t13 -> SKIP
								[]
								displacement__!TID_PathPlanningSM_t14.in?d:{d|d <- core_int, (d>=Mult(Mult(cycles, 2, core_int), const_PathPlanningSM_nozzle, core_int))} -> SKIP
								[]
								ultrasonic__!TID_PathPlanningSM_t2.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> SKIP
							
								[]
									set_cycles?x__ -> SKIP
								[]
								set_u?x__ -> SKIP
								[]
								set_d?x__ -> SKIP
								[]
								set_b?x__ -> SKIP
							 	)
							MemoryTransitions_PathPlanningSM(id__,
								 const_PathPlanningSM_cliff,
								 const_PathPlanningSM_nozzle,
								 const_PathPlanningSM_battery_low,
								 const_PathPlanningSM_sleep_time,
								 const_PathPlanningSM_acc_distance) =
								(
								getV_cycles?cycles ->	
								getV_u?u ->	
								getV_d?d ->	
								getV_b?b ->
								 MemoryTransitions(id__,
								 	 cycles,
								 	 u,
								 	 d,
								 	 b,
								 	 const_PathPlanningSM_cliff,
								 	 const_PathPlanningSM_nozzle,
								 	 const_PathPlanningSM_battery_low,
								 	 const_PathPlanningSM_sleep_time,
								 	 const_PathPlanningSM_acc_distance);
								 MemoryTransitions_PathPlanningSM(id__,
								 	 const_PathPlanningSM_cliff,
								 	 const_PathPlanningSM_nozzle,
								 	 const_PathPlanningSM_battery_low,
								 	 const_PathPlanningSM_sleep_time,
								 	 const_PathPlanningSM_acc_distance)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_PathPlanningSM = Union(
								{
									{
										Memory_cycles(0),
										Memory_u(0),
										Memory_d(0),
										Memory_b(0)
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									set_b,
									ultrasonic__.TID_PathPlanningSM_t7,
									set_d,
									displacement__.TID_PathPlanningSM_t5,
									displacement__.TID_PathPlanningSM_t3,
									ultrasonic__.TID_PathPlanningSM_t1,
									ultrasonic__.TID_PathPlanningSM_t2,
									setWC,
									getV_b,
									ultrasonic__.TID_PathPlanningSM_t11,
									ultrasonic__.TID_PathPlanningSM_t6,
									getV_d,
									ultrasonic__.TID_PathPlanningSM_t4,
									getV_cycles,
									battery_level__.TID_PathPlanningSM_t9,
									battery_level__.TID_PathPlanningSM_t10,
									set_cycles,
									set_u,
									displacement__.TID_PathPlanningSM_t14,
									getV_u,
									displacement__.TID_PathPlanningSM_t8
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_cycles,
									getWC,
									getV_b,
									getV_d,
									getV_u
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_PathPlanningSM @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_PathPlanningSM_cliff,
								 const_PathPlanningSM_nozzle,
								 const_PathPlanningSM_battery_low,
								 const_PathPlanningSM_sleep_time,
								 const_PathPlanningSM_acc_distance) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_PathPlanningSM(id__,
								 const_PathPlanningSM_cliff,
								 const_PathPlanningSM_nozzle,
								 const_PathPlanningSM_battery_low,
								 const_PathPlanningSM_sleep_time,
								 const_PathPlanningSM_acc_distance)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- {cliff}
							-- {battery_low}
							-- {cycles,nozzle}
							-- Summary of all identified named elements:
							-- {
							-- b
							-- cliff
							-- battery_low
							-- u
							-- cycles
							-- d
							-- nozzle
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_PathPlanningSM_t13,
							--		TID_PathPlanningSM_t0,
							--		TID_PathPlanningSM_t12}
							-- 1:{cliff}
							--	=> {
							--		TID_PathPlanningSM_t11,
							--		TID_PathPlanningSM_t6,
							--		TID_PathPlanningSM_t4,
							--		TID_PathPlanningSM_t1,
							--		TID_PathPlanningSM_t7,
							--		TID_PathPlanningSM_t2}
							-- 2:{battery_low}
							--	=> {
							--		TID_PathPlanningSM_t9,
							--		TID_PathPlanningSM_t10}
							-- 3:{cycles,nozzle}
							--	=> {
							--		TID_PathPlanningSM_t3,
							--		TID_PathPlanningSM_t14,
							--		TID_PathPlanningSM_t5,
							--		TID_PathPlanningSM_t8}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   internal__!TID_PathPlanningSM_t13 -> Update
									 	   []
									 	   internal__!TID_PathPlanningSM_t0 -> Update
									 	   []
									 	   charging__!TID_PathPlanningSM_t12.in -> Update
								within
									Update
							)
							MemoryTransitions_opt_1(id__,
								 const_PathPlanningSM_cliff) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   ultrasonic__!TID_PathPlanningSM_t11.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> Update
									 	   []
									 	   ultrasonic__!TID_PathPlanningSM_t6.in?u:{u|u <- core_int, (u<const_PathPlanningSM_cliff)} -> Update
									 	   []
									 	   ultrasonic__!TID_PathPlanningSM_t4.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> Update
									 	   []
									 	   ultrasonic__!TID_PathPlanningSM_t1.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> Update
									 	   []
									 	   ultrasonic__!TID_PathPlanningSM_t7.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> Update
									 	   []
									 	   ultrasonic__!TID_PathPlanningSM_t2.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> Update
								within
									Update
							)
							MemoryTransitions_opt_2(id__,
								 const_PathPlanningSM_battery_low) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   battery_level__!TID_PathPlanningSM_t9.in?b:{b|b <- core_int, (b>const_PathPlanningSM_battery_low)} -> Update
									 	   []
									 	   battery_level__!TID_PathPlanningSM_t10.in?b:{b|b <- core_int, (b<=const_PathPlanningSM_battery_low)} -> Update
								within
									Update
							)
							MemoryTransitions_opt_3(id__,
								 const_PathPlanningSM_nozzle) =
							(
								let
									Update = 
									get_cycles?cycles ->
									Current(id__,
										 cycles)
									Current(id__,
										 cycles)
									 	   = 
									 	   displacement__!TID_PathPlanningSM_t3.in?d:{d|d <- core_int, (d>=const_PathPlanningSM_nozzle)} -> Update
									 	   []
									 	   displacement__!TID_PathPlanningSM_t14.in?d:{d|d <- core_int, (d>=Mult(Mult(cycles, 2, core_int), const_PathPlanningSM_nozzle, core_int))} -> Update
									 	   []
									 	   displacement__!TID_PathPlanningSM_t5.in?d:{d|d <- core_int, (d<const_PathPlanningSM_nozzle)} -> Update
									 	   []
									 	   displacement__!TID_PathPlanningSM_t8.in?d:{d|d <- core_int, (d>=const_PathPlanningSM_nozzle)} -> Update
									 	   	 
									 	   	 []
									 	   	 set_cycles?x__ -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_b(x__) = ( 
								get_b!x__ -> Memory_opt_b(x__)
								[]
								set_b?x__ -> Memory_opt_b(x__)
							)
							Memory_opt_u(x__) = ( 
								get_u!x__ -> Memory_opt_u(x__)
								[]
								set_u?x__ -> Memory_opt_u(x__)
							)
							Memory_opt_cycles(x__) = ( 
								get_cycles!x__ -> Memory_opt_cycles(x__)
								[]
								set_cycles?x__ -> Memory_opt_cycles(x__)
							)
							Memory_opt_d(x__) = ( 
								get_d!x__ -> Memory_opt_d(x__)
								[]
								set_d?x__ -> Memory_opt_d(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) =
								sbisim(	
								  dbisim(
								    sbisim(sbisim(	
								      dbisim(
								        sbisim(dbisim(
								          sbisim(Memory_opt_cycles(0)
								              	[| {|set_cycles,get_cycles|} |] 
								              	sbisim(	
								              	  dbisim(
								              	    sbisim(sbisim(	
								              	      dbisim(
								              	        sbisim(dbisim(sbisim(Memory_opt_b(0)
								              	              	[| {|set_b,get_b|} |] 
								              	              	dbisim(sbisim(Memory_opt_u(0)
								              	              	      	[| {|get_u,set_u|} |] 
								              	              	      	dbisim(sbisim(Memory_opt_d(0)
								              	              	      	      	[| {|get_d,set_d|} |] 
								              	              	      	      	STM_core(id__,
								              	              	      	      			    const_PathPlanningSM_cliff,
								              	              	      	      			    const_PathPlanningSM_nozzle,
								              	              	      	      			    const_PathPlanningSM_battery_low,
								              	              	      	      			    const_PathPlanningSM_sleep_time,
								              	              	      	      			    const_PathPlanningSM_acc_distance)
								              	              	      	      	)\ {|get_d,set_d|}
								              	              	      	      )
								              	              	      	)\ {|get_u,set_u|}
								              	              	      )
								              	              	)\ {|set_b,get_b|}
								              	              )
								              	          	  [| {|internal__.TID_PathPlanningSM_t13,internal__.TID_PathPlanningSM_t0,charging__.TID_PathPlanningSM_t12|} |]
								              	          	  MemoryTransitions_opt_0(id__)
								              	          	  )\{||})
								              	          )
								              	      	  [| {|displacement__.TID_PathPlanningSM_t5,displacement__.TID_PathPlanningSM_t3,set_cycles,displacement__.TID_PathPlanningSM_t14,displacement__.TID_PathPlanningSM_t8|} |]
								              	      	  MemoryTransitions_opt_3(id__,
								              	      	  	 const_PathPlanningSM_nozzle)
								              	      	  )\{||})
								              	      )
								              	) \ {|set_cycles,get_cycles|}
								              )
								          	  [| {|battery_level__.TID_PathPlanningSM_t9,battery_level__.TID_PathPlanningSM_t10|} |]
								          	  MemoryTransitions_opt_2(id__,
								          	  	 const_PathPlanningSM_battery_low)
								          	  )\{||})
								          )
								      	  [| {|ultrasonic__.TID_PathPlanningSM_t7,ultrasonic__.TID_PathPlanningSM_t1,ultrasonic__.TID_PathPlanningSM_t2,ultrasonic__.TID_PathPlanningSM_t11,ultrasonic__.TID_PathPlanningSM_t6,ultrasonic__.TID_PathPlanningSM_t4|} |]
								      	  MemoryTransitions_opt_1(id__,
								      	  	 const_PathPlanningSM_cliff)
								      	  )\{||})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_cycles,set_cycles,
										get_u,set_u,
										get_d,set_d,
										get_b,set_b|},
										{||}
									)
										
									,
									{|internal__.TID_PathPlanningSM_t0,
									ultrasonic__.TID_PathPlanningSM_t1,
									displacement__.TID_PathPlanningSM_t3,
									ultrasonic__.TID_PathPlanningSM_t4,
									ultrasonic__.TID_PathPlanningSM_t6,
									ultrasonic__.TID_PathPlanningSM_t7,
									displacement__.TID_PathPlanningSM_t5,
									displacement__.TID_PathPlanningSM_t8,
									battery_level__.TID_PathPlanningSM_t9,
									battery_level__.TID_PathPlanningSM_t10,
									ultrasonic__.TID_PathPlanningSM_t11,
									charging__.TID_PathPlanningSM_t12,
									internal__.TID_PathPlanningSM_t13,
									displacement__.TID_PathPlanningSM_t14,
									ultrasonic__.TID_PathPlanningSM_t2|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_cycles,set_cycles,
									get_u,set_u,
									get_d,set_d,
									get_b,set_b|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = prioritise((((
								wbisim(STM(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_PathPlanningSM_cliff,
										 const_PathPlanningSM_nozzle,
										 const_PathPlanningSM_battery_low,
										 const_PathPlanningSM_sleep_time,
										 const_PathPlanningSM_acc_distance))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
								)\WCsets
							)
							[[
								move_forward__.x____ <- move_forward,
								turn__.x____ <- turn,
								stop__.x____ <- stop,
								ultrasonic__.x____ <- ultrasonic,
								battery_level__.x____ <- battery_level,
								charging__.x____ <- charging,
								clean__.x____ <- clean,
								displacement__.x____ <- displacement
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_PathPlanningSM_cliff,
													    const_PathPlanningSM_nozzle,
													    const_PathPlanningSM_battery_low,
													    const_PathPlanningSM_sleep_time,
													    const_PathPlanningSM_acc_distance)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_PathPlanningSM_cliff,
													    const_PathPlanningSM_nozzle,
													    const_PathPlanningSM_battery_low,
													    const_PathPlanningSM_sleep_time,
													    const_PathPlanningSM_acc_distance))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
									)[[
										move_forward__.x____ <- move_forward,
										turn__.x____ <- turn,
										stop__.x____ <- stop,
										ultrasonic__.x____ <- ultrasonic,
										battery_level__.x____ <- battery_level,
										charging__.x____ <- charging,
										clean__.x____ <- clean,
										displacement__.x____ <- displacement
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = prioritise((((
								wbisim(STM(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_PathPlanningSM_cliff,
									 const_PathPlanningSM_nozzle,
									 const_PathPlanningSM_battery_low,
									 const_PathPlanningSM_sleep_time,
									 const_PathPlanningSM_acc_distance)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = || (alpha, P) : WCset(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = timed_priority(AUX(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = timed_priority(AUX_opt(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = D__(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = timed_priority(AUX(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = ShowV(timed_priority(AUX(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance) = AUX(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
						}
					endmodule
					module stm_ref1
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_acceleration, set_acceleration: TripleAxis
							channel get_speed, set_speed: TripleAxis
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel acc__: TIDS.InOut.TripleAxis
							channel acc: InOut.TripleAxis
							channel sp__: TIDS.InOut.TripleAxis
							channel sp: InOut.TripleAxis
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_SpeedSM
							              | SID_SpeedSM_wait_input
							              | SID_SpeedSM_update_speed
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_SpeedSM_t1
							              | TID_SpeedSM_t0
							              | TID_SpeedSM_t2
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_SpeedSM_t1,	TID_SpeedSM_t2
							}
							
							int_int = {|
								acc__.TID_SpeedSM_t1,
								sp__.TID_SpeedSM_t1,
								internal__.TID_SpeedSM_t1,
								acc__.TID_SpeedSM_t2,
								sp__.TID_SpeedSM_t2,
								internal__.TID_SpeedSM_t2
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_SpeedSM_wait_input_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_SpeedSM_wait_input,SID_SpeedSM_update_speed},
								y____ <- {SID_SpeedSM_wait_input}
							|}
							
							
							SpeedSM_wait_input_triggers = {|
								internal__.TID_SpeedSM_t2,
								acc__.TID_SpeedSM_t1
							|}
							
							State_SpeedSM_wait_input(id__,
									    const_SpeedSM_t) = let
								T_SpeedSM_t1(id__,
										    const_SpeedSM_t) = acc__!TID_SpeedSM_t1.in?acceleration -> set_acceleration!acceleration ->  (exit.SID_SpeedSM_wait_input.SID_SpeedSM_wait_input -> SKIP;
													SKIP;exited.SID_SpeedSM_wait_input.SID_SpeedSM_wait_input -> SKIP;
													enter!SID_SpeedSM_wait_input!SID_SpeedSM_update_speed -> entered!SID_SpeedSM_wait_input!SID_SpeedSM_update_speed ->
													State_SpeedSM_wait_input(id__,
															    const_SpeedSM_t)
								)
								State_SpeedSM_wait_input_execute(id__,o____) = SKIP; 
									entered!o____!SID_SpeedSM_wait_input ->
									(SKIP; STOP /\ (
										T_SpeedSM_t1(id__,
												    const_SpeedSM_t)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1}) -> exit?y____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_SpeedSM_wait_input -> SKIP);
												State_SpeedSM_wait_input(id__,
														    const_SpeedSM_t)
										[] acc__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_SpeedSM_wait_input -> SKIP);
												State_SpeedSM_wait_input(id__,
														    const_SpeedSM_t)
										[] sp__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_SpeedSM_wait_input -> SKIP);
												State_SpeedSM_wait_input(id__,
														    const_SpeedSM_t)
									))
							within
								enter?x____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (State_SpeedSM_wait_input_execute(id__,x____))
							
							CS_SpeedSM_update_speed_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_SpeedSM_wait_input,SID_SpeedSM_update_speed},
								y____ <- {SID_SpeedSM_update_speed}
							|}
							
							
							SpeedSM_update_speed_triggers = {|
								internal__.TID_SpeedSM_t2,
								acc__.TID_SpeedSM_t1
							|}
							
							State_SpeedSM_update_speed(id__,
									    const_SpeedSM_t) = let
								T_SpeedSM_t2(id__,
										    const_SpeedSM_t) = internal__!TID_SpeedSM_t2 ->  exit.SID_SpeedSM_update_speed.SID_SpeedSM_update_speed -> SKIP;
													SKIP;exited.SID_SpeedSM_update_speed.SID_SpeedSM_update_speed -> SKIP;
													get_speed?speed -> true&(sp.out!speed -> SKIP);WAIT(const_SpeedSM_t);enter!SID_SpeedSM_update_speed!SID_SpeedSM_wait_input -> entered!SID_SpeedSM_update_speed!SID_SpeedSM_wait_input ->
													State_SpeedSM_update_speed(id__,
															    const_SpeedSM_t)
								State_SpeedSM_update_speed_execute(id__,o____) = get_speed?speed -> get_acceleration?acceleration -> true & (set_speed!update_TripleAxis_X(speed,Plus(TripleAxis_X(speed), Mult(TripleAxis_X(acceleration), const_SpeedSM_t, core_int), core_int)) -> SKIP);get_speed?speed -> get_acceleration?acceleration -> true & (set_speed!update_TripleAxis_Y(speed,Plus(TripleAxis_Y(speed), Mult(TripleAxis_Y(acceleration), const_SpeedSM_t, core_int), core_int)) -> SKIP);get_speed?speed -> get_acceleration?acceleration -> true & (set_speed!update_TripleAxis_Z(speed,Plus(TripleAxis_Z(speed), Mult(TripleAxis_Z(acceleration), const_SpeedSM_t, core_int), core_int)) -> SKIP); 
									entered!o____!SID_SpeedSM_update_speed ->
									(SKIP; STOP /\ (
										T_SpeedSM_t2(id__,
												    const_SpeedSM_t)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1}) -> exit?y____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (
												SKIP;
												exited!y____!SID_SpeedSM_update_speed -> SKIP);
												State_SpeedSM_update_speed(id__,
														    const_SpeedSM_t)
										[] acc__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (
												SKIP;
												exited!y____!SID_SpeedSM_update_speed -> SKIP);
												State_SpeedSM_update_speed(id__,
														    const_SpeedSM_t)
										[] sp__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (
												SKIP;
												exited!y____!SID_SpeedSM_update_speed -> SKIP);
												State_SpeedSM_update_speed(id__,
														    const_SpeedSM_t)
									))
							within
								enter?x____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (State_SpeedSM_update_speed_execute(id__,x____))
							
							
							I_SpeedSM_i0(id__,
									    const_SpeedSM_t) = let
								T_SpeedSM_t0(id__,
										    const_SpeedSM_t) = internal__!TID_SpeedSM_t0 -> get_speed?speed -> true & (set_speed!update_TripleAxis_X(speed,0) -> SKIP);get_speed?speed -> true & (set_speed!update_TripleAxis_Y(speed,0) -> SKIP);get_speed?speed -> true & (set_speed!update_TripleAxis_Z(speed,0) -> SKIP);enter!SID_SpeedSM!SID_SpeedSM_wait_input -> entered!SID_SpeedSM!SID_SpeedSM_wait_input ->
								SKIP
							within
								T_SpeedSM_t0(id__,
										    const_SpeedSM_t)
							
							
							State_SpeedSM_wait_input_R(id__,
									    const_SpeedSM_t) = 
								State_SpeedSM_wait_input(id__,
										    const_SpeedSM_t)
									[|diff(int_int,SpeedSM_wait_input_triggers)|]
								SKIP
									 		
							State_SpeedSM_update_speed_R(id__,
									    const_SpeedSM_t) = 
								State_SpeedSM_update_speed(id__,
										    const_SpeedSM_t)
									[|diff(int_int,SpeedSM_update_speed_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_SpeedSM_t) = (
								I_SpeedSM_i0(id__,
										    const_SpeedSM_t)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_SpeedSM_wait_input,SID_SpeedSM_update_speed}),
											y____ <- {SID_SpeedSM_wait_input,SID_SpeedSM_update_speed}
									|}|]
								(
									State_SpeedSM_wait_input_R(id__,
											    const_SpeedSM_t)
										[|inter(CS_SpeedSM_wait_input_sync,CS_SpeedSM_update_speed_sync)|]
									State_SpeedSM_update_speed_R(id__,
											    const_SpeedSM_t)
								)
							)
							
							-- optimized memory process
							channel getV_acceleration: TripleAxis
							channel getV_speed: TripleAxis
							
							-- individual memory processes
							Memory_acceleration(x__) = ( 
								get_acceleration!x__ -> Memory_acceleration(x__)
								[]
								getV_acceleration!x__ -> Memory_acceleration(x__)
								[]
								set_acceleration?x__ -> Memory_acceleration(x__)
								[]
								acc__!TID_SpeedSM_t1.in?acceleration -> Memory_acceleration(acceleration)
							)
							Memory_speed(x__) = ( 
								get_speed!x__ -> Memory_speed(x__)
								[]
								getV_speed!x__ -> Memory_speed(x__)
								[]
								set_speed?x__ -> Memory_speed(x__)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 acceleration,
								 speed,
								 const_SpeedSM_t) = (
								acc__!TID_SpeedSM_t1.in?acceleration -> SKIP
								[]
								internal__!TID_SpeedSM_t0 -> SKIP
								[]
								internal__!TID_SpeedSM_t2 -> SKIP
							
								[]
									set_acceleration?x__ -> SKIP
								[]
								set_speed?x__ -> SKIP
							 	)
							MemoryTransitions_SpeedSM(id__,
								 const_SpeedSM_t) =
								(
								getV_acceleration?acceleration ->	
								getV_speed?speed ->
								 MemoryTransitions(id__,
								 	 acceleration,
								 	 speed,
								 	 const_SpeedSM_t);
								 MemoryTransitions_SpeedSM(id__,
								 	 const_SpeedSM_t)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_SpeedSM = Union(
								{
									{
										Memory_acceleration((0,0,0)),
										Memory_speed((0,0,0))
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									set_speed,
									acc__.TID_SpeedSM_t1,
									getV_speed,
									set_acceleration,
									setWC,
									getV_acceleration
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_speed,
									getWC,
									getV_acceleration
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_SpeedSM @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_SpeedSM_t) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_SpeedSM(id__,
								 const_SpeedSM_t)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- speed
							-- acceleration
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_SpeedSM_t2,
							--		TID_SpeedSM_t0,
							--		TID_SpeedSM_t1}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   internal__!TID_SpeedSM_t2 -> Update
									 	   []
									 	   internal__!TID_SpeedSM_t0 -> Update
									 	   []
									 	   acc__!TID_SpeedSM_t1.in?acceleration -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_speed(x__) = ( 
								get_speed!x__ -> Memory_opt_speed(x__)
								[]
								set_speed?x__ -> Memory_opt_speed(x__)
							)
							Memory_opt_acceleration(x__) = ( 
								get_acceleration!x__ -> Memory_opt_acceleration(x__)
								[]
								set_acceleration?x__ -> Memory_opt_acceleration(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_SpeedSM_t) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_speed((0,0,0))
								          	[| {|set_speed,get_speed|} |] 
								          	dbisim(sbisim(Memory_opt_acceleration((0,0,0))
								          	      	[| {|get_acceleration,set_acceleration|} |] 
								          	      	STM_core(id__,
								          	      			    const_SpeedSM_t)
								          	      	)\ {|get_acceleration,set_acceleration|}
								          	      )
								          	)\ {|set_speed,get_speed|}
								          )
								      	  [| {|internal__.TID_SpeedSM_t0,internal__.TID_SpeedSM_t2,acc__.TID_SpeedSM_t1|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{||})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_acceleration,set_acceleration,
										get_speed,set_speed|},
										{||}
									)
										
									,
									{|acc__.TID_SpeedSM_t1,
									internal__.TID_SpeedSM_t0,
									internal__.TID_SpeedSM_t2|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_acceleration,set_acceleration,
									get_speed,set_speed|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_SpeedSM_t) = prioritise((((
								wbisim(STM(id__,
										    const_SpeedSM_t))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_SpeedSM_t))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_SpeedSM_t)
								)\WCsets
							)
							[[
								acc__.x____ <- acc,
								sp__.x____ <- sp
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_SpeedSM_t) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_SpeedSM_t)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_SpeedSM_t))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_SpeedSM_t) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_SpeedSM_t)
									)[[
										acc__.x____ <- acc,
										sp__.x____ <- sp
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_SpeedSM_t) = prioritise((((
								wbisim(STM(id__,
										    const_SpeedSM_t))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_SpeedSM_t)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_SpeedSM_t))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_SpeedSM_t) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_SpeedSM_t) = || (alpha, P) : WCset(id__,
									    const_SpeedSM_t) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_SpeedSM_t) = timed_priority(AUX(id__,
									    const_SpeedSM_t) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_SpeedSM_t) = timed_priority(AUX_opt(id__,
									    const_SpeedSM_t) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_SpeedSM_t) = D__(id__,
									    const_SpeedSM_t)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_SpeedSM_t) = timed_priority(AUX(id__,
									    const_SpeedSM_t) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_SpeedSM_t) = ShowV(timed_priority(AUX(id__,
									    const_SpeedSM_t) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_SpeedSM_t) = AUX(id__,
									    const_SpeedSM_t)
						}
					endmodule
					module stm_ref2
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_acceleration, set_acceleration: TripleAxis
							channel get_speed, set_speed: TripleAxis
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel acc__: TIDS.InOut.TripleAxis
							channel acc: InOut.TripleAxis
							channel sp__: TIDS.InOut.TripleAxis
							channel sp: InOut.TripleAxis
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_SpeedSM
							              | SID_SpeedSM_wait_input
							              | SID_SpeedSM_update_speed
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_SpeedSM_t1
							              | TID_SpeedSM_t0
							              | TID_SpeedSM_t2
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_SpeedSM_t1,	TID_SpeedSM_t2
							}
							
							int_int = {|
								acc__.TID_SpeedSM_t1,
								sp__.TID_SpeedSM_t1,
								internal__.TID_SpeedSM_t1,
								acc__.TID_SpeedSM_t2,
								sp__.TID_SpeedSM_t2,
								internal__.TID_SpeedSM_t2
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_SpeedSM_wait_input_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_SpeedSM_wait_input,SID_SpeedSM_update_speed},
								y____ <- {SID_SpeedSM_wait_input}
							|}
							
							
							SpeedSM_wait_input_triggers = {|
								internal__.TID_SpeedSM_t2,
								acc__.TID_SpeedSM_t1
							|}
							
							State_SpeedSM_wait_input(id__,
									    const_SpeedSM_t) = let
								T_SpeedSM_t1(id__,
										    const_SpeedSM_t) = acc__!TID_SpeedSM_t1.in?acceleration -> set_acceleration!acceleration ->  (exit.SID_SpeedSM_wait_input.SID_SpeedSM_wait_input -> SKIP;
													SKIP;exited.SID_SpeedSM_wait_input.SID_SpeedSM_wait_input -> SKIP;
													enter!SID_SpeedSM_wait_input!SID_SpeedSM_update_speed -> entered!SID_SpeedSM_wait_input!SID_SpeedSM_update_speed ->
													State_SpeedSM_wait_input(id__,
															    const_SpeedSM_t)
								)
								State_SpeedSM_wait_input_execute(id__,o____) = SKIP; 
									entered!o____!SID_SpeedSM_wait_input ->
									(SKIP; STOP /\ (
										T_SpeedSM_t1(id__,
												    const_SpeedSM_t)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1}) -> exit?y____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_SpeedSM_wait_input -> SKIP);
												State_SpeedSM_wait_input(id__,
														    const_SpeedSM_t)
										[] acc__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_SpeedSM_wait_input -> SKIP);
												State_SpeedSM_wait_input(id__,
														    const_SpeedSM_t)
										[] sp__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_SpeedSM_wait_input -> SKIP);
												State_SpeedSM_wait_input(id__,
														    const_SpeedSM_t)
									))
							within
								enter?x____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (State_SpeedSM_wait_input_execute(id__,x____))
							
							CS_SpeedSM_update_speed_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_SpeedSM_wait_input,SID_SpeedSM_update_speed},
								y____ <- {SID_SpeedSM_update_speed}
							|}
							
							
							SpeedSM_update_speed_triggers = {|
								internal__.TID_SpeedSM_t2,
								acc__.TID_SpeedSM_t1
							|}
							
							State_SpeedSM_update_speed(id__,
									    const_SpeedSM_t) = let
								T_SpeedSM_t2(id__,
										    const_SpeedSM_t) = internal__!TID_SpeedSM_t2 ->  exit.SID_SpeedSM_update_speed.SID_SpeedSM_update_speed -> SKIP;
													SKIP;exited.SID_SpeedSM_update_speed.SID_SpeedSM_update_speed -> SKIP;
													get_speed?speed -> true&(sp.out!speed -> SKIP);WAIT(const_SpeedSM_t);enter!SID_SpeedSM_update_speed!SID_SpeedSM_wait_input -> entered!SID_SpeedSM_update_speed!SID_SpeedSM_wait_input ->
													State_SpeedSM_update_speed(id__,
															    const_SpeedSM_t)
								State_SpeedSM_update_speed_execute(id__,o____) = get_speed?speed -> get_acceleration?acceleration -> true & (set_speed!update_TripleAxis_X(speed,Plus(TripleAxis_X(speed), Mult(TripleAxis_X(acceleration), const_SpeedSM_t, core_int), core_int)) -> SKIP);get_speed?speed -> get_acceleration?acceleration -> true & (set_speed!update_TripleAxis_Y(speed,Plus(TripleAxis_Y(speed), Mult(TripleAxis_Y(acceleration), const_SpeedSM_t, core_int), core_int)) -> SKIP);get_speed?speed -> get_acceleration?acceleration -> true & (set_speed!update_TripleAxis_Z(speed,Plus(TripleAxis_Z(speed), Mult(TripleAxis_Z(acceleration), const_SpeedSM_t, core_int), core_int)) -> SKIP); 
									entered!o____!SID_SpeedSM_update_speed ->
									(SKIP; STOP /\ (
										T_SpeedSM_t2(id__,
												    const_SpeedSM_t)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1}) -> exit?y____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (
												SKIP;
												exited!y____!SID_SpeedSM_update_speed -> SKIP);
												State_SpeedSM_update_speed(id__,
														    const_SpeedSM_t)
										[] acc__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (
												SKIP;
												exited!y____!SID_SpeedSM_update_speed -> SKIP);
												State_SpeedSM_update_speed(id__,
														    const_SpeedSM_t)
										[] sp__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (
												SKIP;
												exited!y____!SID_SpeedSM_update_speed -> SKIP);
												State_SpeedSM_update_speed(id__,
														    const_SpeedSM_t)
									))
							within
								enter?x____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (State_SpeedSM_update_speed_execute(id__,x____))
							
							
							I_SpeedSM_i0(id__,
									    const_SpeedSM_t) = let
								T_SpeedSM_t0(id__,
										    const_SpeedSM_t) = internal__!TID_SpeedSM_t0 -> get_speed?speed -> true & (set_speed!update_TripleAxis_X(speed,0) -> SKIP);get_speed?speed -> true & (set_speed!update_TripleAxis_Y(speed,0) -> SKIP);get_speed?speed -> true & (set_speed!update_TripleAxis_Z(speed,0) -> SKIP);enter!SID_SpeedSM!SID_SpeedSM_wait_input -> entered!SID_SpeedSM!SID_SpeedSM_wait_input ->
								SKIP
							within
								T_SpeedSM_t0(id__,
										    const_SpeedSM_t)
							
							
							State_SpeedSM_wait_input_R(id__,
									    const_SpeedSM_t) = 
								State_SpeedSM_wait_input(id__,
										    const_SpeedSM_t)
									[|diff(int_int,SpeedSM_wait_input_triggers)|]
								SKIP
									 		
							State_SpeedSM_update_speed_R(id__,
									    const_SpeedSM_t) = 
								State_SpeedSM_update_speed(id__,
										    const_SpeedSM_t)
									[|diff(int_int,SpeedSM_update_speed_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_SpeedSM_t) = (
								I_SpeedSM_i0(id__,
										    const_SpeedSM_t)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_SpeedSM_wait_input,SID_SpeedSM_update_speed}),
											y____ <- {SID_SpeedSM_wait_input,SID_SpeedSM_update_speed}
									|}|]
								(
									State_SpeedSM_wait_input_R(id__,
											    const_SpeedSM_t)
										[|inter(CS_SpeedSM_wait_input_sync,CS_SpeedSM_update_speed_sync)|]
									State_SpeedSM_update_speed_R(id__,
											    const_SpeedSM_t)
								)
							)
							
							-- optimized memory process
							channel getV_acceleration: TripleAxis
							channel getV_speed: TripleAxis
							
							-- individual memory processes
							Memory_acceleration(x__) = ( 
								get_acceleration!x__ -> Memory_acceleration(x__)
								[]
								getV_acceleration!x__ -> Memory_acceleration(x__)
								[]
								set_acceleration?x__ -> Memory_acceleration(x__)
								[]
								acc__!TID_SpeedSM_t1.in?acceleration -> Memory_acceleration(acceleration)
							)
							Memory_speed(x__) = ( 
								get_speed!x__ -> Memory_speed(x__)
								[]
								getV_speed!x__ -> Memory_speed(x__)
								[]
								set_speed?x__ -> Memory_speed(x__)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 acceleration,
								 speed,
								 const_SpeedSM_t) = (
								acc__!TID_SpeedSM_t1.in?acceleration -> SKIP
								[]
								internal__!TID_SpeedSM_t0 -> SKIP
								[]
								internal__!TID_SpeedSM_t2 -> SKIP
							
								[]
									set_acceleration?x__ -> SKIP
								[]
								set_speed?x__ -> SKIP
							 	)
							MemoryTransitions_SpeedSM(id__,
								 const_SpeedSM_t) =
								(
								getV_acceleration?acceleration ->	
								getV_speed?speed ->
								 MemoryTransitions(id__,
								 	 acceleration,
								 	 speed,
								 	 const_SpeedSM_t);
								 MemoryTransitions_SpeedSM(id__,
								 	 const_SpeedSM_t)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_SpeedSM = Union(
								{
									{
										Memory_acceleration((0,0,0)),
										Memory_speed((0,0,0))
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									set_speed,
									acc__.TID_SpeedSM_t1,
									getV_speed,
									set_acceleration,
									setWC,
									getV_acceleration
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_speed,
									getWC,
									getV_acceleration
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_SpeedSM @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_SpeedSM_t) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_SpeedSM(id__,
								 const_SpeedSM_t)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- speed
							-- acceleration
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_SpeedSM_t1,
							--		TID_SpeedSM_t2,
							--		TID_SpeedSM_t0}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   acc__!TID_SpeedSM_t1.in?acceleration -> Update
									 	   []
									 	   internal__!TID_SpeedSM_t2 -> Update
									 	   []
									 	   internal__!TID_SpeedSM_t0 -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_speed(x__) = ( 
								get_speed!x__ -> Memory_opt_speed(x__)
								[]
								set_speed?x__ -> Memory_opt_speed(x__)
							)
							Memory_opt_acceleration(x__) = ( 
								get_acceleration!x__ -> Memory_opt_acceleration(x__)
								[]
								set_acceleration?x__ -> Memory_opt_acceleration(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_SpeedSM_t) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_speed((0,0,0))
								          	[| {|set_speed,get_speed|} |] 
								          	dbisim(sbisim(Memory_opt_acceleration((0,0,0))
								          	      	[| {|get_acceleration,set_acceleration|} |] 
								          	      	STM_core(id__,
								          	      			    const_SpeedSM_t)
								          	      	)\ {|get_acceleration,set_acceleration|}
								          	      )
								          	)\ {|set_speed,get_speed|}
								          )
								      	  [| {|internal__.TID_SpeedSM_t0,internal__.TID_SpeedSM_t2,acc__.TID_SpeedSM_t1|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{||})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_acceleration,set_acceleration,
										get_speed,set_speed|},
										{||}
									)
										
									,
									{|acc__.TID_SpeedSM_t1,
									internal__.TID_SpeedSM_t0,
									internal__.TID_SpeedSM_t2|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_acceleration,set_acceleration,
									get_speed,set_speed|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_SpeedSM_t) = prioritise((((
								wbisim(STM(id__,
										    const_SpeedSM_t))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_SpeedSM_t))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_SpeedSM_t)
								)\WCsets
							)
							[[
								acc__.x____ <- acc,
								sp__.x____ <- sp
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_SpeedSM_t) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_SpeedSM_t)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_SpeedSM_t))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_SpeedSM_t) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_SpeedSM_t)
									)[[
										acc__.x____ <- acc,
										sp__.x____ <- sp
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_SpeedSM_t) = prioritise((((
								wbisim(STM(id__,
										    const_SpeedSM_t))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_SpeedSM_t)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_SpeedSM_t))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_SpeedSM_t) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_SpeedSM_t) = || (alpha, P) : WCset(id__,
									    const_SpeedSM_t) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_SpeedSM_t) = timed_priority(AUX(id__,
									    const_SpeedSM_t) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_SpeedSM_t) = timed_priority(AUX_opt(id__,
									    const_SpeedSM_t) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_SpeedSM_t) = D__(id__,
									    const_SpeedSM_t)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_SpeedSM_t) = timed_priority(AUX(id__,
									    const_SpeedSM_t) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_SpeedSM_t) = ShowV(timed_priority(AUX(id__,
									    const_SpeedSM_t) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_SpeedSM_t) = AUX(id__,
									    const_SpeedSM_t)
						}
					endmodule
					module stm_ref3
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_d, set_d: core_int
							channel get_speed, set_speed: TripleAxis
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel sp__: TIDS.InOut.TripleAxis
							channel sp: InOut.TripleAxis
							channel displacement__: TIDS.InOut.core_int
							channel displacement: InOut.core_int
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_DisplacementSM
							              | SID_DisplacementSM_wait_input
							              | SID_DisplacementSM_update_displacement
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_DisplacementSM_t2
							              | TID_DisplacementSM_t3
							              | TID_DisplacementSM_t0
							              | TID_DisplacementSM_t1
							              | TID_DisplacementSM_t4
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_DisplacementSM_t2,	TID_DisplacementSM_t3,	TID_DisplacementSM_t4
							}
							
							int_int = {|
								sp__.TID_DisplacementSM_t2,
								displacement__.TID_DisplacementSM_t2,
								internal__.TID_DisplacementSM_t2,
								sp__.TID_DisplacementSM_t3,
								displacement__.TID_DisplacementSM_t3,
								internal__.TID_DisplacementSM_t3,
								sp__.TID_DisplacementSM_t4,
								displacement__.TID_DisplacementSM_t4,
								internal__.TID_DisplacementSM_t4
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_DisplacementSM_wait_input_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_DisplacementSM_wait_input,SID_DisplacementSM_update_displacement},
								y____ <- {SID_DisplacementSM_wait_input}
							|}
							
							
							DisplacementSM_wait_input_triggers = {|
								internal__.TID_DisplacementSM_t3,
								sp__.TID_DisplacementSM_t2,
								internal__.TID_DisplacementSM_t1,
								displacement__.TID_DisplacementSM_t4
							|}
							
							State_DisplacementSM_wait_input(id__,
									    const_DisplacementSM_t) = let
								T_DisplacementSM_t2(id__,
										    const_DisplacementSM_t) = sp__!TID_DisplacementSM_t2.in?speed -> set_speed!speed ->  (exit.SID_DisplacementSM_wait_input.SID_DisplacementSM_wait_input -> SKIP;
													SKIP;exited.SID_DisplacementSM_wait_input.SID_DisplacementSM_wait_input -> SKIP;
													enter!SID_DisplacementSM_wait_input!SID_DisplacementSM_update_displacement -> entered!SID_DisplacementSM_wait_input!SID_DisplacementSM_update_displacement ->
													State_DisplacementSM_wait_input(id__,
															    const_DisplacementSM_t)
								)
								T_DisplacementSM_t4(id__,
										    const_DisplacementSM_t) = displacement__!TID_DisplacementSM_t4.in?d -> set_d!d ->  (exit.SID_DisplacementSM_wait_input.SID_DisplacementSM_wait_input -> SKIP;
													SKIP;exited.SID_DisplacementSM_wait_input.SID_DisplacementSM_wait_input -> SKIP;
													J_DisplacementSM_j0(id__,
															    const_DisplacementSM_t))
								J_DisplacementSM_j0(id__,
										    const_DisplacementSM_t) = (
											(internal__!TID_DisplacementSM_t1 -> enter!SID_DisplacementSM_wait_input!SID_DisplacementSM_wait_input -> State_DisplacementSM_wait_input_execute(id__,SID_DisplacementSM_wait_input)
											)
											)
								State_DisplacementSM_wait_input_execute(id__,o____) = SKIP; 
									entered!o____!SID_DisplacementSM_wait_input ->
									(SKIP; STOP /\ (
										T_DisplacementSM_t2(id__,
												    const_DisplacementSM_t)[]
										T_DisplacementSM_t4(id__,
												    const_DisplacementSM_t)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_DisplacementSM_t3,TID_DisplacementSM_t2,TID_DisplacementSM_t1,TID_DisplacementSM_t4}) -> exit?y____:diff(SIDS,{SID_DisplacementSM_wait_input})!SID_DisplacementSM_wait_input -> (
												SKIP;
												exited!y____!SID_DisplacementSM_wait_input -> SKIP);
												State_DisplacementSM_wait_input(id__,
														    const_DisplacementSM_t)
										[] sp__?x____:diff(ITIDS,{NULLTRANSITION__,TID_DisplacementSM_t3,TID_DisplacementSM_t2,TID_DisplacementSM_t1,TID_DisplacementSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_DisplacementSM_wait_input})!SID_DisplacementSM_wait_input -> (
												SKIP;
												exited!y____!SID_DisplacementSM_wait_input -> SKIP);
												State_DisplacementSM_wait_input(id__,
														    const_DisplacementSM_t)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_DisplacementSM_t3,TID_DisplacementSM_t2,TID_DisplacementSM_t1,TID_DisplacementSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_DisplacementSM_wait_input})!SID_DisplacementSM_wait_input -> (
												SKIP;
												exited!y____!SID_DisplacementSM_wait_input -> SKIP);
												State_DisplacementSM_wait_input(id__,
														    const_DisplacementSM_t)
									))
							within
								enter?x____:diff(SIDS,{SID_DisplacementSM_wait_input})!SID_DisplacementSM_wait_input -> (State_DisplacementSM_wait_input_execute(id__,x____))
							
							CS_DisplacementSM_update_displacement_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_DisplacementSM_wait_input,SID_DisplacementSM_update_displacement},
								y____ <- {SID_DisplacementSM_update_displacement}
							|}
							
							
							DisplacementSM_update_displacement_triggers = {|
								internal__.TID_DisplacementSM_t3,
								sp__.TID_DisplacementSM_t2,
								internal__.TID_DisplacementSM_t1,
								displacement__.TID_DisplacementSM_t4
							|}
							
							State_DisplacementSM_update_displacement(id__,
									    const_DisplacementSM_t) = let
								T_DisplacementSM_t3(id__,
										    const_DisplacementSM_t) = internal__!TID_DisplacementSM_t3 ->  exit.SID_DisplacementSM_update_displacement.SID_DisplacementSM_update_displacement -> SKIP;
													SKIP;exited.SID_DisplacementSM_update_displacement.SID_DisplacementSM_update_displacement -> SKIP;
													get_d?d -> true&(displacement.out!d -> SKIP);WAIT(const_DisplacementSM_t);enter!SID_DisplacementSM_update_displacement!SID_DisplacementSM_wait_input -> entered!SID_DisplacementSM_update_displacement!SID_DisplacementSM_wait_input ->
													State_DisplacementSM_update_displacement(id__,
															    const_DisplacementSM_t)
								State_DisplacementSM_update_displacement_execute(id__,o____) = get_d?d -> get_speed?speed -> true & (set_d!Plus(d, Mult(TripleAxis_X(speed), const_DisplacementSM_t, core_int), core_int) -> SKIP); 
									entered!o____!SID_DisplacementSM_update_displacement ->
									(SKIP; STOP /\ (
										T_DisplacementSM_t3(id__,
												    const_DisplacementSM_t)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_DisplacementSM_t3,TID_DisplacementSM_t2,TID_DisplacementSM_t1,TID_DisplacementSM_t4}) -> exit?y____:diff(SIDS,{SID_DisplacementSM_update_displacement})!SID_DisplacementSM_update_displacement -> (
												SKIP;
												exited!y____!SID_DisplacementSM_update_displacement -> SKIP);
												State_DisplacementSM_update_displacement(id__,
														    const_DisplacementSM_t)
										[] sp__?x____:diff(ITIDS,{NULLTRANSITION__,TID_DisplacementSM_t3,TID_DisplacementSM_t2,TID_DisplacementSM_t1,TID_DisplacementSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_DisplacementSM_update_displacement})!SID_DisplacementSM_update_displacement -> (
												SKIP;
												exited!y____!SID_DisplacementSM_update_displacement -> SKIP);
												State_DisplacementSM_update_displacement(id__,
														    const_DisplacementSM_t)
										[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_DisplacementSM_t3,TID_DisplacementSM_t2,TID_DisplacementSM_t1,TID_DisplacementSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_DisplacementSM_update_displacement})!SID_DisplacementSM_update_displacement -> (
												SKIP;
												exited!y____!SID_DisplacementSM_update_displacement -> SKIP);
												State_DisplacementSM_update_displacement(id__,
														    const_DisplacementSM_t)
									))
							within
								enter?x____:diff(SIDS,{SID_DisplacementSM_update_displacement})!SID_DisplacementSM_update_displacement -> (State_DisplacementSM_update_displacement_execute(id__,x____))
							
							
							I_DisplacementSM_i0(id__,
									    const_DisplacementSM_t) = let
								J_DisplacementSM_j0(id__,
										    const_DisplacementSM_t) = (
											(internal__!TID_DisplacementSM_t1 -> enter!SID_DisplacementSM!SID_DisplacementSM_wait_input -> entered!SID_DisplacementSM!SID_DisplacementSM_wait_input ->
											SKIP
											)
											)
								T_DisplacementSM_t0(id__,
										    const_DisplacementSM_t) = internal__!TID_DisplacementSM_t0 -> true & (set_d!0 -> SKIP);J_DisplacementSM_j0(id__,
										    const_DisplacementSM_t)
							within
								T_DisplacementSM_t0(id__,
										    const_DisplacementSM_t)
							
							
							State_DisplacementSM_wait_input_R(id__,
									    const_DisplacementSM_t) = 
								State_DisplacementSM_wait_input(id__,
										    const_DisplacementSM_t)
									[|diff(int_int,DisplacementSM_wait_input_triggers)|]
								SKIP
									 		
							State_DisplacementSM_update_displacement_R(id__,
									    const_DisplacementSM_t) = 
								State_DisplacementSM_update_displacement(id__,
										    const_DisplacementSM_t)
									[|diff(int_int,DisplacementSM_update_displacement_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_DisplacementSM_t) = (
								I_DisplacementSM_i0(id__,
										    const_DisplacementSM_t)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_DisplacementSM_wait_input,SID_DisplacementSM_update_displacement}),
											y____ <- {SID_DisplacementSM_wait_input,SID_DisplacementSM_update_displacement}
									|}|]
								(
									State_DisplacementSM_wait_input_R(id__,
											    const_DisplacementSM_t)
										[|inter(CS_DisplacementSM_wait_input_sync,CS_DisplacementSM_update_displacement_sync)|]
									State_DisplacementSM_update_displacement_R(id__,
											    const_DisplacementSM_t)
								)
							)
							
							-- optimized memory process
							channel getV_d: core_int
							channel getV_speed: TripleAxis
							
							-- individual memory processes
							Memory_d(x__) = ( 
								get_d!x__ -> Memory_d(x__)
								[]
								getV_d!x__ -> Memory_d(x__)
								[]
								set_d?x__ -> Memory_d(x__)
								[]
								displacement__!TID_DisplacementSM_t4.in?d -> Memory_d(d)
							)
							Memory_speed(x__) = ( 
								get_speed!x__ -> Memory_speed(x__)
								[]
								getV_speed!x__ -> Memory_speed(x__)
								[]
								set_speed?x__ -> Memory_speed(x__)
								[]
								sp__!TID_DisplacementSM_t2.in?speed -> Memory_speed(speed)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 d,
								 speed,
								 const_DisplacementSM_t) = (
								sp__!TID_DisplacementSM_t2.in?speed -> SKIP
								[]
								internal__!TID_DisplacementSM_t3 -> SKIP
								[]
								internal__!TID_DisplacementSM_t0 -> SKIP
								[]
								internal__!TID_DisplacementSM_t1 -> SKIP
								[]
								displacement__!TID_DisplacementSM_t4.in?d:{d|d <- core_int, (d==0)} -> SKIP
							
								[]
									set_d?x__ -> SKIP
								[]
								set_speed?x__ -> SKIP
							 	)
							MemoryTransitions_DisplacementSM(id__,
								 const_DisplacementSM_t) =
								(
								getV_d?d ->	
								getV_speed?speed ->
								 MemoryTransitions(id__,
								 	 d,
								 	 speed,
								 	 const_DisplacementSM_t);
								 MemoryTransitions_DisplacementSM(id__,
								 	 const_DisplacementSM_t)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_DisplacementSM = Union(
								{
									{
										Memory_d(0),
										Memory_speed((0,0,0))
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									displacement__.TID_DisplacementSM_t4,
									set_d,
									set_speed,
									sp__.TID_DisplacementSM_t2,
									getV_speed,
									setWC,
									getV_d
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_speed,
									getWC,
									getV_d
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_DisplacementSM @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_DisplacementSM_t) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_DisplacementSM(id__,
								 const_DisplacementSM_t)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- d
							-- speed
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_DisplacementSM_t3,
							--		TID_DisplacementSM_t0,
							--		TID_DisplacementSM_t1,
							--		TID_DisplacementSM_t2,
							--		TID_DisplacementSM_t4}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   internal__!TID_DisplacementSM_t3 -> Update
									 	   []
									 	   internal__!TID_DisplacementSM_t0 -> Update
									 	   []
									 	   internal__!TID_DisplacementSM_t1 -> Update
									 	   []
									 	   sp__!TID_DisplacementSM_t2.in?speed -> Update
									 	   []
									 	   displacement__!TID_DisplacementSM_t4.in?d:{d|d <- core_int, (d==0)} -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_d(x__) = ( 
								get_d!x__ -> Memory_opt_d(x__)
								[]
								set_d?x__ -> Memory_opt_d(x__)
							)
							Memory_opt_speed(x__) = ( 
								get_speed!x__ -> Memory_opt_speed(x__)
								[]
								set_speed?x__ -> Memory_opt_speed(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_DisplacementSM_t) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_d(0)
								          	[| {|get_d,set_d|} |] 
								          	dbisim(sbisim(Memory_opt_speed((0,0,0))
								          	      	[| {|set_speed,get_speed|} |] 
								          	      	STM_core(id__,
								          	      			    const_DisplacementSM_t)
								          	      	)\ {|set_speed,get_speed|}
								          	      )
								          	)\ {|get_d,set_d|}
								          )
								      	  [| {|displacement__.TID_DisplacementSM_t4,sp__.TID_DisplacementSM_t2,internal__.TID_DisplacementSM_t1,internal__.TID_DisplacementSM_t0,internal__.TID_DisplacementSM_t3|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{|internal__.TID_DisplacementSM_t1|})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_d,set_d,
										get_speed,set_speed|},
										{||}
									)
										
									,
									{|sp__.TID_DisplacementSM_t2,
									internal__.TID_DisplacementSM_t3,
									internal__.TID_DisplacementSM_t0,
									internal__.TID_DisplacementSM_t1,
									displacement__.TID_DisplacementSM_t4|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_d,set_d,
									get_speed,set_speed|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_DisplacementSM_t) = prioritise((((
								wbisim(STM(id__,
										    const_DisplacementSM_t))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_DisplacementSM_t))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_DisplacementSM_t)
								)\WCsets
							)
							[[
								sp__.x____ <- sp,
								displacement__.x____ <- displacement
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_DisplacementSM_t) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_DisplacementSM_t)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_DisplacementSM_t))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_DisplacementSM_t) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_DisplacementSM_t)
									)[[
										sp__.x____ <- sp,
										displacement__.x____ <- displacement
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_DisplacementSM_t) = prioritise((((
								wbisim(STM(id__,
										    const_DisplacementSM_t))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_DisplacementSM_t)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_DisplacementSM_t))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_DisplacementSM_t) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_DisplacementSM_t) = || (alpha, P) : WCset(id__,
									    const_DisplacementSM_t) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_DisplacementSM_t) = timed_priority(AUX(id__,
									    const_DisplacementSM_t) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_DisplacementSM_t) = timed_priority(AUX_opt(id__,
									    const_DisplacementSM_t) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_DisplacementSM_t) = D__(id__,
									    const_DisplacementSM_t)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_DisplacementSM_t) = timed_priority(AUX(id__,
									    const_DisplacementSM_t) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_DisplacementSM_t) = ShowV(timed_priority(AUX(id__,
									    const_DisplacementSM_t) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_DisplacementSM_t) = AUX(id__,
									    const_DisplacementSM_t)
						}
					endmodule
					module stm_ref4
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_clean_var, set_clean_var: core_boolean
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel clean__: TIDS.InOut.core_boolean
							channel clean: InOut.core_boolean
							
							-- declaring call and ret events for undefined operations
							channel brushCall: core_int
							channel vacuumCall: core_int
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							CALL__brush(id__,
									    x) =  EDeadline(brushCall.x,0)		
							CALL__vacuum(id__,
									    x) =  EDeadline(vacuumCall.x,0)		
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_CleanSM
							              | SID_CleanSM_clean
							              | SID_CleanSM_dont_clean
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_CleanSM_t0
							              | TID_CleanSM_t1
							              | TID_CleanSM_t2
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_CleanSM_t1,	TID_CleanSM_t2
							}
							
							int_int = {|
								clean__.TID_CleanSM_t1,
								internal__.TID_CleanSM_t1,
								clean__.TID_CleanSM_t2,
								internal__.TID_CleanSM_t2
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_CleanSM_clean_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_CleanSM_clean,SID_CleanSM_dont_clean},
								y____ <- {SID_CleanSM_clean}
							|}
							
							
							CleanSM_clean_triggers = {|
								clean__.TID_CleanSM_t1,
								clean__.TID_CleanSM_t2
							|}
							
							State_CleanSM_clean(id__,
									    const_CleanSM_voltage) = let
								T_CleanSM_t2(id__,
										    const_CleanSM_voltage) = clean__!TID_CleanSM_t2.in?clean_var -> set_clean_var!clean_var ->  (exit.SID_CleanSM_clean.SID_CleanSM_clean -> SKIP;
													SKIP;exited.SID_CleanSM_clean.SID_CleanSM_clean -> SKIP;
													enter!SID_CleanSM_clean!SID_CleanSM_dont_clean -> entered!SID_CleanSM_clean!SID_CleanSM_dont_clean ->
													State_CleanSM_clean(id__,
															    const_CleanSM_voltage)
								)
								State_CleanSM_clean_execute(id__,o____) = true&CALL__brush(
											id__,
											const_CleanSM_voltage
										);true&CALL__vacuum(
											id__,
											const_CleanSM_voltage
										); 
									entered!o____!SID_CleanSM_clean ->
									(SKIP; STOP /\ (
										T_CleanSM_t2(id__,
												    const_CleanSM_voltage)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t1,TID_CleanSM_t2}) -> exit?y____:diff(SIDS,{SID_CleanSM_clean})!SID_CleanSM_clean -> (
												SKIP;
												exited!y____!SID_CleanSM_clean -> SKIP);
												State_CleanSM_clean(id__,
														    const_CleanSM_voltage)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t1,TID_CleanSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_CleanSM_clean})!SID_CleanSM_clean -> (
												SKIP;
												exited!y____!SID_CleanSM_clean -> SKIP);
												State_CleanSM_clean(id__,
														    const_CleanSM_voltage)
									))
							within
								enter?x____:diff(SIDS,{SID_CleanSM_clean})!SID_CleanSM_clean -> (State_CleanSM_clean_execute(id__,x____))
							
							CS_CleanSM_dont_clean_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_CleanSM_clean,SID_CleanSM_dont_clean},
								y____ <- {SID_CleanSM_dont_clean}
							|}
							
							
							CleanSM_dont_clean_triggers = {|
								clean__.TID_CleanSM_t1,
								clean__.TID_CleanSM_t2
							|}
							
							State_CleanSM_dont_clean(id__,
									    const_CleanSM_voltage) = let
								T_CleanSM_t1(id__,
										    const_CleanSM_voltage) = clean__!TID_CleanSM_t1.in?clean_var -> set_clean_var!clean_var ->  (exit.SID_CleanSM_dont_clean.SID_CleanSM_dont_clean -> SKIP;
													SKIP;exited.SID_CleanSM_dont_clean.SID_CleanSM_dont_clean -> SKIP;
													enter!SID_CleanSM_dont_clean!SID_CleanSM_clean -> entered!SID_CleanSM_dont_clean!SID_CleanSM_clean ->
													State_CleanSM_dont_clean(id__,
															    const_CleanSM_voltage)
								)
								State_CleanSM_dont_clean_execute(id__,o____) = true&CALL__brush(
											id__,
											0
										);true&CALL__vacuum(
											id__,
											0
										); 
									entered!o____!SID_CleanSM_dont_clean ->
									(SKIP; STOP /\ (
										T_CleanSM_t1(id__,
												    const_CleanSM_voltage)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t1,TID_CleanSM_t2}) -> exit?y____:diff(SIDS,{SID_CleanSM_dont_clean})!SID_CleanSM_dont_clean -> (
												SKIP;
												exited!y____!SID_CleanSM_dont_clean -> SKIP);
												State_CleanSM_dont_clean(id__,
														    const_CleanSM_voltage)
										[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t1,TID_CleanSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_CleanSM_dont_clean})!SID_CleanSM_dont_clean -> (
												SKIP;
												exited!y____!SID_CleanSM_dont_clean -> SKIP);
												State_CleanSM_dont_clean(id__,
														    const_CleanSM_voltage)
									))
							within
								enter?x____:diff(SIDS,{SID_CleanSM_dont_clean})!SID_CleanSM_dont_clean -> (State_CleanSM_dont_clean_execute(id__,x____))
							
							
							I_CleanSM_i0(id__,
									    const_CleanSM_voltage) = let
								T_CleanSM_t0(id__,
										    const_CleanSM_voltage) = internal__!TID_CleanSM_t0 -> enter!SID_CleanSM!SID_CleanSM_dont_clean -> entered!SID_CleanSM!SID_CleanSM_dont_clean ->
								SKIP
							within
								T_CleanSM_t0(id__,
										    const_CleanSM_voltage)
							
							
							State_CleanSM_clean_R(id__,
									    const_CleanSM_voltage) = 
								State_CleanSM_clean(id__,
										    const_CleanSM_voltage)
									[|diff(int_int,CleanSM_clean_triggers)|]
								SKIP
									 		
							State_CleanSM_dont_clean_R(id__,
									    const_CleanSM_voltage) = 
								State_CleanSM_dont_clean(id__,
										    const_CleanSM_voltage)
									[|diff(int_int,CleanSM_dont_clean_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_CleanSM_voltage) = (
								I_CleanSM_i0(id__,
										    const_CleanSM_voltage)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_CleanSM_clean,SID_CleanSM_dont_clean}),
											y____ <- {SID_CleanSM_clean,SID_CleanSM_dont_clean}
									|}|]
								(
									State_CleanSM_clean_R(id__,
											    const_CleanSM_voltage)
										[|inter(CS_CleanSM_clean_sync,CS_CleanSM_dont_clean_sync)|]
									State_CleanSM_dont_clean_R(id__,
											    const_CleanSM_voltage)
								)
							)
							
							-- optimized memory process
							channel getV_clean_var: core_boolean
							
							-- individual memory processes
							Memory_clean_var(x__) = ( 
								get_clean_var!x__ -> Memory_clean_var(x__)
								[]
								getV_clean_var!x__ -> Memory_clean_var(x__)
								[]
								set_clean_var?x__ -> Memory_clean_var(x__)
								[]
								clean__!TID_CleanSM_t1.in?clean_var -> Memory_clean_var(clean_var)
								[]
								clean__!TID_CleanSM_t2.in?clean_var -> Memory_clean_var(clean_var)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 clean_var,
								 const_CleanSM_voltage) = (
								internal__!TID_CleanSM_t0 -> SKIP
								[]
								clean__!TID_CleanSM_t1.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==true)} -> SKIP
								[]
								clean__!TID_CleanSM_t2.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==false)} -> SKIP
							
								[]
									set_clean_var?x__ -> SKIP
							 	)
							MemoryTransitions_CleanSM(id__,
								 const_CleanSM_voltage) =
								(
								getV_clean_var?clean_var ->
								 MemoryTransitions(id__,
								 	 clean_var,
								 	 const_CleanSM_voltage);
								 MemoryTransitions_CleanSM(id__,
								 	 const_CleanSM_voltage)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_CleanSM = Union(
								{
									{
										Memory_clean_var(true)
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									set_clean_var,
									clean__.TID_CleanSM_t2,
									setWC,
									clean__.TID_CleanSM_t1,
									getV_clean_var
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getWC,
									getV_clean_var
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_CleanSM @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_CleanSM_voltage) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_CleanSM(id__,
								 const_CleanSM_voltage)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- clean_var
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_CleanSM_t2,
							--		TID_CleanSM_t1,
							--		TID_CleanSM_t0}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   clean__!TID_CleanSM_t2.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==false)} -> Update
									 	   []
									 	   clean__!TID_CleanSM_t1.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==true)} -> Update
									 	   []
									 	   internal__!TID_CleanSM_t0 -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_clean_var(x__) = ( 
								get_clean_var!x__ -> Memory_opt_clean_var(x__)
								[]
								set_clean_var?x__ -> Memory_opt_clean_var(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_CleanSM_voltage) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_clean_var(true)
								          	[| {|set_clean_var,get_clean_var|} |] 
								          	STM_core(id__,
								          			    const_CleanSM_voltage)
								          	)\ {|set_clean_var,get_clean_var|}
								          )
								      	  [| {|clean__.TID_CleanSM_t2,clean__.TID_CleanSM_t1,internal__.TID_CleanSM_t0|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{|internal__.TID_CleanSM_t0|})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_clean_var,set_clean_var|},
										{||}
									)
										
									,
									{|internal__.TID_CleanSM_t0,
									clean__.TID_CleanSM_t1,
									clean__.TID_CleanSM_t2|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_clean_var,set_clean_var|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_CleanSM_voltage) = prioritise((((
								wbisim(STM(id__,
										    const_CleanSM_voltage))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_CleanSM_voltage))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_CleanSM_voltage)
								)\WCsets
							)
							[[
								clean__.x____ <- clean
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_CleanSM_voltage) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_CleanSM_voltage)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_CleanSM_voltage))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_CleanSM_voltage) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_CleanSM_voltage)
									)[[
										clean__.x____ <- clean
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_CleanSM_voltage) = prioritise((((
								wbisim(STM(id__,
										    const_CleanSM_voltage))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_CleanSM_voltage)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_CleanSM_voltage))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_CleanSM_voltage) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_CleanSM_voltage) = || (alpha, P) : WCset(id__,
									    const_CleanSM_voltage) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_CleanSM_voltage) = timed_priority(AUX(id__,
									    const_CleanSM_voltage) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_CleanSM_voltage) = timed_priority(AUX_opt(id__,
									    const_CleanSM_voltage) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_CleanSM_voltage) = D__(id__,
									    const_CleanSM_voltage)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_CleanSM_voltage) = timed_priority(AUX(id__,
									    const_CleanSM_voltage) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_CleanSM_voltage) = ShowV(timed_priority(AUX(id__,
									    const_CleanSM_voltage) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_CleanSM_voltage) = AUX(id__,
									    const_CleanSM_voltage)
						}
					endmodule
					module stm_ref5
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_speed, set_speed: core_int
							channel get_turn_angle, set_turn_angle: core_real
							channel get_direction, set_direction: Direction
							channel get_al, set_al: TripleAxis
							channel get_ar, set_ar: TripleAxis
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel acc_l__: TIDS.InOut.TripleAxis
							channel acc_l: InOut.TripleAxis
							channel acc_r__: TIDS.InOut.TripleAxis
							channel acc_r: InOut.TripleAxis
							channel angle__: TIDS.InOut.core_int
							channel angle: InOut.core_int
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_AngularSpeedSM
							              | SID_AngularSpeedSM_wait_input
							              | SID_AngularSpeedSM_wait_ar
							              | SID_AngularSpeedSM_wait_al
							              | SID_AngularSpeedSM_update_value
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_AngularSpeedSM_t0
							              | TID_AngularSpeedSM_t2
							              | TID_AngularSpeedSM_t3
							              | TID_AngularSpeedSM_t4
							              | TID_AngularSpeedSM_t5
							              | TID_AngularSpeedSM_t6
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_AngularSpeedSM_t2,	TID_AngularSpeedSM_t3,	TID_AngularSpeedSM_t4,	TID_AngularSpeedSM_t5,	TID_AngularSpeedSM_t6
							}
							
							int_int = {|
								acc_l__.TID_AngularSpeedSM_t2,
								acc_r__.TID_AngularSpeedSM_t2,
								angle__.TID_AngularSpeedSM_t2,
								internal__.TID_AngularSpeedSM_t2,
								acc_l__.TID_AngularSpeedSM_t3,
								acc_r__.TID_AngularSpeedSM_t3,
								angle__.TID_AngularSpeedSM_t3,
								internal__.TID_AngularSpeedSM_t3,
								acc_l__.TID_AngularSpeedSM_t4,
								acc_r__.TID_AngularSpeedSM_t4,
								angle__.TID_AngularSpeedSM_t4,
								internal__.TID_AngularSpeedSM_t4,
								acc_l__.TID_AngularSpeedSM_t5,
								acc_r__.TID_AngularSpeedSM_t5,
								angle__.TID_AngularSpeedSM_t5,
								internal__.TID_AngularSpeedSM_t5,
								acc_l__.TID_AngularSpeedSM_t6,
								acc_r__.TID_AngularSpeedSM_t6,
								angle__.TID_AngularSpeedSM_t6,
								internal__.TID_AngularSpeedSM_t6
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_AngularSpeedSM_wait_input_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_AngularSpeedSM_wait_input,SID_AngularSpeedSM_wait_ar,SID_AngularSpeedSM_wait_al,SID_AngularSpeedSM_update_value},
								y____ <- {SID_AngularSpeedSM_wait_input}
							|}
							
							
							AngularSpeedSM_wait_input_triggers = {|
								acc_l__.TID_AngularSpeedSM_t5,
								acc_l__.TID_AngularSpeedSM_t2,
								internal__.TID_AngularSpeedSM_t6,
								acc_r__.TID_AngularSpeedSM_t3,
								acc_r__.TID_AngularSpeedSM_t4
							|}
							
							State_AngularSpeedSM_wait_input(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = let
								T_AngularSpeedSM_t2(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance) = acc_l__!TID_AngularSpeedSM_t2.in?al -> set_al!al ->  (exit.SID_AngularSpeedSM_wait_input.SID_AngularSpeedSM_wait_input -> SKIP;
													SKIP;exited.SID_AngularSpeedSM_wait_input.SID_AngularSpeedSM_wait_input -> SKIP;
													enter!SID_AngularSpeedSM_wait_input!SID_AngularSpeedSM_wait_ar -> entered!SID_AngularSpeedSM_wait_input!SID_AngularSpeedSM_wait_ar ->
													State_AngularSpeedSM_wait_input(id__,
															    const_AngularSpeedSM_t,
															    const_AngularSpeedSM_acc_distance)
								)
								T_AngularSpeedSM_t3(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance) = acc_r__!TID_AngularSpeedSM_t3.in?ar -> set_ar!ar ->  (exit.SID_AngularSpeedSM_wait_input.SID_AngularSpeedSM_wait_input -> SKIP;
													SKIP;exited.SID_AngularSpeedSM_wait_input.SID_AngularSpeedSM_wait_input -> SKIP;
													enter!SID_AngularSpeedSM_wait_input!SID_AngularSpeedSM_wait_al -> entered!SID_AngularSpeedSM_wait_input!SID_AngularSpeedSM_wait_al ->
													State_AngularSpeedSM_wait_input(id__,
															    const_AngularSpeedSM_t,
															    const_AngularSpeedSM_acc_distance)
								)
								State_AngularSpeedSM_wait_input_execute(id__,o____) = SKIP; 
									entered!o____!SID_AngularSpeedSM_wait_input ->
									(SKIP; STOP /\ (
										T_AngularSpeedSM_t2(id__,
												    const_AngularSpeedSM_t,
												    const_AngularSpeedSM_acc_distance)[]
										T_AngularSpeedSM_t3(id__,
												    const_AngularSpeedSM_t,
												    const_AngularSpeedSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4}) -> exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_input})!SID_AngularSpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_input -> SKIP);
												State_AngularSpeedSM_wait_input(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] acc_l__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_input})!SID_AngularSpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_input -> SKIP);
												State_AngularSpeedSM_wait_input(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] acc_r__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_input})!SID_AngularSpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_input -> SKIP);
												State_AngularSpeedSM_wait_input(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_input})!SID_AngularSpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_input -> SKIP);
												State_AngularSpeedSM_wait_input(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_AngularSpeedSM_wait_input})!SID_AngularSpeedSM_wait_input -> (State_AngularSpeedSM_wait_input_execute(id__,x____))
							
							CS_AngularSpeedSM_wait_ar_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_AngularSpeedSM_wait_input,SID_AngularSpeedSM_wait_ar,SID_AngularSpeedSM_wait_al,SID_AngularSpeedSM_update_value},
								y____ <- {SID_AngularSpeedSM_wait_ar}
							|}
							
							
							AngularSpeedSM_wait_ar_triggers = {|
								acc_l__.TID_AngularSpeedSM_t5,
								internal__.TID_AngularSpeedSM_t6,
								acc_l__.TID_AngularSpeedSM_t2,
								acc_r__.TID_AngularSpeedSM_t3,
								acc_r__.TID_AngularSpeedSM_t4
							|}
							
							State_AngularSpeedSM_wait_ar(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = let
								T_AngularSpeedSM_t4(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance) = acc_r__!TID_AngularSpeedSM_t4.in?ar -> set_ar!ar ->  (exit.SID_AngularSpeedSM_wait_ar.SID_AngularSpeedSM_wait_ar -> SKIP;
													SKIP;exited.SID_AngularSpeedSM_wait_ar.SID_AngularSpeedSM_wait_ar -> SKIP;
													enter!SID_AngularSpeedSM_wait_ar!SID_AngularSpeedSM_update_value -> entered!SID_AngularSpeedSM_wait_ar!SID_AngularSpeedSM_update_value ->
													State_AngularSpeedSM_wait_ar(id__,
															    const_AngularSpeedSM_t,
															    const_AngularSpeedSM_acc_distance)
								)
								State_AngularSpeedSM_wait_ar_execute(id__,o____) = SKIP; 
									entered!o____!SID_AngularSpeedSM_wait_ar ->
									(SKIP; STOP /\ (
										T_AngularSpeedSM_t4(id__,
												    const_AngularSpeedSM_t,
												    const_AngularSpeedSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4}) -> exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_ar})!SID_AngularSpeedSM_wait_ar -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_ar -> SKIP);
												State_AngularSpeedSM_wait_ar(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] acc_l__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_ar})!SID_AngularSpeedSM_wait_ar -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_ar -> SKIP);
												State_AngularSpeedSM_wait_ar(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] acc_r__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_ar})!SID_AngularSpeedSM_wait_ar -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_ar -> SKIP);
												State_AngularSpeedSM_wait_ar(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_ar})!SID_AngularSpeedSM_wait_ar -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_ar -> SKIP);
												State_AngularSpeedSM_wait_ar(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_AngularSpeedSM_wait_ar})!SID_AngularSpeedSM_wait_ar -> (State_AngularSpeedSM_wait_ar_execute(id__,x____))
							
							CS_AngularSpeedSM_wait_al_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_AngularSpeedSM_wait_input,SID_AngularSpeedSM_wait_ar,SID_AngularSpeedSM_wait_al,SID_AngularSpeedSM_update_value},
								y____ <- {SID_AngularSpeedSM_wait_al}
							|}
							
							
							AngularSpeedSM_wait_al_triggers = {|
								acc_l__.TID_AngularSpeedSM_t5,
								internal__.TID_AngularSpeedSM_t6,
								acc_l__.TID_AngularSpeedSM_t2,
								acc_r__.TID_AngularSpeedSM_t3,
								acc_r__.TID_AngularSpeedSM_t4
							|}
							
							State_AngularSpeedSM_wait_al(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = let
								T_AngularSpeedSM_t5(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance) = acc_l__!TID_AngularSpeedSM_t5.in?al -> set_al!al ->  (exit.SID_AngularSpeedSM_wait_al.SID_AngularSpeedSM_wait_al -> SKIP;
													SKIP;exited.SID_AngularSpeedSM_wait_al.SID_AngularSpeedSM_wait_al -> SKIP;
													enter!SID_AngularSpeedSM_wait_al!SID_AngularSpeedSM_update_value -> entered!SID_AngularSpeedSM_wait_al!SID_AngularSpeedSM_update_value ->
													State_AngularSpeedSM_wait_al(id__,
															    const_AngularSpeedSM_t,
															    const_AngularSpeedSM_acc_distance)
								)
								State_AngularSpeedSM_wait_al_execute(id__,o____) = SKIP; 
									entered!o____!SID_AngularSpeedSM_wait_al ->
									(SKIP; STOP /\ (
										T_AngularSpeedSM_t5(id__,
												    const_AngularSpeedSM_t,
												    const_AngularSpeedSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4}) -> exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_al})!SID_AngularSpeedSM_wait_al -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_al -> SKIP);
												State_AngularSpeedSM_wait_al(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] acc_l__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_al})!SID_AngularSpeedSM_wait_al -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_al -> SKIP);
												State_AngularSpeedSM_wait_al(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] acc_r__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_al})!SID_AngularSpeedSM_wait_al -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_al -> SKIP);
												State_AngularSpeedSM_wait_al(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_wait_al})!SID_AngularSpeedSM_wait_al -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_wait_al -> SKIP);
												State_AngularSpeedSM_wait_al(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_AngularSpeedSM_wait_al})!SID_AngularSpeedSM_wait_al -> (State_AngularSpeedSM_wait_al_execute(id__,x____))
							
							CS_AngularSpeedSM_update_value_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_AngularSpeedSM_wait_input,SID_AngularSpeedSM_wait_ar,SID_AngularSpeedSM_wait_al,SID_AngularSpeedSM_update_value},
								y____ <- {SID_AngularSpeedSM_update_value}
							|}
							
							
							AngularSpeedSM_update_value_triggers = {|
								acc_l__.TID_AngularSpeedSM_t5,
								internal__.TID_AngularSpeedSM_t6,
								acc_l__.TID_AngularSpeedSM_t2,
								acc_r__.TID_AngularSpeedSM_t3,
								acc_r__.TID_AngularSpeedSM_t4
							|}
							
							State_AngularSpeedSM_update_value(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = let
								T_AngularSpeedSM_t6(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance) = internal__!TID_AngularSpeedSM_t6 ->  exit.SID_AngularSpeedSM_update_value.SID_AngularSpeedSM_update_value -> SKIP;
													SKIP;exited.SID_AngularSpeedSM_update_value.SID_AngularSpeedSM_update_value -> SKIP;
													get_turn_angle?turn_angle -> get_al?al -> true&(angle.out!(Mult(get_sign(TripleAxis_Y(al)), floor(turn_angle), core_int)) -> SKIP);WAIT(const_AngularSpeedSM_t);enter!SID_AngularSpeedSM_update_value!SID_AngularSpeedSM_wait_input -> entered!SID_AngularSpeedSM_update_value!SID_AngularSpeedSM_wait_input ->
													State_AngularSpeedSM_update_value(id__,
															    const_AngularSpeedSM_t,
															    const_AngularSpeedSM_acc_distance)
								State_AngularSpeedSM_update_value_execute(id__,o____) = get_turn_angle?turn_angle -> get_ar?ar -> get_al?al -> true & (set_turn_angle!Plus(turn_angle, Mult(sqrt(Div(abs(Minus(TripleAxis_Y(al), TripleAxis_Y(ar), core_int)), const_AngularSpeedSM_acc_distance, core_real)), const_AngularSpeedSM_t, core_real), core_real) -> SKIP); 
									entered!o____!SID_AngularSpeedSM_update_value ->
									(SKIP; STOP /\ (
										T_AngularSpeedSM_t6(id__,
												    const_AngularSpeedSM_t,
												    const_AngularSpeedSM_acc_distance)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4}) -> exit?y____:diff(SIDS,{SID_AngularSpeedSM_update_value})!SID_AngularSpeedSM_update_value -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_update_value -> SKIP);
												State_AngularSpeedSM_update_value(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] acc_l__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_update_value})!SID_AngularSpeedSM_update_value -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_update_value -> SKIP);
												State_AngularSpeedSM_update_value(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] acc_r__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_update_value})!SID_AngularSpeedSM_update_value -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_update_value -> SKIP);
												State_AngularSpeedSM_update_value(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AngularSpeedSM_t5,TID_AngularSpeedSM_t6,TID_AngularSpeedSM_t2,TID_AngularSpeedSM_t3,TID_AngularSpeedSM_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AngularSpeedSM_update_value})!SID_AngularSpeedSM_update_value -> (
												SKIP;
												exited!y____!SID_AngularSpeedSM_update_value -> SKIP);
												State_AngularSpeedSM_update_value(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
									))
							within
								enter?x____:diff(SIDS,{SID_AngularSpeedSM_update_value})!SID_AngularSpeedSM_update_value -> (State_AngularSpeedSM_update_value_execute(id__,x____))
							
							
							I_AngularSpeedSM_i0(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = let
								T_AngularSpeedSM_t0(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance) = internal__!TID_AngularSpeedSM_t0 -> true & (set_turn_angle!0 -> SKIP);enter!SID_AngularSpeedSM!SID_AngularSpeedSM_wait_input -> entered!SID_AngularSpeedSM!SID_AngularSpeedSM_wait_input ->
								SKIP
							within
								T_AngularSpeedSM_t0(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance)
							
							
							State_AngularSpeedSM_wait_input_R(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = 
								State_AngularSpeedSM_wait_input(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance)
									[|diff(int_int,AngularSpeedSM_wait_input_triggers)|]
								SKIP
									 		
							State_AngularSpeedSM_wait_ar_R(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = 
								State_AngularSpeedSM_wait_ar(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance)
									[|diff(int_int,AngularSpeedSM_wait_ar_triggers)|]
								SKIP
									 		
							State_AngularSpeedSM_wait_al_R(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = 
								State_AngularSpeedSM_wait_al(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance)
									[|diff(int_int,AngularSpeedSM_wait_al_triggers)|]
								SKIP
									 		
							State_AngularSpeedSM_update_value_R(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = 
								State_AngularSpeedSM_update_value(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance)
									[|diff(int_int,AngularSpeedSM_update_value_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = (
								I_AngularSpeedSM_i0(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_AngularSpeedSM_wait_input,SID_AngularSpeedSM_wait_ar,SID_AngularSpeedSM_wait_al,SID_AngularSpeedSM_update_value}),
											y____ <- {SID_AngularSpeedSM_wait_input,SID_AngularSpeedSM_wait_ar,SID_AngularSpeedSM_wait_al,SID_AngularSpeedSM_update_value}
									|}|]
								(
									State_AngularSpeedSM_wait_input_R(id__,
											    const_AngularSpeedSM_t,
											    const_AngularSpeedSM_acc_distance)
										[|inter(CS_AngularSpeedSM_wait_input_sync,union(union(CS_AngularSpeedSM_wait_ar_sync,CS_AngularSpeedSM_wait_al_sync),CS_AngularSpeedSM_update_value_sync))|]
									(
										State_AngularSpeedSM_wait_ar_R(id__,
												    const_AngularSpeedSM_t,
												    const_AngularSpeedSM_acc_distance)
											[|inter(CS_AngularSpeedSM_wait_ar_sync,union(CS_AngularSpeedSM_wait_al_sync,CS_AngularSpeedSM_update_value_sync))|]
										(
											State_AngularSpeedSM_wait_al_R(id__,
													    const_AngularSpeedSM_t,
													    const_AngularSpeedSM_acc_distance)
												[|inter(CS_AngularSpeedSM_wait_al_sync,CS_AngularSpeedSM_update_value_sync)|]
											State_AngularSpeedSM_update_value_R(id__,
													    const_AngularSpeedSM_t,
													    const_AngularSpeedSM_acc_distance)
										)
									)
								)
							)
							
							-- optimized memory process
							channel getV_speed: core_int
							channel getV_turn_angle: core_real
							channel getV_direction: Direction
							channel getV_al: TripleAxis
							channel getV_ar: TripleAxis
							
							-- individual memory processes
							Memory_speed(x__) = ( 
								get_speed!x__ -> Memory_speed(x__)
								[]
								getV_speed!x__ -> Memory_speed(x__)
								[]
								set_speed?x__ -> Memory_speed(x__)
							)
							Memory_turn_angle(x__) = ( 
								get_turn_angle!x__ -> Memory_turn_angle(x__)
								[]
								getV_turn_angle!x__ -> Memory_turn_angle(x__)
								[]
								set_turn_angle?x__ -> Memory_turn_angle(x__)
							)
							Memory_direction(x__) = ( 
								get_direction!x__ -> Memory_direction(x__)
								[]
								getV_direction!x__ -> Memory_direction(x__)
								[]
								set_direction?x__ -> Memory_direction(x__)
							)
							Memory_al(x__) = ( 
								get_al!x__ -> Memory_al(x__)
								[]
								getV_al!x__ -> Memory_al(x__)
								[]
								set_al?x__ -> Memory_al(x__)
								[]
								acc_l__!TID_AngularSpeedSM_t2.in?al -> Memory_al(al)
								[]
								acc_l__!TID_AngularSpeedSM_t5.in?al -> Memory_al(al)
							)
							Memory_ar(x__) = ( 
								get_ar!x__ -> Memory_ar(x__)
								[]
								getV_ar!x__ -> Memory_ar(x__)
								[]
								set_ar?x__ -> Memory_ar(x__)
								[]
								acc_r__!TID_AngularSpeedSM_t3.in?ar -> Memory_ar(ar)
								[]
								acc_r__!TID_AngularSpeedSM_t4.in?ar -> Memory_ar(ar)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 speed,
								 turn_angle,
								 direction,
								 al,
								 ar,
								 const_AngularSpeedSM_t,
								 const_AngularSpeedSM_acc_distance) = (
								internal__!TID_AngularSpeedSM_t0 -> SKIP
								[]
								acc_l__!TID_AngularSpeedSM_t2.in?al -> SKIP
								[]
								acc_r__!TID_AngularSpeedSM_t3.in?ar -> SKIP
								[]
								acc_r__!TID_AngularSpeedSM_t4.in?ar -> SKIP
								[]
								acc_l__!TID_AngularSpeedSM_t5.in?al -> SKIP
								[]
								internal__!TID_AngularSpeedSM_t6 -> SKIP
							
								[]
									set_speed?x__ -> SKIP
								[]
								set_turn_angle?x__ -> SKIP
								[]
								set_direction?x__ -> SKIP
								[]
								set_al?x__ -> SKIP
								[]
								set_ar?x__ -> SKIP
							 	)
							MemoryTransitions_AngularSpeedSM(id__,
								 const_AngularSpeedSM_t,
								 const_AngularSpeedSM_acc_distance) =
								(
								getV_speed?speed ->	
								getV_turn_angle?turn_angle ->	
								getV_direction?direction ->	
								getV_al?al ->	
								getV_ar?ar ->
								 MemoryTransitions(id__,
								 	 speed,
								 	 turn_angle,
								 	 direction,
								 	 al,
								 	 ar,
								 	 const_AngularSpeedSM_t,
								 	 const_AngularSpeedSM_acc_distance);
								 MemoryTransitions_AngularSpeedSM(id__,
								 	 const_AngularSpeedSM_t,
								 	 const_AngularSpeedSM_acc_distance)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_AngularSpeedSM = Union(
								{
									{
										Memory_speed(0),
										Memory_turn_angle(0),
										Memory_direction(Direction_left),
										Memory_al((0,0,0)),
										Memory_ar((0,0,0))
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									getV_direction,
									set_speed,
									set_al,
									setWC,
									getV_turn_angle,
									getV_al,
									acc_l__.TID_AngularSpeedSM_t2,
									set_ar,
									acc_r__.TID_AngularSpeedSM_t3,
									acc_r__.TID_AngularSpeedSM_t4,
									acc_l__.TID_AngularSpeedSM_t5,
									set_turn_angle,
									set_direction,
									getV_ar,
									getV_speed
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_direction,
									getV_ar,
									getV_speed,
									getWC,
									getV_turn_angle,
									getV_al
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_AngularSpeedSM @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_AngularSpeedSM_t,
								 const_AngularSpeedSM_acc_distance) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_AngularSpeedSM(id__,
								 const_AngularSpeedSM_t,
								 const_AngularSpeedSM_acc_distance)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- turn_angle
							-- direction
							-- speed
							-- al
							-- ar
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_AngularSpeedSM_t4,
							--		TID_AngularSpeedSM_t0,
							--		TID_AngularSpeedSM_t5,
							--		TID_AngularSpeedSM_t3,
							--		TID_AngularSpeedSM_t6,
							--		TID_AngularSpeedSM_t2}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   acc_r__!TID_AngularSpeedSM_t4.in?ar -> Update
									 	   []
									 	   internal__!TID_AngularSpeedSM_t0 -> Update
									 	   []
									 	   acc_l__!TID_AngularSpeedSM_t5.in?al -> Update
									 	   []
									 	   acc_r__!TID_AngularSpeedSM_t3.in?ar -> Update
									 	   []
									 	   internal__!TID_AngularSpeedSM_t6 -> Update
									 	   []
									 	   acc_l__!TID_AngularSpeedSM_t2.in?al -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_turn_angle(x__) = ( 
								get_turn_angle!x__ -> Memory_opt_turn_angle(x__)
								[]
								set_turn_angle?x__ -> Memory_opt_turn_angle(x__)
							)
							Memory_opt_direction(x__) = ( 
								get_direction!x__ -> Memory_opt_direction(x__)
								[]
								set_direction?x__ -> Memory_opt_direction(x__)
							)
							Memory_opt_speed(x__) = ( 
								get_speed!x__ -> Memory_opt_speed(x__)
								[]
								set_speed?x__ -> Memory_opt_speed(x__)
							)
							Memory_opt_al(x__) = ( 
								get_al!x__ -> Memory_opt_al(x__)
								[]
								set_al?x__ -> Memory_opt_al(x__)
							)
							Memory_opt_ar(x__) = ( 
								get_ar!x__ -> Memory_opt_ar(x__)
								[]
								set_ar?x__ -> Memory_opt_ar(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_turn_angle(0)
								          	[| {|set_turn_angle,get_turn_angle|} |] 
								          	dbisim(sbisim(Memory_opt_direction(Direction_left)
								          	      	[| {|set_direction,get_direction|} |] 
								          	      	dbisim(sbisim(Memory_opt_speed(0)
								          	      	      	[| {|set_speed,get_speed|} |] 
								          	      	      	dbisim(sbisim(Memory_opt_al((0,0,0))
								          	      	      	      	[| {|set_al,get_al|} |] 
								          	      	      	      	dbisim(sbisim(Memory_opt_ar((0,0,0))
								          	      	      	      	      	[| {|get_ar,set_ar|} |] 
								          	      	      	      	      	STM_core(id__,
								          	      	      	      	      			    const_AngularSpeedSM_t,
								          	      	      	      	      			    const_AngularSpeedSM_acc_distance)
								          	      	      	      	      	)\ {|get_ar,set_ar|}
								          	      	      	      	      )
								          	      	      	      	)\ {|set_al,get_al|}
								          	      	      	      )
								          	      	      	)\ {|set_speed,get_speed|}
								          	      	      )
								          	      	)\ {|set_direction,get_direction|}
								          	      )
								          	)\ {|set_turn_angle,get_turn_angle|}
								          )
								      	  [| {|acc_r__.TID_AngularSpeedSM_t3,acc_r__.TID_AngularSpeedSM_t4,acc_l__.TID_AngularSpeedSM_t5,internal__.TID_AngularSpeedSM_t0,acc_l__.TID_AngularSpeedSM_t2,internal__.TID_AngularSpeedSM_t6|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{||})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_speed,set_speed,
										get_turn_angle,set_turn_angle,
										get_direction,set_direction,
										get_al,set_al,
										get_ar,set_ar|},
										{||}
									)
										
									,
									{|internal__.TID_AngularSpeedSM_t0,
									acc_l__.TID_AngularSpeedSM_t2,
									acc_r__.TID_AngularSpeedSM_t3,
									acc_r__.TID_AngularSpeedSM_t4,
									acc_l__.TID_AngularSpeedSM_t5,
									internal__.TID_AngularSpeedSM_t6|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_speed,set_speed,
									get_turn_angle,set_turn_angle,
									get_direction,set_direction,
									get_al,set_al,
									get_ar,set_ar|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = prioritise((((
								wbisim(STM(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_AngularSpeedSM_t,
										 const_AngularSpeedSM_acc_distance))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_AngularSpeedSM_t,
											    const_AngularSpeedSM_acc_distance)
								)\WCsets
							)
							[[
								acc_l__.x____ <- acc_l,
								acc_r__.x____ <- acc_r,
								angle__.x____ <- angle
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_AngularSpeedSM_t,
													    const_AngularSpeedSM_acc_distance)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_AngularSpeedSM_t,
													    const_AngularSpeedSM_acc_distance))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_AngularSpeedSM_t,
											    const_AngularSpeedSM_acc_distance)
									)[[
										acc_l__.x____ <- acc_l,
										acc_r__.x____ <- acc_r,
										angle__.x____ <- angle
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = prioritise((((
								wbisim(STM(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_AngularSpeedSM_t,
									 const_AngularSpeedSM_acc_distance)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_AngularSpeedSM_t,
										    const_AngularSpeedSM_acc_distance))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = || (alpha, P) : WCset(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = timed_priority(AUX(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = timed_priority(AUX_opt(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = D__(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = timed_priority(AUX(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = ShowV(timed_priority(AUX(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance) = AUX(id__,
									    const_AngularSpeedSM_t,
									    const_AngularSpeedSM_acc_distance)
						}
					endmodule
					module stm_ref6
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_prior_error, set_prior_error: core_int
							channel get_integral, set_integral: core_int
							channel get_error, set_error: core_int
							channel get_derivative, set_derivative: core_int
							channel get_output, set_output: core_int
							channel get_target_value, set_target_value: core_int
							channel get_actual_value, set_actual_value: core_int
							channel get_old_target, set_old_target: core_int
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel err_output__: TIDS.InOut.core_int
							channel err_output: InOut.core_int
							channel actual__: TIDS.InOut.core_int
							channel actual: InOut.core_int
							channel target__: TIDS.InOut.core_int
							channel target: InOut.core_int
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_PID
							              | SID_PID_Update
							              | SID_PID_Wait_target
							              | SID_PID_Wait_actual
							              | SID_PID_Reset
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_PID_t0
							              | TID_PID_t1
							              | TID_PID_t4
							              | TID_PID_t5
							              | TID_PID_t2
							              | TID_PID_t3
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_PID_t1,	TID_PID_t4,	TID_PID_t5,	TID_PID_t2,	TID_PID_t3
							}
							
							int_int = {|
								err_output__.TID_PID_t1,
								actual__.TID_PID_t1,
								target__.TID_PID_t1,
								internal__.TID_PID_t1,
								err_output__.TID_PID_t4,
								actual__.TID_PID_t4,
								target__.TID_PID_t4,
								internal__.TID_PID_t4,
								err_output__.TID_PID_t5,
								actual__.TID_PID_t5,
								target__.TID_PID_t5,
								internal__.TID_PID_t5,
								err_output__.TID_PID_t2,
								actual__.TID_PID_t2,
								target__.TID_PID_t2,
								internal__.TID_PID_t2,
								err_output__.TID_PID_t3,
								actual__.TID_PID_t3,
								target__.TID_PID_t3,
								internal__.TID_PID_t3
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_PID_Update_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset},
								y____ <- {SID_PID_Update}
							|}
							
							
							PID_Update_triggers = {|
								actual__.TID_PID_t3,
								target__.TID_PID_t2,
								target__.TID_PID_t4,
								internal__.TID_PID_t1,
								actual__.TID_PID_t5
							|}
							
							State_PID_Update(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = let
								T_PID_t1(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = internal__!TID_PID_t1 ->  exit.SID_PID_Update.SID_PID_Update -> SKIP;
													SKIP;exited.SID_PID_Update.SID_PID_Update -> SKIP;
													WAIT(const_PID_step);enter!SID_PID_Update!SID_PID_Wait_target -> entered!SID_PID_Update!SID_PID_Wait_target ->
													State_PID_Update(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)
								State_PID_Update_execute(id__,o____) = get_target_value?target_value -> get_actual_value?actual_value -> true & (set_error!Minus(actual_value, target_value, core_int) -> SKIP);get_error?error -> get_integral?integral -> true & (set_integral!Plus(integral, (Mult(error, const_PID_step, core_int)), core_int) -> SKIP);get_error?error -> get_prior_error?prior_error -> const_PID_step != 0 & (set_derivative!floor(Div((Minus(error, prior_error, core_int)), const_PID_step, core_real)) -> SKIP);get_error?error -> get_derivative?derivative -> get_integral?integral -> true & (set_output!Plus(Plus(Mult(const_PID_kp, error, core_int), Mult(const_PID_ki, integral, core_int), core_int), Mult(const_PID_kd, derivative, core_int), core_int) -> SKIP);get_error?error -> true & (set_prior_error!error -> SKIP);get_output?output -> true&(err_output.out!output -> SKIP);get_target_value?target_value -> true & (set_old_target!target_value -> SKIP); 
									entered!o____!SID_PID_Update ->
									(SKIP; STOP /\ (
										T_PID_t1(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5}) -> exit?y____:diff(SIDS,{SID_PID_Update})!SID_PID_Update -> (
												SKIP;
												exited!y____!SID_PID_Update -> SKIP);
												State_PID_Update(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] err_output__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Update})!SID_PID_Update -> (
												SKIP;
												exited!y____!SID_PID_Update -> SKIP);
												State_PID_Update(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] actual__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Update})!SID_PID_Update -> (
												SKIP;
												exited!y____!SID_PID_Update -> SKIP);
												State_PID_Update(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] target__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Update})!SID_PID_Update -> (
												SKIP;
												exited!y____!SID_PID_Update -> SKIP);
												State_PID_Update(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
									))
							within
								enter?x____:diff(SIDS,{SID_PID_Update})!SID_PID_Update -> (State_PID_Update_execute(id__,x____))
							
							CS_PID_Wait_target_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset},
								y____ <- {SID_PID_Wait_target}
							|}
							
							
							PID_Wait_target_triggers = {|
								actual__.TID_PID_t3,
								target__.TID_PID_t2,
								target__.TID_PID_t4,
								internal__.TID_PID_t1,
								actual__.TID_PID_t5
							|}
							
							State_PID_Wait_target(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = let
								T_PID_t4(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = target__!TID_PID_t4.in?target_value -> set_target_value!target_value ->  (exit.SID_PID_Wait_target.SID_PID_Wait_target -> SKIP;
													SKIP;exited.SID_PID_Wait_target.SID_PID_Wait_target -> SKIP;
													enter!SID_PID_Wait_target!SID_PID_Wait_actual -> entered!SID_PID_Wait_target!SID_PID_Wait_actual ->
													State_PID_Wait_target(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)
								)
								T_PID_t2(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = target__!TID_PID_t2.in?target_value -> set_target_value!target_value ->  (exit.SID_PID_Wait_target.SID_PID_Wait_target -> SKIP;
													SKIP;exited.SID_PID_Wait_target.SID_PID_Wait_target -> SKIP;
													enter!SID_PID_Wait_target!SID_PID_Reset -> entered!SID_PID_Wait_target!SID_PID_Reset ->
													State_PID_Wait_target(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)
								)
								State_PID_Wait_target_execute(id__,o____) = SKIP; 
									entered!o____!SID_PID_Wait_target ->
									(SKIP; STOP /\ (
										T_PID_t4(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)[]
										T_PID_t2(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5}) -> exit?y____:diff(SIDS,{SID_PID_Wait_target})!SID_PID_Wait_target -> (
												SKIP;
												exited!y____!SID_PID_Wait_target -> SKIP);
												State_PID_Wait_target(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] err_output__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_target})!SID_PID_Wait_target -> (
												SKIP;
												exited!y____!SID_PID_Wait_target -> SKIP);
												State_PID_Wait_target(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] actual__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_target})!SID_PID_Wait_target -> (
												SKIP;
												exited!y____!SID_PID_Wait_target -> SKIP);
												State_PID_Wait_target(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] target__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_target})!SID_PID_Wait_target -> (
												SKIP;
												exited!y____!SID_PID_Wait_target -> SKIP);
												State_PID_Wait_target(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
									))
							within
								enter?x____:diff(SIDS,{SID_PID_Wait_target})!SID_PID_Wait_target -> (State_PID_Wait_target_execute(id__,x____))
							
							CS_PID_Wait_actual_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset},
								y____ <- {SID_PID_Wait_actual}
							|}
							
							
							PID_Wait_actual_triggers = {|
								actual__.TID_PID_t3,
								target__.TID_PID_t2,
								target__.TID_PID_t4,
								internal__.TID_PID_t1,
								actual__.TID_PID_t5
							|}
							
							State_PID_Wait_actual(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = let
								T_PID_t5(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = actual__!TID_PID_t5.in?actual_value -> set_actual_value!actual_value ->  (exit.SID_PID_Wait_actual.SID_PID_Wait_actual -> SKIP;
													SKIP;exited.SID_PID_Wait_actual.SID_PID_Wait_actual -> SKIP;
													enter!SID_PID_Wait_actual!SID_PID_Update -> entered!SID_PID_Wait_actual!SID_PID_Update ->
													State_PID_Wait_actual(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)
								)
								State_PID_Wait_actual_execute(id__,o____) = SKIP; 
									entered!o____!SID_PID_Wait_actual ->
									(SKIP; STOP /\ (
										T_PID_t5(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5}) -> exit?y____:diff(SIDS,{SID_PID_Wait_actual})!SID_PID_Wait_actual -> (
												SKIP;
												exited!y____!SID_PID_Wait_actual -> SKIP);
												State_PID_Wait_actual(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] err_output__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_actual})!SID_PID_Wait_actual -> (
												SKIP;
												exited!y____!SID_PID_Wait_actual -> SKIP);
												State_PID_Wait_actual(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] actual__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_actual})!SID_PID_Wait_actual -> (
												SKIP;
												exited!y____!SID_PID_Wait_actual -> SKIP);
												State_PID_Wait_actual(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] target__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_actual})!SID_PID_Wait_actual -> (
												SKIP;
												exited!y____!SID_PID_Wait_actual -> SKIP);
												State_PID_Wait_actual(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
									))
							within
								enter?x____:diff(SIDS,{SID_PID_Wait_actual})!SID_PID_Wait_actual -> (State_PID_Wait_actual_execute(id__,x____))
							
							CS_PID_Reset_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset},
								y____ <- {SID_PID_Reset}
							|}
							
							
							PID_Reset_triggers = {|
								actual__.TID_PID_t3,
								target__.TID_PID_t2,
								target__.TID_PID_t4,
								internal__.TID_PID_t1,
								actual__.TID_PID_t5
							|}
							
							State_PID_Reset(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = let
								T_PID_t3(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = actual__!TID_PID_t3.in?actual_value -> set_actual_value!actual_value ->  (exit.SID_PID_Reset.SID_PID_Reset -> SKIP;
													SKIP;exited.SID_PID_Reset.SID_PID_Reset -> SKIP;
													enter!SID_PID_Reset!SID_PID_Update -> entered!SID_PID_Reset!SID_PID_Update ->
													State_PID_Reset(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)
								)
								State_PID_Reset_execute(id__,o____) = true & (set_prior_error!0 -> SKIP);true & (set_integral!0 -> SKIP); 
									entered!o____!SID_PID_Reset ->
									(SKIP; STOP /\ (
										T_PID_t3(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5}) -> exit?y____:diff(SIDS,{SID_PID_Reset})!SID_PID_Reset -> (
												SKIP;
												exited!y____!SID_PID_Reset -> SKIP);
												State_PID_Reset(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] err_output__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Reset})!SID_PID_Reset -> (
												SKIP;
												exited!y____!SID_PID_Reset -> SKIP);
												State_PID_Reset(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] actual__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Reset})!SID_PID_Reset -> (
												SKIP;
												exited!y____!SID_PID_Reset -> SKIP);
												State_PID_Reset(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] target__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Reset})!SID_PID_Reset -> (
												SKIP;
												exited!y____!SID_PID_Reset -> SKIP);
												State_PID_Reset(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
									))
							within
								enter?x____:diff(SIDS,{SID_PID_Reset})!SID_PID_Reset -> (State_PID_Reset_execute(id__,x____))
							
							
							I_PID_i0(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = let
								T_PID_t0(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = internal__!TID_PID_t0 -> true & (set_prior_error!0 -> SKIP);true & (set_integral!0 -> SKIP);enter!SID_PID!SID_PID_Wait_target -> entered!SID_PID!SID_PID_Wait_target ->
								SKIP
							within
								T_PID_t0(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
							
							
							State_PID_Update_R(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								State_PID_Update(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
									[|diff(int_int,PID_Update_triggers)|]
								SKIP
									 		
							State_PID_Wait_target_R(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								State_PID_Wait_target(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
									[|diff(int_int,PID_Wait_target_triggers)|]
								SKIP
									 		
							State_PID_Wait_actual_R(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								State_PID_Wait_actual(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
									[|diff(int_int,PID_Wait_actual_triggers)|]
								SKIP
									 		
							State_PID_Reset_R(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								State_PID_Reset(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
									[|diff(int_int,PID_Reset_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = (
								I_PID_i0(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset}),
											y____ <- {SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset}
									|}|]
								(
									State_PID_Update_R(id__,
											    const_PID_kp,
											    const_PID_ki,
											    const_PID_kd,
											    const_PID_step)
										[|inter(CS_PID_Update_sync,union(union(CS_PID_Wait_target_sync,CS_PID_Wait_actual_sync),CS_PID_Reset_sync))|]
									(
										State_PID_Wait_target_R(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)
											[|inter(CS_PID_Wait_target_sync,union(CS_PID_Wait_actual_sync,CS_PID_Reset_sync))|]
										(
											State_PID_Wait_actual_R(id__,
													    const_PID_kp,
													    const_PID_ki,
													    const_PID_kd,
													    const_PID_step)
												[|inter(CS_PID_Wait_actual_sync,CS_PID_Reset_sync)|]
											State_PID_Reset_R(id__,
													    const_PID_kp,
													    const_PID_ki,
													    const_PID_kd,
													    const_PID_step)
										)
									)
								)
							)
							
							-- optimized memory process
							channel getV_prior_error: core_int
							channel getV_integral: core_int
							channel getV_error: core_int
							channel getV_derivative: core_int
							channel getV_output: core_int
							channel getV_target_value: core_int
							channel getV_actual_value: core_int
							channel getV_old_target: core_int
							
							-- individual memory processes
							Memory_prior_error(x__) = ( 
								get_prior_error!x__ -> Memory_prior_error(x__)
								[]
								getV_prior_error!x__ -> Memory_prior_error(x__)
								[]
								set_prior_error?x__ -> Memory_prior_error(x__)
							)
							Memory_integral(x__) = ( 
								get_integral!x__ -> Memory_integral(x__)
								[]
								getV_integral!x__ -> Memory_integral(x__)
								[]
								set_integral?x__ -> Memory_integral(x__)
							)
							Memory_error(x__) = ( 
								get_error!x__ -> Memory_error(x__)
								[]
								getV_error!x__ -> Memory_error(x__)
								[]
								set_error?x__ -> Memory_error(x__)
							)
							Memory_derivative(x__) = ( 
								get_derivative!x__ -> Memory_derivative(x__)
								[]
								getV_derivative!x__ -> Memory_derivative(x__)
								[]
								set_derivative?x__ -> Memory_derivative(x__)
							)
							Memory_output(x__) = ( 
								get_output!x__ -> Memory_output(x__)
								[]
								getV_output!x__ -> Memory_output(x__)
								[]
								set_output?x__ -> Memory_output(x__)
							)
							Memory_target_value(x__) = ( 
								get_target_value!x__ -> Memory_target_value(x__)
								[]
								getV_target_value!x__ -> Memory_target_value(x__)
								[]
								set_target_value?x__ -> Memory_target_value(x__)
								[]
								target__!TID_PID_t4.in?target_value -> Memory_target_value(target_value)
								[]
								target__!TID_PID_t2.in?target_value -> Memory_target_value(target_value)
							)
							Memory_actual_value(x__) = ( 
								get_actual_value!x__ -> Memory_actual_value(x__)
								[]
								getV_actual_value!x__ -> Memory_actual_value(x__)
								[]
								set_actual_value?x__ -> Memory_actual_value(x__)
								[]
								actual__!TID_PID_t5.in?actual_value -> Memory_actual_value(actual_value)
								[]
								actual__!TID_PID_t3.in?actual_value -> Memory_actual_value(actual_value)
							)
							Memory_old_target(x__) = ( 
								get_old_target!x__ -> Memory_old_target(x__)
								[]
								getV_old_target!x__ -> Memory_old_target(x__)
								[]
								set_old_target?x__ -> Memory_old_target(x__)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 prior_error,
								 integral,
								 error,
								 derivative,
								 output,
								 target_value,
								 actual_value,
								 old_target,
								 const_PID_kp,
								 const_PID_ki,
								 const_PID_kd,
								 const_PID_step) = (
								internal__!TID_PID_t0 -> SKIP
								[]
								internal__!TID_PID_t1 -> SKIP
								[]
								target__!TID_PID_t4.in?target_value:{target_value|target_value <- core_int, (target_value==old_target)} -> SKIP
								[]
								actual__!TID_PID_t5.in?actual_value -> SKIP
								[]
								target__!TID_PID_t2.in?target_value:{target_value|target_value <- core_int, (target_value!=old_target)} -> SKIP
								[]
								actual__!TID_PID_t3.in?actual_value -> SKIP
							
								[]
									set_prior_error?x__ -> SKIP
								[]
								set_integral?x__ -> SKIP
								[]
								set_error?x__ -> SKIP
								[]
								set_derivative?x__ -> SKIP
								[]
								set_output?x__ -> SKIP
								[]
								set_target_value?x__ -> SKIP
								[]
								set_actual_value?x__ -> SKIP
								[]
								set_old_target?x__ -> SKIP
							 	)
							MemoryTransitions_PID(id__,
								 const_PID_kp,
								 const_PID_ki,
								 const_PID_kd,
								 const_PID_step) =
								(
								getV_prior_error?prior_error ->	
								getV_integral?integral ->	
								getV_error?error ->	
								getV_derivative?derivative ->	
								getV_output?output ->	
								getV_target_value?target_value ->	
								getV_actual_value?actual_value ->	
								getV_old_target?old_target ->
								 MemoryTransitions(id__,
								 	 prior_error,
								 	 integral,
								 	 error,
								 	 derivative,
								 	 output,
								 	 target_value,
								 	 actual_value,
								 	 old_target,
								 	 const_PID_kp,
								 	 const_PID_ki,
								 	 const_PID_kd,
								 	 const_PID_step);
								 MemoryTransitions_PID(id__,
								 	 const_PID_kp,
								 	 const_PID_ki,
								 	 const_PID_kd,
								 	 const_PID_step)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_PID = Union(
								{
									{
										Memory_prior_error(0),
										Memory_integral(0),
										Memory_error(0),
										Memory_derivative(0),
										Memory_output(0),
										Memory_target_value(0),
										Memory_actual_value(0),
										Memory_old_target(0)
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									set_error,
									getV_actual_value,
									getV_error,
									getV_old_target,
									set_integral,
									getV_derivative,
									getV_output,
									target__.TID_PID_t4,
									getV_target_value,
									setWC,
									set_prior_error,
									set_target_value,
									set_old_target,
									getV_integral,
									target__.TID_PID_t2,
									set_derivative,
									set_output,
									actual__.TID_PID_t3,
									getV_prior_error,
									set_actual_value,
									actual__.TID_PID_t5
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_integral,
									getV_actual_value,
									getV_error,
									getV_old_target,
									getV_derivative,
									getV_output,
									getWC,
									getV_target_value,
									getV_prior_error
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_PID @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_PID_kp,
								 const_PID_ki,
								 const_PID_kd,
								 const_PID_step) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_PID(id__,
								 const_PID_kp,
								 const_PID_ki,
								 const_PID_kd,
								 const_PID_step)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- {old_target}
							-- Summary of all identified named elements:
							-- {
							-- error
							-- integral
							-- target_value
							-- derivative
							-- output
							-- old_target
							-- actual_value
							-- prior_error
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_PID_t5,
							--		TID_PID_t1,
							--		TID_PID_t0,
							--		TID_PID_t3}
							-- 1:{old_target}
							--	=> {
							--		TID_PID_t2,
							--		TID_PID_t4}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   actual__!TID_PID_t5.in?actual_value -> Update
									 	   []
									 	   internal__!TID_PID_t1 -> Update
									 	   []
									 	   internal__!TID_PID_t0 -> Update
									 	   []
									 	   actual__!TID_PID_t3.in?actual_value -> Update
								within
									Update
							)
							MemoryTransitions_opt_1(id__) =
							(
								let
									Update = 
									get_old_target?old_target ->
									Current(id__,
										 old_target)
									Current(id__,
										 old_target)
									 	   = 
									 	   target__!TID_PID_t2.in?target_value:{target_value|target_value <- core_int, (target_value!=old_target)} -> Update
									 	   []
									 	   target__!TID_PID_t4.in?target_value:{target_value|target_value <- core_int, (target_value==old_target)} -> Update
									 	   	 
									 	   	 []
									 	   	 set_old_target?x__ -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_error(x__) = ( 
								get_error!x__ -> Memory_opt_error(x__)
								[]
								set_error?x__ -> Memory_opt_error(x__)
							)
							Memory_opt_integral(x__) = ( 
								get_integral!x__ -> Memory_opt_integral(x__)
								[]
								set_integral?x__ -> Memory_opt_integral(x__)
							)
							Memory_opt_target_value(x__) = ( 
								get_target_value!x__ -> Memory_opt_target_value(x__)
								[]
								set_target_value?x__ -> Memory_opt_target_value(x__)
							)
							Memory_opt_derivative(x__) = ( 
								get_derivative!x__ -> Memory_opt_derivative(x__)
								[]
								set_derivative?x__ -> Memory_opt_derivative(x__)
							)
							Memory_opt_output(x__) = ( 
								get_output!x__ -> Memory_opt_output(x__)
								[]
								set_output?x__ -> Memory_opt_output(x__)
							)
							Memory_opt_old_target(x__) = ( 
								get_old_target!x__ -> Memory_opt_old_target(x__)
								[]
								set_old_target?x__ -> Memory_opt_old_target(x__)
							)
							Memory_opt_actual_value(x__) = ( 
								get_actual_value!x__ -> Memory_opt_actual_value(x__)
								[]
								set_actual_value?x__ -> Memory_opt_actual_value(x__)
							)
							Memory_opt_prior_error(x__) = ( 
								get_prior_error!x__ -> Memory_opt_prior_error(x__)
								[]
								set_prior_error?x__ -> Memory_opt_prior_error(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) =
								dbisim(
								  sbisim(Memory_opt_old_target(0)
								      	[| {|get_old_target,set_old_target|} |] 
								      	sbisim(	
								      	  dbisim(
								      	    sbisim(sbisim(	
								      	      dbisim(
								      	        sbisim(dbisim(sbisim(Memory_opt_error(0)
								      	              	[| {|set_error,get_error|} |] 
								      	              	dbisim(sbisim(Memory_opt_integral(0)
								      	              	      	[| {|set_integral,get_integral|} |] 
								      	              	      	dbisim(sbisim(Memory_opt_target_value(0)
								      	              	      	      	[| {|get_target_value,set_target_value|} |] 
								      	              	      	      	dbisim(sbisim(Memory_opt_derivative(0)
								      	              	      	      	      	[| {|get_derivative,set_derivative|} |] 
								      	              	      	      	      	dbisim(sbisim(Memory_opt_output(0)
								      	              	      	      	      	      	[| {|set_output,get_output|} |] 
								      	              	      	      	      	      	dbisim(sbisim(Memory_opt_actual_value(0)
								      	              	      	      	      	      	      	[| {|get_actual_value,set_actual_value|} |] 
								      	              	      	      	      	      	      	dbisim(sbisim(Memory_opt_prior_error(0)
								      	              	      	      	      	      	      	      	[| {|get_prior_error,set_prior_error|} |] 
								      	              	      	      	      	      	      	      	STM_core(id__,
								      	              	      	      	      	      	      	      			    const_PID_kp,
								      	              	      	      	      	      	      	      			    const_PID_ki,
								      	              	      	      	      	      	      	      			    const_PID_kd,
								      	              	      	      	      	      	      	      			    const_PID_step)
								      	              	      	      	      	      	      	      	)\ {|get_prior_error,set_prior_error|}
								      	              	      	      	      	      	      	      )
								      	              	      	      	      	      	      	)\ {|get_actual_value,set_actual_value|}
								      	              	      	      	      	      	      )
								      	              	      	      	      	      	)\ {|set_output,get_output|}
								      	              	      	      	      	      )
								      	              	      	      	      	)\ {|get_derivative,set_derivative|}
								      	              	      	      	      )
								      	              	      	      	)\ {|get_target_value,set_target_value|}
								      	              	      	      )
								      	              	      	)\ {|set_integral,get_integral|}
								      	              	      )
								      	              	)\ {|set_error,get_error|}
								      	              )
								      	          	  [| {|internal__.TID_PID_t0,actual__.TID_PID_t3,internal__.TID_PID_t1,actual__.TID_PID_t5|} |]
								      	          	  MemoryTransitions_opt_0(id__)
								      	          	  )\{||})
								      	          )
								      	      	  [| {|target__.TID_PID_t2,target__.TID_PID_t4,set_old_target|} |]
								      	      	  MemoryTransitions_opt_1(id__)
								      	      	  )\{||})
								      	      )
								      	) \ {|get_old_target,set_old_target|}
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_prior_error,set_prior_error,
										get_integral,set_integral,
										get_error,set_error,
										get_derivative,set_derivative,
										get_output,set_output,
										get_target_value,set_target_value,
										get_actual_value,set_actual_value,
										get_old_target,set_old_target|},
										{||}
									)
										
									,
									{|internal__.TID_PID_t0,
									internal__.TID_PID_t1,
									target__.TID_PID_t4,
									actual__.TID_PID_t5,
									target__.TID_PID_t2,
									actual__.TID_PID_t3|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_prior_error,set_prior_error,
									get_integral,set_integral,
									get_error,set_error,
									get_derivative,set_derivative,
									get_output,set_output,
									get_target_value,set_target_value,
									get_actual_value,set_actual_value,
									get_old_target,set_old_target|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = prioritise((((
								wbisim(STM(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_PID_kp,
										 const_PID_ki,
										 const_PID_kd,
										 const_PID_step))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_PID_kp,
											    const_PID_ki,
											    const_PID_kd,
											    const_PID_step)
								)\WCsets
							)
							[[
								err_output__.x____ <- err_output,
								actual__.x____ <- actual,
								target__.x____ <- target
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_PID_kp,
													    const_PID_ki,
													    const_PID_kd,
													    const_PID_step)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_PID_kp,
													    const_PID_ki,
													    const_PID_kd,
													    const_PID_step))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_PID_kp,
											    const_PID_ki,
											    const_PID_kd,
											    const_PID_step)
									)[[
										err_output__.x____ <- err_output,
										actual__.x____ <- actual,
										target__.x____ <- target
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = prioritise((((
								wbisim(STM(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_PID_kp,
									 const_PID_ki,
									 const_PID_kd,
									 const_PID_step)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = || (alpha, P) : WCset(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = timed_priority(AUX(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = timed_priority(AUX_opt(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = D__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = timed_priority(AUX(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = ShowV(timed_priority(AUX(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = AUX(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step)
						}
					endmodule
					module stm_ref7
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_prior_error, set_prior_error: core_int
							channel get_integral, set_integral: core_int
							channel get_error, set_error: core_int
							channel get_derivative, set_derivative: core_int
							channel get_output, set_output: core_int
							channel get_target_value, set_target_value: core_int
							channel get_actual_value, set_actual_value: core_int
							channel get_old_target, set_old_target: core_int
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel err_output__: TIDS.InOut.core_int
							channel err_output: InOut.core_int
							channel actual__: TIDS.InOut.core_int
							channel actual: InOut.core_int
							channel target__: TIDS.InOut.core_int
							channel target: InOut.core_int
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_PID
							              | SID_PID_Update
							              | SID_PID_Wait_target
							              | SID_PID_Wait_actual
							              | SID_PID_Reset
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_PID_t0
							              | TID_PID_t1
							              | TID_PID_t4
							              | TID_PID_t5
							              | TID_PID_t2
							              | TID_PID_t3
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_PID_t1,	TID_PID_t4,	TID_PID_t5,	TID_PID_t2,	TID_PID_t3
							}
							
							int_int = {|
								err_output__.TID_PID_t1,
								actual__.TID_PID_t1,
								target__.TID_PID_t1,
								internal__.TID_PID_t1,
								err_output__.TID_PID_t4,
								actual__.TID_PID_t4,
								target__.TID_PID_t4,
								internal__.TID_PID_t4,
								err_output__.TID_PID_t5,
								actual__.TID_PID_t5,
								target__.TID_PID_t5,
								internal__.TID_PID_t5,
								err_output__.TID_PID_t2,
								actual__.TID_PID_t2,
								target__.TID_PID_t2,
								internal__.TID_PID_t2,
								err_output__.TID_PID_t3,
								actual__.TID_PID_t3,
								target__.TID_PID_t3,
								internal__.TID_PID_t3
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_PID_Update_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset},
								y____ <- {SID_PID_Update}
							|}
							
							
							PID_Update_triggers = {|
								actual__.TID_PID_t3,
								target__.TID_PID_t2,
								target__.TID_PID_t4,
								internal__.TID_PID_t1,
								actual__.TID_PID_t5
							|}
							
							State_PID_Update(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = let
								T_PID_t1(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = internal__!TID_PID_t1 ->  exit.SID_PID_Update.SID_PID_Update -> SKIP;
													SKIP;exited.SID_PID_Update.SID_PID_Update -> SKIP;
													WAIT(const_PID_step);enter!SID_PID_Update!SID_PID_Wait_target -> entered!SID_PID_Update!SID_PID_Wait_target ->
													State_PID_Update(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)
								State_PID_Update_execute(id__,o____) = get_target_value?target_value -> get_actual_value?actual_value -> true & (set_error!Minus(actual_value, target_value, core_int) -> SKIP);get_error?error -> get_integral?integral -> true & (set_integral!Plus(integral, (Mult(error, const_PID_step, core_int)), core_int) -> SKIP);get_error?error -> get_prior_error?prior_error -> const_PID_step != 0 & (set_derivative!floor(Div((Minus(error, prior_error, core_int)), const_PID_step, core_real)) -> SKIP);get_error?error -> get_derivative?derivative -> get_integral?integral -> true & (set_output!Plus(Plus(Mult(const_PID_kp, error, core_int), Mult(const_PID_ki, integral, core_int), core_int), Mult(const_PID_kd, derivative, core_int), core_int) -> SKIP);get_error?error -> true & (set_prior_error!error -> SKIP);get_output?output -> true&(err_output.out!output -> SKIP);get_target_value?target_value -> true & (set_old_target!target_value -> SKIP); 
									entered!o____!SID_PID_Update ->
									(SKIP; STOP /\ (
										T_PID_t1(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5}) -> exit?y____:diff(SIDS,{SID_PID_Update})!SID_PID_Update -> (
												SKIP;
												exited!y____!SID_PID_Update -> SKIP);
												State_PID_Update(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] err_output__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Update})!SID_PID_Update -> (
												SKIP;
												exited!y____!SID_PID_Update -> SKIP);
												State_PID_Update(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] actual__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Update})!SID_PID_Update -> (
												SKIP;
												exited!y____!SID_PID_Update -> SKIP);
												State_PID_Update(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] target__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Update})!SID_PID_Update -> (
												SKIP;
												exited!y____!SID_PID_Update -> SKIP);
												State_PID_Update(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
									))
							within
								enter?x____:diff(SIDS,{SID_PID_Update})!SID_PID_Update -> (State_PID_Update_execute(id__,x____))
							
							CS_PID_Wait_target_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset},
								y____ <- {SID_PID_Wait_target}
							|}
							
							
							PID_Wait_target_triggers = {|
								actual__.TID_PID_t3,
								target__.TID_PID_t2,
								target__.TID_PID_t4,
								internal__.TID_PID_t1,
								actual__.TID_PID_t5
							|}
							
							State_PID_Wait_target(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = let
								T_PID_t4(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = target__!TID_PID_t4.in?target_value -> set_target_value!target_value ->  (exit.SID_PID_Wait_target.SID_PID_Wait_target -> SKIP;
													SKIP;exited.SID_PID_Wait_target.SID_PID_Wait_target -> SKIP;
													enter!SID_PID_Wait_target!SID_PID_Wait_actual -> entered!SID_PID_Wait_target!SID_PID_Wait_actual ->
													State_PID_Wait_target(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)
								)
								T_PID_t2(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = target__!TID_PID_t2.in?target_value -> set_target_value!target_value ->  (exit.SID_PID_Wait_target.SID_PID_Wait_target -> SKIP;
													SKIP;exited.SID_PID_Wait_target.SID_PID_Wait_target -> SKIP;
													enter!SID_PID_Wait_target!SID_PID_Reset -> entered!SID_PID_Wait_target!SID_PID_Reset ->
													State_PID_Wait_target(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)
								)
								State_PID_Wait_target_execute(id__,o____) = SKIP; 
									entered!o____!SID_PID_Wait_target ->
									(SKIP; STOP /\ (
										T_PID_t4(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)[]
										T_PID_t2(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5}) -> exit?y____:diff(SIDS,{SID_PID_Wait_target})!SID_PID_Wait_target -> (
												SKIP;
												exited!y____!SID_PID_Wait_target -> SKIP);
												State_PID_Wait_target(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] err_output__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_target})!SID_PID_Wait_target -> (
												SKIP;
												exited!y____!SID_PID_Wait_target -> SKIP);
												State_PID_Wait_target(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] actual__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_target})!SID_PID_Wait_target -> (
												SKIP;
												exited!y____!SID_PID_Wait_target -> SKIP);
												State_PID_Wait_target(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] target__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_target})!SID_PID_Wait_target -> (
												SKIP;
												exited!y____!SID_PID_Wait_target -> SKIP);
												State_PID_Wait_target(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
									))
							within
								enter?x____:diff(SIDS,{SID_PID_Wait_target})!SID_PID_Wait_target -> (State_PID_Wait_target_execute(id__,x____))
							
							CS_PID_Wait_actual_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset},
								y____ <- {SID_PID_Wait_actual}
							|}
							
							
							PID_Wait_actual_triggers = {|
								actual__.TID_PID_t3,
								target__.TID_PID_t2,
								target__.TID_PID_t4,
								internal__.TID_PID_t1,
								actual__.TID_PID_t5
							|}
							
							State_PID_Wait_actual(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = let
								T_PID_t5(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = actual__!TID_PID_t5.in?actual_value -> set_actual_value!actual_value ->  (exit.SID_PID_Wait_actual.SID_PID_Wait_actual -> SKIP;
													SKIP;exited.SID_PID_Wait_actual.SID_PID_Wait_actual -> SKIP;
													enter!SID_PID_Wait_actual!SID_PID_Update -> entered!SID_PID_Wait_actual!SID_PID_Update ->
													State_PID_Wait_actual(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)
								)
								State_PID_Wait_actual_execute(id__,o____) = SKIP; 
									entered!o____!SID_PID_Wait_actual ->
									(SKIP; STOP /\ (
										T_PID_t5(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5}) -> exit?y____:diff(SIDS,{SID_PID_Wait_actual})!SID_PID_Wait_actual -> (
												SKIP;
												exited!y____!SID_PID_Wait_actual -> SKIP);
												State_PID_Wait_actual(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] err_output__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_actual})!SID_PID_Wait_actual -> (
												SKIP;
												exited!y____!SID_PID_Wait_actual -> SKIP);
												State_PID_Wait_actual(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] actual__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_actual})!SID_PID_Wait_actual -> (
												SKIP;
												exited!y____!SID_PID_Wait_actual -> SKIP);
												State_PID_Wait_actual(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] target__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Wait_actual})!SID_PID_Wait_actual -> (
												SKIP;
												exited!y____!SID_PID_Wait_actual -> SKIP);
												State_PID_Wait_actual(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
									))
							within
								enter?x____:diff(SIDS,{SID_PID_Wait_actual})!SID_PID_Wait_actual -> (State_PID_Wait_actual_execute(id__,x____))
							
							CS_PID_Reset_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset},
								y____ <- {SID_PID_Reset}
							|}
							
							
							PID_Reset_triggers = {|
								actual__.TID_PID_t3,
								target__.TID_PID_t2,
								target__.TID_PID_t4,
								internal__.TID_PID_t1,
								actual__.TID_PID_t5
							|}
							
							State_PID_Reset(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = let
								T_PID_t3(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = actual__!TID_PID_t3.in?actual_value -> set_actual_value!actual_value ->  (exit.SID_PID_Reset.SID_PID_Reset -> SKIP;
													SKIP;exited.SID_PID_Reset.SID_PID_Reset -> SKIP;
													enter!SID_PID_Reset!SID_PID_Update -> entered!SID_PID_Reset!SID_PID_Update ->
													State_PID_Reset(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)
								)
								State_PID_Reset_execute(id__,o____) = true & (set_prior_error!0 -> SKIP);true & (set_integral!0 -> SKIP); 
									entered!o____!SID_PID_Reset ->
									(SKIP; STOP /\ (
										T_PID_t3(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5}) -> exit?y____:diff(SIDS,{SID_PID_Reset})!SID_PID_Reset -> (
												SKIP;
												exited!y____!SID_PID_Reset -> SKIP);
												State_PID_Reset(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] err_output__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Reset})!SID_PID_Reset -> (
												SKIP;
												exited!y____!SID_PID_Reset -> SKIP);
												State_PID_Reset(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] actual__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Reset})!SID_PID_Reset -> (
												SKIP;
												exited!y____!SID_PID_Reset -> SKIP);
												State_PID_Reset(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
										[] target__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PID_t3,TID_PID_t2,TID_PID_t4,TID_PID_t1,TID_PID_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PID_Reset})!SID_PID_Reset -> (
												SKIP;
												exited!y____!SID_PID_Reset -> SKIP);
												State_PID_Reset(id__,
														    const_PID_kp,
														    const_PID_ki,
														    const_PID_kd,
														    const_PID_step)
									))
							within
								enter?x____:diff(SIDS,{SID_PID_Reset})!SID_PID_Reset -> (State_PID_Reset_execute(id__,x____))
							
							
							I_PID_i0(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = let
								T_PID_t0(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step) = internal__!TID_PID_t0 -> true & (set_prior_error!0 -> SKIP);true & (set_integral!0 -> SKIP);enter!SID_PID!SID_PID_Wait_target -> entered!SID_PID!SID_PID_Wait_target ->
								SKIP
							within
								T_PID_t0(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
							
							
							State_PID_Update_R(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								State_PID_Update(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
									[|diff(int_int,PID_Update_triggers)|]
								SKIP
									 		
							State_PID_Wait_target_R(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								State_PID_Wait_target(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
									[|diff(int_int,PID_Wait_target_triggers)|]
								SKIP
									 		
							State_PID_Wait_actual_R(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								State_PID_Wait_actual(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
									[|diff(int_int,PID_Wait_actual_triggers)|]
								SKIP
									 		
							State_PID_Reset_R(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								State_PID_Reset(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
									[|diff(int_int,PID_Reset_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = (
								I_PID_i0(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset}),
											y____ <- {SID_PID_Update,SID_PID_Wait_target,SID_PID_Wait_actual,SID_PID_Reset}
									|}|]
								(
									State_PID_Update_R(id__,
											    const_PID_kp,
											    const_PID_ki,
											    const_PID_kd,
											    const_PID_step)
										[|inter(CS_PID_Update_sync,union(union(CS_PID_Wait_target_sync,CS_PID_Wait_actual_sync),CS_PID_Reset_sync))|]
									(
										State_PID_Wait_target_R(id__,
												    const_PID_kp,
												    const_PID_ki,
												    const_PID_kd,
												    const_PID_step)
											[|inter(CS_PID_Wait_target_sync,union(CS_PID_Wait_actual_sync,CS_PID_Reset_sync))|]
										(
											State_PID_Wait_actual_R(id__,
													    const_PID_kp,
													    const_PID_ki,
													    const_PID_kd,
													    const_PID_step)
												[|inter(CS_PID_Wait_actual_sync,CS_PID_Reset_sync)|]
											State_PID_Reset_R(id__,
													    const_PID_kp,
													    const_PID_ki,
													    const_PID_kd,
													    const_PID_step)
										)
									)
								)
							)
							
							-- optimized memory process
							channel getV_prior_error: core_int
							channel getV_integral: core_int
							channel getV_error: core_int
							channel getV_derivative: core_int
							channel getV_output: core_int
							channel getV_target_value: core_int
							channel getV_actual_value: core_int
							channel getV_old_target: core_int
							
							-- individual memory processes
							Memory_prior_error(x__) = ( 
								get_prior_error!x__ -> Memory_prior_error(x__)
								[]
								getV_prior_error!x__ -> Memory_prior_error(x__)
								[]
								set_prior_error?x__ -> Memory_prior_error(x__)
							)
							Memory_integral(x__) = ( 
								get_integral!x__ -> Memory_integral(x__)
								[]
								getV_integral!x__ -> Memory_integral(x__)
								[]
								set_integral?x__ -> Memory_integral(x__)
							)
							Memory_error(x__) = ( 
								get_error!x__ -> Memory_error(x__)
								[]
								getV_error!x__ -> Memory_error(x__)
								[]
								set_error?x__ -> Memory_error(x__)
							)
							Memory_derivative(x__) = ( 
								get_derivative!x__ -> Memory_derivative(x__)
								[]
								getV_derivative!x__ -> Memory_derivative(x__)
								[]
								set_derivative?x__ -> Memory_derivative(x__)
							)
							Memory_output(x__) = ( 
								get_output!x__ -> Memory_output(x__)
								[]
								getV_output!x__ -> Memory_output(x__)
								[]
								set_output?x__ -> Memory_output(x__)
							)
							Memory_target_value(x__) = ( 
								get_target_value!x__ -> Memory_target_value(x__)
								[]
								getV_target_value!x__ -> Memory_target_value(x__)
								[]
								set_target_value?x__ -> Memory_target_value(x__)
								[]
								target__!TID_PID_t4.in?target_value -> Memory_target_value(target_value)
								[]
								target__!TID_PID_t2.in?target_value -> Memory_target_value(target_value)
							)
							Memory_actual_value(x__) = ( 
								get_actual_value!x__ -> Memory_actual_value(x__)
								[]
								getV_actual_value!x__ -> Memory_actual_value(x__)
								[]
								set_actual_value?x__ -> Memory_actual_value(x__)
								[]
								actual__!TID_PID_t5.in?actual_value -> Memory_actual_value(actual_value)
								[]
								actual__!TID_PID_t3.in?actual_value -> Memory_actual_value(actual_value)
							)
							Memory_old_target(x__) = ( 
								get_old_target!x__ -> Memory_old_target(x__)
								[]
								getV_old_target!x__ -> Memory_old_target(x__)
								[]
								set_old_target?x__ -> Memory_old_target(x__)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 prior_error,
								 integral,
								 error,
								 derivative,
								 output,
								 target_value,
								 actual_value,
								 old_target,
								 const_PID_kp,
								 const_PID_ki,
								 const_PID_kd,
								 const_PID_step) = (
								internal__!TID_PID_t0 -> SKIP
								[]
								internal__!TID_PID_t1 -> SKIP
								[]
								target__!TID_PID_t4.in?target_value:{target_value|target_value <- core_int, (target_value==old_target)} -> SKIP
								[]
								actual__!TID_PID_t5.in?actual_value -> SKIP
								[]
								target__!TID_PID_t2.in?target_value:{target_value|target_value <- core_int, (target_value!=old_target)} -> SKIP
								[]
								actual__!TID_PID_t3.in?actual_value -> SKIP
							
								[]
									set_prior_error?x__ -> SKIP
								[]
								set_integral?x__ -> SKIP
								[]
								set_error?x__ -> SKIP
								[]
								set_derivative?x__ -> SKIP
								[]
								set_output?x__ -> SKIP
								[]
								set_target_value?x__ -> SKIP
								[]
								set_actual_value?x__ -> SKIP
								[]
								set_old_target?x__ -> SKIP
							 	)
							MemoryTransitions_PID(id__,
								 const_PID_kp,
								 const_PID_ki,
								 const_PID_kd,
								 const_PID_step) =
								(
								getV_prior_error?prior_error ->	
								getV_integral?integral ->	
								getV_error?error ->	
								getV_derivative?derivative ->	
								getV_output?output ->	
								getV_target_value?target_value ->	
								getV_actual_value?actual_value ->	
								getV_old_target?old_target ->
								 MemoryTransitions(id__,
								 	 prior_error,
								 	 integral,
								 	 error,
								 	 derivative,
								 	 output,
								 	 target_value,
								 	 actual_value,
								 	 old_target,
								 	 const_PID_kp,
								 	 const_PID_ki,
								 	 const_PID_kd,
								 	 const_PID_step);
								 MemoryTransitions_PID(id__,
								 	 const_PID_kp,
								 	 const_PID_ki,
								 	 const_PID_kd,
								 	 const_PID_step)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_PID = Union(
								{
									{
										Memory_prior_error(0),
										Memory_integral(0),
										Memory_error(0),
										Memory_derivative(0),
										Memory_output(0),
										Memory_target_value(0),
										Memory_actual_value(0),
										Memory_old_target(0)
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									set_error,
									getV_actual_value,
									getV_error,
									getV_old_target,
									set_integral,
									getV_derivative,
									getV_output,
									target__.TID_PID_t4,
									getV_target_value,
									setWC,
									set_prior_error,
									set_target_value,
									set_old_target,
									getV_integral,
									target__.TID_PID_t2,
									set_derivative,
									set_output,
									actual__.TID_PID_t3,
									getV_prior_error,
									set_actual_value,
									actual__.TID_PID_t5
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_integral,
									getV_actual_value,
									getV_error,
									getV_old_target,
									getV_derivative,
									getV_output,
									getWC,
									getV_target_value,
									getV_prior_error
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_PID @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_PID_kp,
								 const_PID_ki,
								 const_PID_kd,
								 const_PID_step) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_PID(id__,
								 const_PID_kp,
								 const_PID_ki,
								 const_PID_kd,
								 const_PID_step)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- {old_target}
							-- Summary of all identified named elements:
							-- {
							-- error
							-- integral
							-- target_value
							-- derivative
							-- output
							-- old_target
							-- actual_value
							-- prior_error
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_PID_t1,
							--		TID_PID_t5,
							--		TID_PID_t3,
							--		TID_PID_t0}
							-- 1:{old_target}
							--	=> {
							--		TID_PID_t4,
							--		TID_PID_t2}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   internal__!TID_PID_t1 -> Update
									 	   []
									 	   actual__!TID_PID_t5.in?actual_value -> Update
									 	   []
									 	   actual__!TID_PID_t3.in?actual_value -> Update
									 	   []
									 	   internal__!TID_PID_t0 -> Update
								within
									Update
							)
							MemoryTransitions_opt_1(id__) =
							(
								let
									Update = 
									get_old_target?old_target ->
									Current(id__,
										 old_target)
									Current(id__,
										 old_target)
									 	   = 
									 	   target__!TID_PID_t4.in?target_value:{target_value|target_value <- core_int, (target_value==old_target)} -> Update
									 	   []
									 	   target__!TID_PID_t2.in?target_value:{target_value|target_value <- core_int, (target_value!=old_target)} -> Update
									 	   	 
									 	   	 []
									 	   	 set_old_target?x__ -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_error(x__) = ( 
								get_error!x__ -> Memory_opt_error(x__)
								[]
								set_error?x__ -> Memory_opt_error(x__)
							)
							Memory_opt_integral(x__) = ( 
								get_integral!x__ -> Memory_opt_integral(x__)
								[]
								set_integral?x__ -> Memory_opt_integral(x__)
							)
							Memory_opt_target_value(x__) = ( 
								get_target_value!x__ -> Memory_opt_target_value(x__)
								[]
								set_target_value?x__ -> Memory_opt_target_value(x__)
							)
							Memory_opt_derivative(x__) = ( 
								get_derivative!x__ -> Memory_opt_derivative(x__)
								[]
								set_derivative?x__ -> Memory_opt_derivative(x__)
							)
							Memory_opt_output(x__) = ( 
								get_output!x__ -> Memory_opt_output(x__)
								[]
								set_output?x__ -> Memory_opt_output(x__)
							)
							Memory_opt_old_target(x__) = ( 
								get_old_target!x__ -> Memory_opt_old_target(x__)
								[]
								set_old_target?x__ -> Memory_opt_old_target(x__)
							)
							Memory_opt_actual_value(x__) = ( 
								get_actual_value!x__ -> Memory_opt_actual_value(x__)
								[]
								set_actual_value?x__ -> Memory_opt_actual_value(x__)
							)
							Memory_opt_prior_error(x__) = ( 
								get_prior_error!x__ -> Memory_opt_prior_error(x__)
								[]
								set_prior_error?x__ -> Memory_opt_prior_error(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) =
								dbisim(
								  sbisim(Memory_opt_old_target(0)
								      	[| {|get_old_target,set_old_target|} |] 
								      	sbisim(	
								      	  dbisim(
								      	    sbisim(sbisim(	
								      	      dbisim(
								      	        sbisim(dbisim(sbisim(Memory_opt_error(0)
								      	              	[| {|set_error,get_error|} |] 
								      	              	dbisim(sbisim(Memory_opt_integral(0)
								      	              	      	[| {|set_integral,get_integral|} |] 
								      	              	      	dbisim(sbisim(Memory_opt_target_value(0)
								      	              	      	      	[| {|get_target_value,set_target_value|} |] 
								      	              	      	      	dbisim(sbisim(Memory_opt_derivative(0)
								      	              	      	      	      	[| {|get_derivative,set_derivative|} |] 
								      	              	      	      	      	dbisim(sbisim(Memory_opt_output(0)
								      	              	      	      	      	      	[| {|set_output,get_output|} |] 
								      	              	      	      	      	      	dbisim(sbisim(Memory_opt_actual_value(0)
								      	              	      	      	      	      	      	[| {|get_actual_value,set_actual_value|} |] 
								      	              	      	      	      	      	      	dbisim(sbisim(Memory_opt_prior_error(0)
								      	              	      	      	      	      	      	      	[| {|get_prior_error,set_prior_error|} |] 
								      	              	      	      	      	      	      	      	STM_core(id__,
								      	              	      	      	      	      	      	      			    const_PID_kp,
								      	              	      	      	      	      	      	      			    const_PID_ki,
								      	              	      	      	      	      	      	      			    const_PID_kd,
								      	              	      	      	      	      	      	      			    const_PID_step)
								      	              	      	      	      	      	      	      	)\ {|get_prior_error,set_prior_error|}
								      	              	      	      	      	      	      	      )
								      	              	      	      	      	      	      	)\ {|get_actual_value,set_actual_value|}
								      	              	      	      	      	      	      )
								      	              	      	      	      	      	)\ {|set_output,get_output|}
								      	              	      	      	      	      )
								      	              	      	      	      	)\ {|get_derivative,set_derivative|}
								      	              	      	      	      )
								      	              	      	      	)\ {|get_target_value,set_target_value|}
								      	              	      	      )
								      	              	      	)\ {|set_integral,get_integral|}
								      	              	      )
								      	              	)\ {|set_error,get_error|}
								      	              )
								      	          	  [| {|internal__.TID_PID_t0,actual__.TID_PID_t3,internal__.TID_PID_t1,actual__.TID_PID_t5|} |]
								      	          	  MemoryTransitions_opt_0(id__)
								      	          	  )\{||})
								      	          )
								      	      	  [| {|target__.TID_PID_t2,target__.TID_PID_t4,set_old_target|} |]
								      	      	  MemoryTransitions_opt_1(id__)
								      	      	  )\{||})
								      	      )
								      	) \ {|get_old_target,set_old_target|}
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_prior_error,set_prior_error,
										get_integral,set_integral,
										get_error,set_error,
										get_derivative,set_derivative,
										get_output,set_output,
										get_target_value,set_target_value,
										get_actual_value,set_actual_value,
										get_old_target,set_old_target|},
										{||}
									)
										
									,
									{|internal__.TID_PID_t0,
									internal__.TID_PID_t1,
									target__.TID_PID_t4,
									actual__.TID_PID_t5,
									target__.TID_PID_t2,
									actual__.TID_PID_t3|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_prior_error,set_prior_error,
									get_integral,set_integral,
									get_error,set_error,
									get_derivative,set_derivative,
									get_output,set_output,
									get_target_value,set_target_value,
									get_actual_value,set_actual_value,
									get_old_target,set_old_target|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = prioritise((((
								wbisim(STM(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_PID_kp,
										 const_PID_ki,
										 const_PID_kd,
										 const_PID_step))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_PID_kp,
											    const_PID_ki,
											    const_PID_kd,
											    const_PID_step)
								)\WCsets
							)
							[[
								err_output__.x____ <- err_output,
								actual__.x____ <- actual,
								target__.x____ <- target
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_PID_kp,
													    const_PID_ki,
													    const_PID_kd,
													    const_PID_step)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_PID_kp,
													    const_PID_ki,
													    const_PID_kd,
													    const_PID_step))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_PID_kp,
											    const_PID_ki,
											    const_PID_kd,
											    const_PID_step)
									)[[
										err_output__.x____ <- err_output,
										actual__.x____ <- actual,
										target__.x____ <- target
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = prioritise((((
								wbisim(STM(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_PID_kp,
									 const_PID_ki,
									 const_PID_kd,
									 const_PID_step)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_PID_kp,
										    const_PID_ki,
										    const_PID_kd,
										    const_PID_step))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = || (alpha, P) : WCset(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = timed_priority(AUX(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = timed_priority(AUX_opt(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = D__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = timed_priority(AUX(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = ShowV(timed_priority(AUX(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step) = AUX(id__,
									    const_PID_kp,
									    const_PID_ki,
									    const_PID_kd,
									    const_PID_step)
						}
					endmodule
					module stm_ref8
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_lspeed, set_lspeed: core_int
							channel get_rspeed, set_rspeed: core_int
							channel get_angle, set_angle: core_int
							channel get_speed_adj, set_speed_adj: core_int
							channel get_angle_adj, set_angle_adj: core_int
							channel get_direction, set_direction: Direction
							channel get_orientation, set_orientation: Orientation
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel target_speed__: TIDS.InOut.core_int
							channel target_speed: InOut.core_int
							channel target_angle__: TIDS.InOut.core_int
							channel target_angle: InOut.core_int
							channel speed_adjustment__: TIDS.InOut.core_int
							channel speed_adjustment: InOut.core_int
							channel angle_adjustment__: TIDS.InOut.core_int
							channel angle_adjustment: InOut.core_int
							channel move_forward__: TIDS.InOut
							channel move_forward: InOut
							channel turn__: TIDS.InOut.Direction
							channel turn: InOut.Direction
							channel stop__: TIDS.InOut
							channel stop: InOut
							
							-- declaring call and ret events for undefined operations
							channel output_left_motorCall: core_int
							channel output_right_motorCall: core_int
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							CALL__output_left_motor(id__,
									    x) =  EDeadline(output_left_motorCall.x,0)		
							CALL__output_right_motor(id__,
									    x) =  EDeadline(output_right_motorCall.x,0)		
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_MidLevelSM
							              | SID_MidLevelSM_Go_up
							              | SID_MidLevelSM_Turn_right
							              | SID_MidLevelSM_Go_down
							              | SID_MidLevelSM_Turn_left
							              | SID_MidLevelSM_Go_side
							              | SID_MidLevelSM_Stop
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_MidLevelSM_t1
							              | TID_MidLevelSM_t2
							              | TID_MidLevelSM_t3
							              | TID_MidLevelSM_t4
							              | TID_MidLevelSM_t5
							              | TID_MidLevelSM_t6
							              | TID_MidLevelSM_t7
							              | TID_MidLevelSM_t8
							              | TID_MidLevelSM_t9
							              | TID_MidLevelSM_t10
							              | TID_MidLevelSM_t11
							              | TID_MidLevelSM_t12
							              | TID_MidLevelSM_t13
							              | TID_MidLevelSM_t14
							              | TID_MidLevelSM_t0
							              | TID_MidLevelSM_t15
							              | TID_MidLevelSM_t16
							              | TID_MidLevelSM_t17
							              | TID_MidLevelSM_t18
							              | TID_MidLevelSM_t19
							              | TID_MidLevelSM_t20
							              | TID_MidLevelSM_t21
							              | TID_MidLevelSM_t22
							              | TID_MidLevelSM_t23
							              | TID_MidLevelSM_t24
							              | TID_MidLevelSM_t25
							              | TID_MidLevelSM_t26
							              | TID_MidLevelSM_t27
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_MidLevelSM_t1,	TID_MidLevelSM_t2,	TID_MidLevelSM_t3,	TID_MidLevelSM_t4,	TID_MidLevelSM_t5,	TID_MidLevelSM_t6,	TID_MidLevelSM_t7,	TID_MidLevelSM_t8,	TID_MidLevelSM_t9,	TID_MidLevelSM_t10,	TID_MidLevelSM_t11,	TID_MidLevelSM_t12,	TID_MidLevelSM_t13,	TID_MidLevelSM_t14,	TID_MidLevelSM_t15,	TID_MidLevelSM_t16,	TID_MidLevelSM_t17,	TID_MidLevelSM_t18,	TID_MidLevelSM_t19,	TID_MidLevelSM_t20,	TID_MidLevelSM_t21,	TID_MidLevelSM_t22,	TID_MidLevelSM_t23,	TID_MidLevelSM_t24,	TID_MidLevelSM_t25,	TID_MidLevelSM_t26,	TID_MidLevelSM_t27
							}
							
							int_int = {|
								target_speed__.TID_MidLevelSM_t1,
								target_angle__.TID_MidLevelSM_t1,
								speed_adjustment__.TID_MidLevelSM_t1,
								angle_adjustment__.TID_MidLevelSM_t1,
								move_forward__.TID_MidLevelSM_t1,
								turn__.TID_MidLevelSM_t1,
								stop__.TID_MidLevelSM_t1,
								internal__.TID_MidLevelSM_t1,
								target_speed__.TID_MidLevelSM_t2,
								target_angle__.TID_MidLevelSM_t2,
								speed_adjustment__.TID_MidLevelSM_t2,
								angle_adjustment__.TID_MidLevelSM_t2,
								move_forward__.TID_MidLevelSM_t2,
								turn__.TID_MidLevelSM_t2,
								stop__.TID_MidLevelSM_t2,
								internal__.TID_MidLevelSM_t2,
								target_speed__.TID_MidLevelSM_t3,
								target_angle__.TID_MidLevelSM_t3,
								speed_adjustment__.TID_MidLevelSM_t3,
								angle_adjustment__.TID_MidLevelSM_t3,
								move_forward__.TID_MidLevelSM_t3,
								turn__.TID_MidLevelSM_t3,
								stop__.TID_MidLevelSM_t3,
								internal__.TID_MidLevelSM_t3,
								target_speed__.TID_MidLevelSM_t4,
								target_angle__.TID_MidLevelSM_t4,
								speed_adjustment__.TID_MidLevelSM_t4,
								angle_adjustment__.TID_MidLevelSM_t4,
								move_forward__.TID_MidLevelSM_t4,
								turn__.TID_MidLevelSM_t4,
								stop__.TID_MidLevelSM_t4,
								internal__.TID_MidLevelSM_t4,
								target_speed__.TID_MidLevelSM_t5,
								target_angle__.TID_MidLevelSM_t5,
								speed_adjustment__.TID_MidLevelSM_t5,
								angle_adjustment__.TID_MidLevelSM_t5,
								move_forward__.TID_MidLevelSM_t5,
								turn__.TID_MidLevelSM_t5,
								stop__.TID_MidLevelSM_t5,
								internal__.TID_MidLevelSM_t5,
								target_speed__.TID_MidLevelSM_t6,
								target_angle__.TID_MidLevelSM_t6,
								speed_adjustment__.TID_MidLevelSM_t6,
								angle_adjustment__.TID_MidLevelSM_t6,
								move_forward__.TID_MidLevelSM_t6,
								turn__.TID_MidLevelSM_t6,
								stop__.TID_MidLevelSM_t6,
								internal__.TID_MidLevelSM_t6,
								target_speed__.TID_MidLevelSM_t7,
								target_angle__.TID_MidLevelSM_t7,
								speed_adjustment__.TID_MidLevelSM_t7,
								angle_adjustment__.TID_MidLevelSM_t7,
								move_forward__.TID_MidLevelSM_t7,
								turn__.TID_MidLevelSM_t7,
								stop__.TID_MidLevelSM_t7,
								internal__.TID_MidLevelSM_t7,
								target_speed__.TID_MidLevelSM_t8,
								target_angle__.TID_MidLevelSM_t8,
								speed_adjustment__.TID_MidLevelSM_t8,
								angle_adjustment__.TID_MidLevelSM_t8,
								move_forward__.TID_MidLevelSM_t8,
								turn__.TID_MidLevelSM_t8,
								stop__.TID_MidLevelSM_t8,
								internal__.TID_MidLevelSM_t8,
								target_speed__.TID_MidLevelSM_t9,
								target_angle__.TID_MidLevelSM_t9,
								speed_adjustment__.TID_MidLevelSM_t9,
								angle_adjustment__.TID_MidLevelSM_t9,
								move_forward__.TID_MidLevelSM_t9,
								turn__.TID_MidLevelSM_t9,
								stop__.TID_MidLevelSM_t9,
								internal__.TID_MidLevelSM_t9,
								target_speed__.TID_MidLevelSM_t10,
								target_angle__.TID_MidLevelSM_t10,
								speed_adjustment__.TID_MidLevelSM_t10,
								angle_adjustment__.TID_MidLevelSM_t10,
								move_forward__.TID_MidLevelSM_t10,
								turn__.TID_MidLevelSM_t10,
								stop__.TID_MidLevelSM_t10,
								internal__.TID_MidLevelSM_t10,
								target_speed__.TID_MidLevelSM_t11,
								target_angle__.TID_MidLevelSM_t11,
								speed_adjustment__.TID_MidLevelSM_t11,
								angle_adjustment__.TID_MidLevelSM_t11,
								move_forward__.TID_MidLevelSM_t11,
								turn__.TID_MidLevelSM_t11,
								stop__.TID_MidLevelSM_t11,
								internal__.TID_MidLevelSM_t11,
								target_speed__.TID_MidLevelSM_t12,
								target_angle__.TID_MidLevelSM_t12,
								speed_adjustment__.TID_MidLevelSM_t12,
								angle_adjustment__.TID_MidLevelSM_t12,
								move_forward__.TID_MidLevelSM_t12,
								turn__.TID_MidLevelSM_t12,
								stop__.TID_MidLevelSM_t12,
								internal__.TID_MidLevelSM_t12,
								target_speed__.TID_MidLevelSM_t13,
								target_angle__.TID_MidLevelSM_t13,
								speed_adjustment__.TID_MidLevelSM_t13,
								angle_adjustment__.TID_MidLevelSM_t13,
								move_forward__.TID_MidLevelSM_t13,
								turn__.TID_MidLevelSM_t13,
								stop__.TID_MidLevelSM_t13,
								internal__.TID_MidLevelSM_t13,
								target_speed__.TID_MidLevelSM_t14,
								target_angle__.TID_MidLevelSM_t14,
								speed_adjustment__.TID_MidLevelSM_t14,
								angle_adjustment__.TID_MidLevelSM_t14,
								move_forward__.TID_MidLevelSM_t14,
								turn__.TID_MidLevelSM_t14,
								stop__.TID_MidLevelSM_t14,
								internal__.TID_MidLevelSM_t14,
								target_speed__.TID_MidLevelSM_t15,
								target_angle__.TID_MidLevelSM_t15,
								speed_adjustment__.TID_MidLevelSM_t15,
								angle_adjustment__.TID_MidLevelSM_t15,
								move_forward__.TID_MidLevelSM_t15,
								turn__.TID_MidLevelSM_t15,
								stop__.TID_MidLevelSM_t15,
								internal__.TID_MidLevelSM_t15,
								target_speed__.TID_MidLevelSM_t16,
								target_angle__.TID_MidLevelSM_t16,
								speed_adjustment__.TID_MidLevelSM_t16,
								angle_adjustment__.TID_MidLevelSM_t16,
								move_forward__.TID_MidLevelSM_t16,
								turn__.TID_MidLevelSM_t16,
								stop__.TID_MidLevelSM_t16,
								internal__.TID_MidLevelSM_t16,
								target_speed__.TID_MidLevelSM_t17,
								target_angle__.TID_MidLevelSM_t17,
								speed_adjustment__.TID_MidLevelSM_t17,
								angle_adjustment__.TID_MidLevelSM_t17,
								move_forward__.TID_MidLevelSM_t17,
								turn__.TID_MidLevelSM_t17,
								stop__.TID_MidLevelSM_t17,
								internal__.TID_MidLevelSM_t17,
								target_speed__.TID_MidLevelSM_t18,
								target_angle__.TID_MidLevelSM_t18,
								speed_adjustment__.TID_MidLevelSM_t18,
								angle_adjustment__.TID_MidLevelSM_t18,
								move_forward__.TID_MidLevelSM_t18,
								turn__.TID_MidLevelSM_t18,
								stop__.TID_MidLevelSM_t18,
								internal__.TID_MidLevelSM_t18,
								target_speed__.TID_MidLevelSM_t19,
								target_angle__.TID_MidLevelSM_t19,
								speed_adjustment__.TID_MidLevelSM_t19,
								angle_adjustment__.TID_MidLevelSM_t19,
								move_forward__.TID_MidLevelSM_t19,
								turn__.TID_MidLevelSM_t19,
								stop__.TID_MidLevelSM_t19,
								internal__.TID_MidLevelSM_t19,
								target_speed__.TID_MidLevelSM_t20,
								target_angle__.TID_MidLevelSM_t20,
								speed_adjustment__.TID_MidLevelSM_t20,
								angle_adjustment__.TID_MidLevelSM_t20,
								move_forward__.TID_MidLevelSM_t20,
								turn__.TID_MidLevelSM_t20,
								stop__.TID_MidLevelSM_t20,
								internal__.TID_MidLevelSM_t20,
								target_speed__.TID_MidLevelSM_t21,
								target_angle__.TID_MidLevelSM_t21,
								speed_adjustment__.TID_MidLevelSM_t21,
								angle_adjustment__.TID_MidLevelSM_t21,
								move_forward__.TID_MidLevelSM_t21,
								turn__.TID_MidLevelSM_t21,
								stop__.TID_MidLevelSM_t21,
								internal__.TID_MidLevelSM_t21,
								target_speed__.TID_MidLevelSM_t22,
								target_angle__.TID_MidLevelSM_t22,
								speed_adjustment__.TID_MidLevelSM_t22,
								angle_adjustment__.TID_MidLevelSM_t22,
								move_forward__.TID_MidLevelSM_t22,
								turn__.TID_MidLevelSM_t22,
								stop__.TID_MidLevelSM_t22,
								internal__.TID_MidLevelSM_t22,
								target_speed__.TID_MidLevelSM_t23,
								target_angle__.TID_MidLevelSM_t23,
								speed_adjustment__.TID_MidLevelSM_t23,
								angle_adjustment__.TID_MidLevelSM_t23,
								move_forward__.TID_MidLevelSM_t23,
								turn__.TID_MidLevelSM_t23,
								stop__.TID_MidLevelSM_t23,
								internal__.TID_MidLevelSM_t23,
								target_speed__.TID_MidLevelSM_t24,
								target_angle__.TID_MidLevelSM_t24,
								speed_adjustment__.TID_MidLevelSM_t24,
								angle_adjustment__.TID_MidLevelSM_t24,
								move_forward__.TID_MidLevelSM_t24,
								turn__.TID_MidLevelSM_t24,
								stop__.TID_MidLevelSM_t24,
								internal__.TID_MidLevelSM_t24,
								target_speed__.TID_MidLevelSM_t25,
								target_angle__.TID_MidLevelSM_t25,
								speed_adjustment__.TID_MidLevelSM_t25,
								angle_adjustment__.TID_MidLevelSM_t25,
								move_forward__.TID_MidLevelSM_t25,
								turn__.TID_MidLevelSM_t25,
								stop__.TID_MidLevelSM_t25,
								internal__.TID_MidLevelSM_t25,
								target_speed__.TID_MidLevelSM_t26,
								target_angle__.TID_MidLevelSM_t26,
								speed_adjustment__.TID_MidLevelSM_t26,
								angle_adjustment__.TID_MidLevelSM_t26,
								move_forward__.TID_MidLevelSM_t26,
								turn__.TID_MidLevelSM_t26,
								stop__.TID_MidLevelSM_t26,
								internal__.TID_MidLevelSM_t26,
								target_speed__.TID_MidLevelSM_t27,
								target_angle__.TID_MidLevelSM_t27,
								speed_adjustment__.TID_MidLevelSM_t27,
								angle_adjustment__.TID_MidLevelSM_t27,
								move_forward__.TID_MidLevelSM_t27,
								turn__.TID_MidLevelSM_t27,
								stop__.TID_MidLevelSM_t27,
								internal__.TID_MidLevelSM_t27
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_MidLevelSM_Go_up_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_MidLevelSM_Go_up,SID_MidLevelSM_Turn_right,SID_MidLevelSM_Go_down,SID_MidLevelSM_Turn_left,SID_MidLevelSM_Go_side,SID_MidLevelSM_Stop},
								y____ <- {SID_MidLevelSM_Go_up}
							|}
							
							
							MidLevelSM_Go_up_triggers = {|
								turn__.TID_MidLevelSM_t3,
								internal__.TID_MidLevelSM_t24,
								internal__.TID_MidLevelSM_t25,
								turn__.TID_MidLevelSM_t12,
								turn__.TID_MidLevelSM_t13,
								stop__.TID_MidLevelSM_t17,
								turn__.TID_MidLevelSM_t4,
								move_forward__.TID_MidLevelSM_t5,
								internal__.TID_MidLevelSM_t23,
								internal__.TID_MidLevelSM_t27,
								move_forward__.TID_MidLevelSM_t8,
								turn__.TID_MidLevelSM_t14,
								turn__.TID_MidLevelSM_t15,
								stop__.TID_MidLevelSM_t18,
								move_forward__.TID_MidLevelSM_t10,
								move_forward__.TID_MidLevelSM_t9,
								internal__.TID_MidLevelSM_t26,
								turn__.TID_MidLevelSM_t11,
								internal__.TID_MidLevelSM_t22,
								turn__.TID_MidLevelSM_t16,
								turn__.TID_MidLevelSM_t21,
								move_forward__.TID_MidLevelSM_t2,
								turn__.TID_MidLevelSM_t1,
								stop__.TID_MidLevelSM_t19,
								move_forward__.TID_MidLevelSM_t7,
								turn__.TID_MidLevelSM_t20,
								turn__.TID_MidLevelSM_t6
							|}
							
							State_MidLevelSM_Go_up(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = let
								T_MidLevelSM_t1(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t1.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Go_up.SID_MidLevelSM_Go_up -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_up.SID_MidLevelSM_Go_up -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_right(orientation) -> SKIP);true & (set_lspeed!const_MidLevelSM_stopsp -> SKIP);true & (set_rspeed!const_MidLevelSM_stopsp -> SKIP);enter!SID_MidLevelSM_Go_up!SID_MidLevelSM_Turn_right -> entered!SID_MidLevelSM_Go_up!SID_MidLevelSM_Turn_right ->
													State_MidLevelSM_Go_up(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t3(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t3.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Go_up.SID_MidLevelSM_Go_up -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_up.SID_MidLevelSM_Go_up -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_left(orientation) -> SKIP);true & (set_lspeed!const_MidLevelSM_stopsp -> SKIP);true & (set_rspeed!const_MidLevelSM_stopsp -> SKIP);enter!SID_MidLevelSM_Go_up!SID_MidLevelSM_Turn_left -> entered!SID_MidLevelSM_Go_up!SID_MidLevelSM_Turn_left ->
													State_MidLevelSM_Go_up(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t17(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = stop__!TID_MidLevelSM_t17.in ->  (exit.SID_MidLevelSM_Go_up.SID_MidLevelSM_Go_up -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_up.SID_MidLevelSM_Go_up -> SKIP;
													true & (set_lspeed!const_MidLevelSM_stopsp -> SKIP);true & (set_rspeed!const_MidLevelSM_stopsp -> SKIP);enter!SID_MidLevelSM_Go_up!SID_MidLevelSM_Stop -> entered!SID_MidLevelSM_Go_up!SID_MidLevelSM_Stop ->
													State_MidLevelSM_Go_up(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t24(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = internal__!TID_MidLevelSM_t24 ->  exit.SID_MidLevelSM_Go_up.SID_MidLevelSM_Go_up -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_up.SID_MidLevelSM_Go_up -> SKIP;
													enter!SID_MidLevelSM_Go_up!SID_MidLevelSM_Go_up -> State_MidLevelSM_Go_up_execute(id__,SID_MidLevelSM_Go_up)
								State_MidLevelSM_Go_up_execute(id__,o____) = true&(target_speed.out!const_MidLevelSM_climb_speed -> SKIP);true&(speed_adjustment.in?speed_adj -> set_speed_adj!speed_adj -> SKIP);true&(target_angle.out!const_MidLevelSM_forward_angle -> SKIP);true&(angle_adjustment.in?angle_adj -> set_angle_adj!angle_adj -> SKIP);get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> get_lspeed?lspeed -> true & (set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_rspeed?rspeed -> get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> true & (set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_lspeed?lspeed -> true&CALL__output_left_motor(
											id__,
											lspeed
										);get_rspeed?rspeed -> true&CALL__output_right_motor(
											id__,
											rspeed
										); 
									entered!o____!SID_MidLevelSM_Go_up ->
									(SKIP; STOP /\ (
										T_MidLevelSM_t1(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t3(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t17(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t24(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t24,TID_MidLevelSM_t25,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t1,TID_MidLevelSM_t19,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6}) -> exit?y____:diff(SIDS,{SID_MidLevelSM_Go_up})!SID_MidLevelSM_Go_up -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_up -> SKIP);
												State_MidLevelSM_Go_up(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_speed__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t24,TID_MidLevelSM_t25,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t1,TID_MidLevelSM_t19,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_up})!SID_MidLevelSM_Go_up -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_up -> SKIP);
												State_MidLevelSM_Go_up(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t24,TID_MidLevelSM_t25,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t1,TID_MidLevelSM_t19,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_up})!SID_MidLevelSM_Go_up -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_up -> SKIP);
												State_MidLevelSM_Go_up(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] speed_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t24,TID_MidLevelSM_t25,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t1,TID_MidLevelSM_t19,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_up})!SID_MidLevelSM_Go_up -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_up -> SKIP);
												State_MidLevelSM_Go_up(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] angle_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t24,TID_MidLevelSM_t25,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t1,TID_MidLevelSM_t19,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_up})!SID_MidLevelSM_Go_up -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_up -> SKIP);
												State_MidLevelSM_Go_up(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t24,TID_MidLevelSM_t25,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t1,TID_MidLevelSM_t19,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_up})!SID_MidLevelSM_Go_up -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_up -> SKIP);
												State_MidLevelSM_Go_up(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t24,TID_MidLevelSM_t25,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t1,TID_MidLevelSM_t19,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_up})!SID_MidLevelSM_Go_up -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_up -> SKIP);
												State_MidLevelSM_Go_up(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t24,TID_MidLevelSM_t25,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t1,TID_MidLevelSM_t19,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_up})!SID_MidLevelSM_Go_up -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_up -> SKIP);
												State_MidLevelSM_Go_up(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
									))
							within
								enter?x____:diff(SIDS,{SID_MidLevelSM_Go_up})!SID_MidLevelSM_Go_up -> (State_MidLevelSM_Go_up_execute(id__,x____))
							
							CS_MidLevelSM_Turn_right_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_MidLevelSM_Go_up,SID_MidLevelSM_Turn_right,SID_MidLevelSM_Go_down,SID_MidLevelSM_Turn_left,SID_MidLevelSM_Go_side,SID_MidLevelSM_Stop},
								y____ <- {SID_MidLevelSM_Turn_right}
							|}
							
							
							MidLevelSM_Turn_right_triggers = {|
								turn__.TID_MidLevelSM_t3,
								internal__.TID_MidLevelSM_t25,
								internal__.TID_MidLevelSM_t24,
								turn__.TID_MidLevelSM_t12,
								turn__.TID_MidLevelSM_t13,
								turn__.TID_MidLevelSM_t4,
								stop__.TID_MidLevelSM_t17,
								move_forward__.TID_MidLevelSM_t5,
								internal__.TID_MidLevelSM_t23,
								internal__.TID_MidLevelSM_t27,
								move_forward__.TID_MidLevelSM_t8,
								turn__.TID_MidLevelSM_t14,
								turn__.TID_MidLevelSM_t15,
								stop__.TID_MidLevelSM_t18,
								move_forward__.TID_MidLevelSM_t10,
								move_forward__.TID_MidLevelSM_t9,
								internal__.TID_MidLevelSM_t26,
								turn__.TID_MidLevelSM_t11,
								internal__.TID_MidLevelSM_t22,
								turn__.TID_MidLevelSM_t16,
								turn__.TID_MidLevelSM_t21,
								move_forward__.TID_MidLevelSM_t2,
								stop__.TID_MidLevelSM_t19,
								turn__.TID_MidLevelSM_t1,
								move_forward__.TID_MidLevelSM_t7,
								turn__.TID_MidLevelSM_t20,
								turn__.TID_MidLevelSM_t6
							|}
							
							State_MidLevelSM_Turn_right(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = let
								T_MidLevelSM_t2(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = move_forward__!TID_MidLevelSM_t2.in ->  (exit.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													true & (set_rspeed!const_MidLevelSM_movesp -> SKIP);true & (set_lspeed!const_MidLevelSM_movesp -> SKIP);enter!SID_MidLevelSM_Turn_right!SID_MidLevelSM_Go_side -> entered!SID_MidLevelSM_Turn_right!SID_MidLevelSM_Go_side ->
													State_MidLevelSM_Turn_right(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t4(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t4.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_right(orientation) -> SKIP);enter!SID_MidLevelSM_Turn_right!SID_MidLevelSM_Turn_right -> State_MidLevelSM_Turn_right_execute(id__,SID_MidLevelSM_Turn_right)
								)
								T_MidLevelSM_t7(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = move_forward__!TID_MidLevelSM_t7.in ->  (exit.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													true & (set_lspeed!const_MidLevelSM_movesp -> SKIP);true & (set_rspeed!const_MidLevelSM_movesp -> SKIP);enter!SID_MidLevelSM_Turn_right!SID_MidLevelSM_Go_up -> entered!SID_MidLevelSM_Turn_right!SID_MidLevelSM_Go_up ->
													State_MidLevelSM_Turn_right(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t8(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = move_forward__!TID_MidLevelSM_t8.in ->  (exit.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													true & (set_lspeed!const_MidLevelSM_movesp -> SKIP);true & (set_rspeed!const_MidLevelSM_movesp -> SKIP);enter!SID_MidLevelSM_Turn_right!SID_MidLevelSM_Go_down -> entered!SID_MidLevelSM_Turn_right!SID_MidLevelSM_Go_down ->
													State_MidLevelSM_Turn_right(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t15(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t15.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_left(orientation) -> SKIP);enter!SID_MidLevelSM_Turn_right!SID_MidLevelSM_Turn_left -> entered!SID_MidLevelSM_Turn_right!SID_MidLevelSM_Turn_left ->
													State_MidLevelSM_Turn_right(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t22(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = internal__!TID_MidLevelSM_t22 ->  exit.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_right.SID_MidLevelSM_Turn_right -> SKIP;
													enter!SID_MidLevelSM_Turn_right!SID_MidLevelSM_Turn_right -> State_MidLevelSM_Turn_right_execute(id__,SID_MidLevelSM_Turn_right)
								State_MidLevelSM_Turn_right_execute(id__,o____) = true&(target_speed.out!const_MidLevelSM_turn_speed -> SKIP);true&(speed_adjustment.in?speed_adj -> set_speed_adj!speed_adj -> SKIP);true&(target_angle.out!const_MidLevelSM_right_angle -> SKIP);true&(angle_adjustment.in?angle_adj -> set_angle_adj!angle_adj -> SKIP);get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> get_lspeed?lspeed -> true & (set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_rspeed?rspeed -> get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> true & (set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_lspeed?lspeed -> true&CALL__output_left_motor(
											id__,
											lspeed
										);get_rspeed?rspeed -> true&CALL__output_right_motor(
											id__,
											rspeed
										); 
									entered!o____!SID_MidLevelSM_Turn_right ->
									(SKIP; STOP /\ (
										T_MidLevelSM_t2(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t4(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t7(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t8(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t15(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t22(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6}) -> exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_right})!SID_MidLevelSM_Turn_right -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_right -> SKIP);
												State_MidLevelSM_Turn_right(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_speed__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_right})!SID_MidLevelSM_Turn_right -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_right -> SKIP);
												State_MidLevelSM_Turn_right(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_right})!SID_MidLevelSM_Turn_right -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_right -> SKIP);
												State_MidLevelSM_Turn_right(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] speed_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_right})!SID_MidLevelSM_Turn_right -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_right -> SKIP);
												State_MidLevelSM_Turn_right(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] angle_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_right})!SID_MidLevelSM_Turn_right -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_right -> SKIP);
												State_MidLevelSM_Turn_right(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_right})!SID_MidLevelSM_Turn_right -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_right -> SKIP);
												State_MidLevelSM_Turn_right(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_right})!SID_MidLevelSM_Turn_right -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_right -> SKIP);
												State_MidLevelSM_Turn_right(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_right})!SID_MidLevelSM_Turn_right -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_right -> SKIP);
												State_MidLevelSM_Turn_right(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
									))
							within
								enter?x____:diff(SIDS,{SID_MidLevelSM_Turn_right})!SID_MidLevelSM_Turn_right -> (State_MidLevelSM_Turn_right_execute(id__,x____))
							
							CS_MidLevelSM_Go_down_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_MidLevelSM_Go_up,SID_MidLevelSM_Turn_right,SID_MidLevelSM_Go_down,SID_MidLevelSM_Turn_left,SID_MidLevelSM_Go_side,SID_MidLevelSM_Stop},
								y____ <- {SID_MidLevelSM_Go_down}
							|}
							
							
							MidLevelSM_Go_down_triggers = {|
								turn__.TID_MidLevelSM_t3,
								internal__.TID_MidLevelSM_t25,
								internal__.TID_MidLevelSM_t24,
								turn__.TID_MidLevelSM_t12,
								turn__.TID_MidLevelSM_t13,
								turn__.TID_MidLevelSM_t4,
								stop__.TID_MidLevelSM_t17,
								move_forward__.TID_MidLevelSM_t5,
								internal__.TID_MidLevelSM_t27,
								internal__.TID_MidLevelSM_t23,
								move_forward__.TID_MidLevelSM_t8,
								turn__.TID_MidLevelSM_t14,
								turn__.TID_MidLevelSM_t15,
								stop__.TID_MidLevelSM_t18,
								move_forward__.TID_MidLevelSM_t10,
								move_forward__.TID_MidLevelSM_t9,
								internal__.TID_MidLevelSM_t26,
								turn__.TID_MidLevelSM_t11,
								internal__.TID_MidLevelSM_t22,
								turn__.TID_MidLevelSM_t16,
								turn__.TID_MidLevelSM_t21,
								move_forward__.TID_MidLevelSM_t2,
								stop__.TID_MidLevelSM_t19,
								turn__.TID_MidLevelSM_t1,
								move_forward__.TID_MidLevelSM_t7,
								turn__.TID_MidLevelSM_t20,
								turn__.TID_MidLevelSM_t6
							|}
							
							State_MidLevelSM_Go_down(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = let
								T_MidLevelSM_t13(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t13.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Go_down.SID_MidLevelSM_Go_down -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_down.SID_MidLevelSM_Go_down -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_left(orientation) -> SKIP);true & (set_lspeed!const_MidLevelSM_stopsp -> SKIP);true & (set_rspeed!const_MidLevelSM_stopsp -> SKIP);enter!SID_MidLevelSM_Go_down!SID_MidLevelSM_Turn_left -> entered!SID_MidLevelSM_Go_down!SID_MidLevelSM_Turn_left ->
													State_MidLevelSM_Go_down(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t14(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t14.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Go_down.SID_MidLevelSM_Go_down -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_down.SID_MidLevelSM_Go_down -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_right(orientation) -> SKIP);true & (set_lspeed!const_MidLevelSM_stopsp -> SKIP);true & (set_rspeed!const_MidLevelSM_stopsp -> SKIP);enter!SID_MidLevelSM_Go_down!SID_MidLevelSM_Turn_right -> entered!SID_MidLevelSM_Go_down!SID_MidLevelSM_Turn_right ->
													State_MidLevelSM_Go_down(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t18(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = stop__!TID_MidLevelSM_t18.in ->  (exit.SID_MidLevelSM_Go_down.SID_MidLevelSM_Go_down -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_down.SID_MidLevelSM_Go_down -> SKIP;
													true & (set_lspeed!const_MidLevelSM_stopsp -> SKIP);true & (set_rspeed!const_MidLevelSM_stopsp -> SKIP);enter!SID_MidLevelSM_Go_down!SID_MidLevelSM_Stop -> entered!SID_MidLevelSM_Go_down!SID_MidLevelSM_Stop ->
													State_MidLevelSM_Go_down(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t27(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = internal__!TID_MidLevelSM_t27 ->  exit.SID_MidLevelSM_Go_down.SID_MidLevelSM_Go_down -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_down.SID_MidLevelSM_Go_down -> SKIP;
													enter!SID_MidLevelSM_Go_down!SID_MidLevelSM_Go_down -> State_MidLevelSM_Go_down_execute(id__,SID_MidLevelSM_Go_down)
								State_MidLevelSM_Go_down_execute(id__,o____) = true&(target_speed.out!const_MidLevelSM_descent_speed -> SKIP);true&(speed_adjustment.in?speed_adj -> set_speed_adj!speed_adj -> SKIP);true&(target_angle.out!const_MidLevelSM_forward_angle -> SKIP);true&(angle_adjustment.in?angle_adj -> set_angle_adj!angle_adj -> SKIP);get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> get_lspeed?lspeed -> true & (set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_rspeed?rspeed -> get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> true & (set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_lspeed?lspeed -> true&CALL__output_left_motor(
											id__,
											lspeed
										);get_rspeed?rspeed -> true&CALL__output_right_motor(
											id__,
											rspeed
										); 
									entered!o____!SID_MidLevelSM_Go_down ->
									(SKIP; STOP /\ (
										T_MidLevelSM_t13(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t14(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t18(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t27(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t27,TID_MidLevelSM_t23,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6}) -> exit?y____:diff(SIDS,{SID_MidLevelSM_Go_down})!SID_MidLevelSM_Go_down -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_down -> SKIP);
												State_MidLevelSM_Go_down(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_speed__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t27,TID_MidLevelSM_t23,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_down})!SID_MidLevelSM_Go_down -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_down -> SKIP);
												State_MidLevelSM_Go_down(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t27,TID_MidLevelSM_t23,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_down})!SID_MidLevelSM_Go_down -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_down -> SKIP);
												State_MidLevelSM_Go_down(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] speed_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t27,TID_MidLevelSM_t23,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_down})!SID_MidLevelSM_Go_down -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_down -> SKIP);
												State_MidLevelSM_Go_down(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] angle_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t27,TID_MidLevelSM_t23,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_down})!SID_MidLevelSM_Go_down -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_down -> SKIP);
												State_MidLevelSM_Go_down(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t27,TID_MidLevelSM_t23,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_down})!SID_MidLevelSM_Go_down -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_down -> SKIP);
												State_MidLevelSM_Go_down(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t27,TID_MidLevelSM_t23,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_down})!SID_MidLevelSM_Go_down -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_down -> SKIP);
												State_MidLevelSM_Go_down(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t27,TID_MidLevelSM_t23,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_down})!SID_MidLevelSM_Go_down -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_down -> SKIP);
												State_MidLevelSM_Go_down(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
									))
							within
								enter?x____:diff(SIDS,{SID_MidLevelSM_Go_down})!SID_MidLevelSM_Go_down -> (State_MidLevelSM_Go_down_execute(id__,x____))
							
							CS_MidLevelSM_Turn_left_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_MidLevelSM_Go_up,SID_MidLevelSM_Turn_right,SID_MidLevelSM_Go_down,SID_MidLevelSM_Turn_left,SID_MidLevelSM_Go_side,SID_MidLevelSM_Stop},
								y____ <- {SID_MidLevelSM_Turn_left}
							|}
							
							
							MidLevelSM_Turn_left_triggers = {|
								turn__.TID_MidLevelSM_t3,
								internal__.TID_MidLevelSM_t25,
								internal__.TID_MidLevelSM_t24,
								turn__.TID_MidLevelSM_t12,
								turn__.TID_MidLevelSM_t13,
								turn__.TID_MidLevelSM_t4,
								stop__.TID_MidLevelSM_t17,
								move_forward__.TID_MidLevelSM_t5,
								internal__.TID_MidLevelSM_t23,
								internal__.TID_MidLevelSM_t27,
								move_forward__.TID_MidLevelSM_t8,
								turn__.TID_MidLevelSM_t14,
								turn__.TID_MidLevelSM_t15,
								stop__.TID_MidLevelSM_t18,
								move_forward__.TID_MidLevelSM_t10,
								move_forward__.TID_MidLevelSM_t9,
								internal__.TID_MidLevelSM_t26,
								turn__.TID_MidLevelSM_t11,
								internal__.TID_MidLevelSM_t22,
								turn__.TID_MidLevelSM_t16,
								turn__.TID_MidLevelSM_t21,
								move_forward__.TID_MidLevelSM_t2,
								stop__.TID_MidLevelSM_t19,
								turn__.TID_MidLevelSM_t1,
								move_forward__.TID_MidLevelSM_t7,
								turn__.TID_MidLevelSM_t20,
								turn__.TID_MidLevelSM_t6
							|}
							
							State_MidLevelSM_Turn_left(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = let
								T_MidLevelSM_t5(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = move_forward__!TID_MidLevelSM_t5.in ->  (exit.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													true & (set_lspeed!const_MidLevelSM_movesp -> SKIP);true & (set_rspeed!const_MidLevelSM_movesp -> SKIP);enter!SID_MidLevelSM_Turn_left!SID_MidLevelSM_Go_side -> entered!SID_MidLevelSM_Turn_left!SID_MidLevelSM_Go_side ->
													State_MidLevelSM_Turn_left(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t6(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t6.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_left(orientation) -> SKIP);enter!SID_MidLevelSM_Turn_left!SID_MidLevelSM_Turn_left -> State_MidLevelSM_Turn_left_execute(id__,SID_MidLevelSM_Turn_left)
								)
								T_MidLevelSM_t9(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = move_forward__!TID_MidLevelSM_t9.in ->  (exit.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													true & (set_lspeed!const_MidLevelSM_movesp -> SKIP);true & (set_rspeed!const_MidLevelSM_movesp -> SKIP);enter!SID_MidLevelSM_Turn_left!SID_MidLevelSM_Go_up -> entered!SID_MidLevelSM_Turn_left!SID_MidLevelSM_Go_up ->
													State_MidLevelSM_Turn_left(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t10(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = move_forward__!TID_MidLevelSM_t10.in ->  (exit.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													true & (set_lspeed!const_MidLevelSM_movesp -> SKIP);true & (set_rspeed!const_MidLevelSM_movesp -> SKIP);enter!SID_MidLevelSM_Turn_left!SID_MidLevelSM_Go_down -> entered!SID_MidLevelSM_Turn_left!SID_MidLevelSM_Go_down ->
													State_MidLevelSM_Turn_left(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t16(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t16.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_right(orientation) -> SKIP);enter!SID_MidLevelSM_Turn_left!SID_MidLevelSM_Turn_right -> entered!SID_MidLevelSM_Turn_left!SID_MidLevelSM_Turn_right ->
													State_MidLevelSM_Turn_left(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t25(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = internal__!TID_MidLevelSM_t25 ->  exit.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													SKIP;exited.SID_MidLevelSM_Turn_left.SID_MidLevelSM_Turn_left -> SKIP;
													enter!SID_MidLevelSM_Turn_left!SID_MidLevelSM_Turn_left -> State_MidLevelSM_Turn_left_execute(id__,SID_MidLevelSM_Turn_left)
								State_MidLevelSM_Turn_left_execute(id__,o____) = true&(target_speed.out!const_MidLevelSM_turn_speed -> SKIP);true&(speed_adjustment.in?speed_adj -> set_speed_adj!speed_adj -> SKIP);true&(target_angle.out!const_MidLevelSM_left_angle -> SKIP);true&(angle_adjustment.in?angle_adj -> set_angle_adj!angle_adj -> SKIP);get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> get_lspeed?lspeed -> true & (set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_rspeed?rspeed -> get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> true & (set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_lspeed?lspeed -> true&CALL__output_left_motor(
											id__,
											lspeed
										);get_rspeed?rspeed -> true&CALL__output_right_motor(
											id__,
											rspeed
										); 
									entered!o____!SID_MidLevelSM_Turn_left ->
									(SKIP; STOP /\ (
										T_MidLevelSM_t5(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t6(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t9(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t10(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t16(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t25(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6}) -> exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_left})!SID_MidLevelSM_Turn_left -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_left -> SKIP);
												State_MidLevelSM_Turn_left(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_speed__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_left})!SID_MidLevelSM_Turn_left -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_left -> SKIP);
												State_MidLevelSM_Turn_left(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_left})!SID_MidLevelSM_Turn_left -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_left -> SKIP);
												State_MidLevelSM_Turn_left(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] speed_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_left})!SID_MidLevelSM_Turn_left -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_left -> SKIP);
												State_MidLevelSM_Turn_left(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] angle_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_left})!SID_MidLevelSM_Turn_left -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_left -> SKIP);
												State_MidLevelSM_Turn_left(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_left})!SID_MidLevelSM_Turn_left -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_left -> SKIP);
												State_MidLevelSM_Turn_left(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_left})!SID_MidLevelSM_Turn_left -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_left -> SKIP);
												State_MidLevelSM_Turn_left(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Turn_left})!SID_MidLevelSM_Turn_left -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Turn_left -> SKIP);
												State_MidLevelSM_Turn_left(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
									))
							within
								enter?x____:diff(SIDS,{SID_MidLevelSM_Turn_left})!SID_MidLevelSM_Turn_left -> (State_MidLevelSM_Turn_left_execute(id__,x____))
							
							CS_MidLevelSM_Go_side_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_MidLevelSM_Go_up,SID_MidLevelSM_Turn_right,SID_MidLevelSM_Go_down,SID_MidLevelSM_Turn_left,SID_MidLevelSM_Go_side,SID_MidLevelSM_Stop},
								y____ <- {SID_MidLevelSM_Go_side}
							|}
							
							
							MidLevelSM_Go_side_triggers = {|
								turn__.TID_MidLevelSM_t3,
								internal__.TID_MidLevelSM_t25,
								internal__.TID_MidLevelSM_t24,
								turn__.TID_MidLevelSM_t12,
								turn__.TID_MidLevelSM_t13,
								stop__.TID_MidLevelSM_t17,
								turn__.TID_MidLevelSM_t4,
								move_forward__.TID_MidLevelSM_t5,
								internal__.TID_MidLevelSM_t23,
								internal__.TID_MidLevelSM_t27,
								move_forward__.TID_MidLevelSM_t8,
								turn__.TID_MidLevelSM_t14,
								turn__.TID_MidLevelSM_t15,
								stop__.TID_MidLevelSM_t18,
								move_forward__.TID_MidLevelSM_t10,
								move_forward__.TID_MidLevelSM_t9,
								internal__.TID_MidLevelSM_t26,
								turn__.TID_MidLevelSM_t11,
								internal__.TID_MidLevelSM_t22,
								turn__.TID_MidLevelSM_t16,
								turn__.TID_MidLevelSM_t21,
								move_forward__.TID_MidLevelSM_t2,
								stop__.TID_MidLevelSM_t19,
								turn__.TID_MidLevelSM_t1,
								move_forward__.TID_MidLevelSM_t7,
								turn__.TID_MidLevelSM_t20,
								turn__.TID_MidLevelSM_t6
							|}
							
							State_MidLevelSM_Go_side(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = let
								T_MidLevelSM_t11(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t11.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Go_side.SID_MidLevelSM_Go_side -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_side.SID_MidLevelSM_Go_side -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_left(orientation) -> SKIP);true & (set_lspeed!const_MidLevelSM_stopsp -> SKIP);true & (set_rspeed!const_MidLevelSM_stopsp -> SKIP);enter!SID_MidLevelSM_Go_side!SID_MidLevelSM_Turn_left -> entered!SID_MidLevelSM_Go_side!SID_MidLevelSM_Turn_left ->
													State_MidLevelSM_Go_side(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t12(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t12.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Go_side.SID_MidLevelSM_Go_side -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_side.SID_MidLevelSM_Go_side -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_right(orientation) -> SKIP);true & (set_lspeed!const_MidLevelSM_stopsp -> SKIP);true & (set_rspeed!const_MidLevelSM_stopsp -> SKIP);enter!SID_MidLevelSM_Go_side!SID_MidLevelSM_Turn_right -> entered!SID_MidLevelSM_Go_side!SID_MidLevelSM_Turn_right ->
													State_MidLevelSM_Go_side(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t19(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = stop__!TID_MidLevelSM_t19.in ->  (exit.SID_MidLevelSM_Go_side.SID_MidLevelSM_Go_side -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_side.SID_MidLevelSM_Go_side -> SKIP;
													true & (set_lspeed!const_MidLevelSM_stopsp -> SKIP);true & (set_rspeed!const_MidLevelSM_stopsp -> SKIP);enter!SID_MidLevelSM_Go_side!SID_MidLevelSM_Stop -> entered!SID_MidLevelSM_Go_side!SID_MidLevelSM_Stop ->
													State_MidLevelSM_Go_side(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t23(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = internal__!TID_MidLevelSM_t23 ->  exit.SID_MidLevelSM_Go_side.SID_MidLevelSM_Go_side -> SKIP;
													SKIP;exited.SID_MidLevelSM_Go_side.SID_MidLevelSM_Go_side -> SKIP;
													enter!SID_MidLevelSM_Go_side!SID_MidLevelSM_Go_side -> State_MidLevelSM_Go_side_execute(id__,SID_MidLevelSM_Go_side)
								State_MidLevelSM_Go_side_execute(id__,o____) = true&(target_speed.out!const_MidLevelSM_side_speed -> SKIP);true&(speed_adjustment.in?speed_adj -> set_speed_adj!speed_adj -> SKIP);true&(target_angle.out!const_MidLevelSM_forward_angle -> SKIP);true&(angle_adjustment.in?angle_adj -> set_angle_adj!angle_adj -> SKIP);get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> get_lspeed?lspeed -> true & (set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_rspeed?rspeed -> get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> true & (set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_lspeed?lspeed -> true&CALL__output_left_motor(
											id__,
											lspeed
										);get_rspeed?rspeed -> true&CALL__output_right_motor(
											id__,
											rspeed
										); 
									entered!o____!SID_MidLevelSM_Go_side ->
									(SKIP; STOP /\ (
										T_MidLevelSM_t11(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t12(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t19(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t23(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6}) -> exit?y____:diff(SIDS,{SID_MidLevelSM_Go_side})!SID_MidLevelSM_Go_side -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_side -> SKIP);
												State_MidLevelSM_Go_side(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_speed__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_side})!SID_MidLevelSM_Go_side -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_side -> SKIP);
												State_MidLevelSM_Go_side(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_side})!SID_MidLevelSM_Go_side -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_side -> SKIP);
												State_MidLevelSM_Go_side(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] speed_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_side})!SID_MidLevelSM_Go_side -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_side -> SKIP);
												State_MidLevelSM_Go_side(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] angle_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_side})!SID_MidLevelSM_Go_side -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_side -> SKIP);
												State_MidLevelSM_Go_side(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_side})!SID_MidLevelSM_Go_side -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_side -> SKIP);
												State_MidLevelSM_Go_side(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_side})!SID_MidLevelSM_Go_side -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_side -> SKIP);
												State_MidLevelSM_Go_side(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t17,TID_MidLevelSM_t4,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Go_side})!SID_MidLevelSM_Go_side -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Go_side -> SKIP);
												State_MidLevelSM_Go_side(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
									))
							within
								enter?x____:diff(SIDS,{SID_MidLevelSM_Go_side})!SID_MidLevelSM_Go_side -> (State_MidLevelSM_Go_side_execute(id__,x____))
							
							CS_MidLevelSM_Stop_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_MidLevelSM_Go_up,SID_MidLevelSM_Turn_right,SID_MidLevelSM_Go_down,SID_MidLevelSM_Turn_left,SID_MidLevelSM_Go_side,SID_MidLevelSM_Stop},
								y____ <- {SID_MidLevelSM_Stop}
							|}
							
							
							MidLevelSM_Stop_triggers = {|
								turn__.TID_MidLevelSM_t3,
								internal__.TID_MidLevelSM_t25,
								internal__.TID_MidLevelSM_t24,
								turn__.TID_MidLevelSM_t12,
								turn__.TID_MidLevelSM_t13,
								turn__.TID_MidLevelSM_t4,
								stop__.TID_MidLevelSM_t17,
								move_forward__.TID_MidLevelSM_t5,
								internal__.TID_MidLevelSM_t23,
								internal__.TID_MidLevelSM_t27,
								move_forward__.TID_MidLevelSM_t8,
								turn__.TID_MidLevelSM_t14,
								turn__.TID_MidLevelSM_t15,
								stop__.TID_MidLevelSM_t18,
								move_forward__.TID_MidLevelSM_t10,
								move_forward__.TID_MidLevelSM_t9,
								internal__.TID_MidLevelSM_t26,
								turn__.TID_MidLevelSM_t11,
								internal__.TID_MidLevelSM_t22,
								turn__.TID_MidLevelSM_t16,
								turn__.TID_MidLevelSM_t21,
								move_forward__.TID_MidLevelSM_t2,
								stop__.TID_MidLevelSM_t19,
								turn__.TID_MidLevelSM_t1,
								move_forward__.TID_MidLevelSM_t7,
								turn__.TID_MidLevelSM_t20,
								turn__.TID_MidLevelSM_t6
							|}
							
							State_MidLevelSM_Stop(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = let
								T_MidLevelSM_t20(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t20.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Stop.SID_MidLevelSM_Stop -> SKIP;
													SKIP;exited.SID_MidLevelSM_Stop.SID_MidLevelSM_Stop -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_right(orientation) -> SKIP);enter!SID_MidLevelSM_Stop!SID_MidLevelSM_Turn_right -> entered!SID_MidLevelSM_Stop!SID_MidLevelSM_Turn_right ->
													State_MidLevelSM_Stop(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t21(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = turn__!TID_MidLevelSM_t21.in?direction -> set_direction!direction ->  (exit.SID_MidLevelSM_Stop.SID_MidLevelSM_Stop -> SKIP;
													SKIP;exited.SID_MidLevelSM_Stop.SID_MidLevelSM_Stop -> SKIP;
													get_orientation?orientation -> true & (set_orientation!turn_left(orientation) -> SKIP);enter!SID_MidLevelSM_Stop!SID_MidLevelSM_Turn_left -> entered!SID_MidLevelSM_Stop!SID_MidLevelSM_Turn_left ->
													State_MidLevelSM_Stop(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
								)
								T_MidLevelSM_t26(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = internal__!TID_MidLevelSM_t26 ->  exit.SID_MidLevelSM_Stop.SID_MidLevelSM_Stop -> SKIP;
													SKIP;exited.SID_MidLevelSM_Stop.SID_MidLevelSM_Stop -> SKIP;
													enter!SID_MidLevelSM_Stop!SID_MidLevelSM_Stop -> State_MidLevelSM_Stop_execute(id__,SID_MidLevelSM_Stop)
								State_MidLevelSM_Stop_execute(id__,o____) = true&(target_speed.out!const_MidLevelSM_turn_speed -> SKIP);true&(speed_adjustment.in?speed_adj -> set_speed_adj!speed_adj -> SKIP);true&(target_angle.out!const_MidLevelSM_forward_angle -> SKIP);true&(angle_adjustment.in?angle_adj -> set_angle_adj!angle_adj -> SKIP);get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> get_lspeed?lspeed -> true & (set_lspeed!Minus(Minus(lspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_rspeed?rspeed -> get_angle_adj?angle_adj -> get_speed_adj?speed_adj -> true & (set_rspeed!Plus(Minus(rspeed, speed_adj, core_int), angle_adj, core_int) -> SKIP);get_lspeed?lspeed -> true&CALL__output_left_motor(
											id__,
											lspeed
										);get_rspeed?rspeed -> true&CALL__output_right_motor(
											id__,
											rspeed
										); 
									entered!o____!SID_MidLevelSM_Stop ->
									(SKIP; STOP /\ (
										T_MidLevelSM_t20(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t21(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)[]
										T_MidLevelSM_t26(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6}) -> exit?y____:diff(SIDS,{SID_MidLevelSM_Stop})!SID_MidLevelSM_Stop -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Stop -> SKIP);
												State_MidLevelSM_Stop(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_speed__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Stop})!SID_MidLevelSM_Stop -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Stop -> SKIP);
												State_MidLevelSM_Stop(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] target_angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Stop})!SID_MidLevelSM_Stop -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Stop -> SKIP);
												State_MidLevelSM_Stop(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] speed_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Stop})!SID_MidLevelSM_Stop -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Stop -> SKIP);
												State_MidLevelSM_Stop(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] angle_adjustment__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Stop})!SID_MidLevelSM_Stop -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Stop -> SKIP);
												State_MidLevelSM_Stop(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Stop})!SID_MidLevelSM_Stop -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Stop -> SKIP);
												State_MidLevelSM_Stop(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Stop})!SID_MidLevelSM_Stop -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Stop -> SKIP);
												State_MidLevelSM_Stop(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
										[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_MidLevelSM_t3,TID_MidLevelSM_t25,TID_MidLevelSM_t24,TID_MidLevelSM_t12,TID_MidLevelSM_t13,TID_MidLevelSM_t4,TID_MidLevelSM_t17,TID_MidLevelSM_t5,TID_MidLevelSM_t23,TID_MidLevelSM_t27,TID_MidLevelSM_t8,TID_MidLevelSM_t14,TID_MidLevelSM_t15,TID_MidLevelSM_t18,TID_MidLevelSM_t10,TID_MidLevelSM_t9,TID_MidLevelSM_t26,TID_MidLevelSM_t11,TID_MidLevelSM_t22,TID_MidLevelSM_t16,TID_MidLevelSM_t21,TID_MidLevelSM_t2,TID_MidLevelSM_t19,TID_MidLevelSM_t1,TID_MidLevelSM_t7,TID_MidLevelSM_t20,TID_MidLevelSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_MidLevelSM_Stop})!SID_MidLevelSM_Stop -> (
												SKIP;
												exited!y____!SID_MidLevelSM_Stop -> SKIP);
												State_MidLevelSM_Stop(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
									))
							within
								enter?x____:diff(SIDS,{SID_MidLevelSM_Stop})!SID_MidLevelSM_Stop -> (State_MidLevelSM_Stop_execute(id__,x____))
							
							
							I_MidLevelSM_i0(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = let
								T_MidLevelSM_t0(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp) = internal__!TID_MidLevelSM_t0 -> true & (set_orientation!Orientation_up -> SKIP);true & (set_lspeed!0 -> SKIP);true & (set_rspeed!0 -> SKIP);enter!SID_MidLevelSM!SID_MidLevelSM_Go_up -> entered!SID_MidLevelSM!SID_MidLevelSM_Go_up ->
								SKIP
							within
								T_MidLevelSM_t0(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)
							
							
							State_MidLevelSM_Go_up_R(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = 
								State_MidLevelSM_Go_up(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)
									[|diff(int_int,MidLevelSM_Go_up_triggers)|]
								SKIP
									 		
							State_MidLevelSM_Turn_right_R(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = 
								State_MidLevelSM_Turn_right(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)
									[|diff(int_int,MidLevelSM_Turn_right_triggers)|]
								SKIP
									 		
							State_MidLevelSM_Go_down_R(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = 
								State_MidLevelSM_Go_down(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)
									[|diff(int_int,MidLevelSM_Go_down_triggers)|]
								SKIP
									 		
							State_MidLevelSM_Turn_left_R(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = 
								State_MidLevelSM_Turn_left(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)
									[|diff(int_int,MidLevelSM_Turn_left_triggers)|]
								SKIP
									 		
							State_MidLevelSM_Go_side_R(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = 
								State_MidLevelSM_Go_side(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)
									[|diff(int_int,MidLevelSM_Go_side_triggers)|]
								SKIP
									 		
							State_MidLevelSM_Stop_R(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = 
								State_MidLevelSM_Stop(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)
									[|diff(int_int,MidLevelSM_Stop_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = (
								I_MidLevelSM_i0(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_MidLevelSM_Go_up,SID_MidLevelSM_Turn_right,SID_MidLevelSM_Go_down,SID_MidLevelSM_Turn_left,SID_MidLevelSM_Go_side,SID_MidLevelSM_Stop}),
											y____ <- {SID_MidLevelSM_Go_up,SID_MidLevelSM_Turn_right,SID_MidLevelSM_Go_down,SID_MidLevelSM_Turn_left,SID_MidLevelSM_Go_side,SID_MidLevelSM_Stop}
									|}|]
								(
									State_MidLevelSM_Go_up_R(id__,
											    const_MidLevelSM_step,
											    const_MidLevelSM_climb_speed,
											    const_MidLevelSM_descent_speed,
											    const_MidLevelSM_side_speed,
											    const_MidLevelSM_forward_angle,
											    const_MidLevelSM_left_angle,
											    const_MidLevelSM_right_angle,
											    const_MidLevelSM_turn_speed,
											    const_MidLevelSM_movesp,
											    const_MidLevelSM_stopsp)
										[|inter(CS_MidLevelSM_Go_up_sync,union(union(union(union(CS_MidLevelSM_Turn_right_sync,CS_MidLevelSM_Go_down_sync),CS_MidLevelSM_Turn_left_sync),CS_MidLevelSM_Go_side_sync),CS_MidLevelSM_Stop_sync))|]
									(
										State_MidLevelSM_Turn_right_R(id__,
												    const_MidLevelSM_step,
												    const_MidLevelSM_climb_speed,
												    const_MidLevelSM_descent_speed,
												    const_MidLevelSM_side_speed,
												    const_MidLevelSM_forward_angle,
												    const_MidLevelSM_left_angle,
												    const_MidLevelSM_right_angle,
												    const_MidLevelSM_turn_speed,
												    const_MidLevelSM_movesp,
												    const_MidLevelSM_stopsp)
											[|inter(CS_MidLevelSM_Turn_right_sync,union(union(union(CS_MidLevelSM_Go_down_sync,CS_MidLevelSM_Turn_left_sync),CS_MidLevelSM_Go_side_sync),CS_MidLevelSM_Stop_sync))|]
										(
											State_MidLevelSM_Go_down_R(id__,
													    const_MidLevelSM_step,
													    const_MidLevelSM_climb_speed,
													    const_MidLevelSM_descent_speed,
													    const_MidLevelSM_side_speed,
													    const_MidLevelSM_forward_angle,
													    const_MidLevelSM_left_angle,
													    const_MidLevelSM_right_angle,
													    const_MidLevelSM_turn_speed,
													    const_MidLevelSM_movesp,
													    const_MidLevelSM_stopsp)
												[|inter(CS_MidLevelSM_Go_down_sync,union(union(CS_MidLevelSM_Turn_left_sync,CS_MidLevelSM_Go_side_sync),CS_MidLevelSM_Stop_sync))|]
											(
												State_MidLevelSM_Turn_left_R(id__,
														    const_MidLevelSM_step,
														    const_MidLevelSM_climb_speed,
														    const_MidLevelSM_descent_speed,
														    const_MidLevelSM_side_speed,
														    const_MidLevelSM_forward_angle,
														    const_MidLevelSM_left_angle,
														    const_MidLevelSM_right_angle,
														    const_MidLevelSM_turn_speed,
														    const_MidLevelSM_movesp,
														    const_MidLevelSM_stopsp)
													[|inter(CS_MidLevelSM_Turn_left_sync,union(CS_MidLevelSM_Go_side_sync,CS_MidLevelSM_Stop_sync))|]
												(
													State_MidLevelSM_Go_side_R(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
														[|inter(CS_MidLevelSM_Go_side_sync,CS_MidLevelSM_Stop_sync)|]
													State_MidLevelSM_Stop_R(id__,
															    const_MidLevelSM_step,
															    const_MidLevelSM_climb_speed,
															    const_MidLevelSM_descent_speed,
															    const_MidLevelSM_side_speed,
															    const_MidLevelSM_forward_angle,
															    const_MidLevelSM_left_angle,
															    const_MidLevelSM_right_angle,
															    const_MidLevelSM_turn_speed,
															    const_MidLevelSM_movesp,
															    const_MidLevelSM_stopsp)
												)
											)
										)
									)
								)
							)
							
							-- optimized memory process
							channel getV_lspeed: core_int
							channel getV_rspeed: core_int
							channel getV_angle: core_int
							channel getV_speed_adj: core_int
							channel getV_angle_adj: core_int
							channel getV_direction: Direction
							channel getV_orientation: Orientation
							
							-- individual memory processes
							Memory_lspeed(x__) = ( 
								get_lspeed!x__ -> Memory_lspeed(x__)
								[]
								getV_lspeed!x__ -> Memory_lspeed(x__)
								[]
								set_lspeed?x__ -> Memory_lspeed(x__)
							)
							Memory_rspeed(x__) = ( 
								get_rspeed!x__ -> Memory_rspeed(x__)
								[]
								getV_rspeed!x__ -> Memory_rspeed(x__)
								[]
								set_rspeed?x__ -> Memory_rspeed(x__)
							)
							Memory_angle(x__) = ( 
								get_angle!x__ -> Memory_angle(x__)
								[]
								getV_angle!x__ -> Memory_angle(x__)
								[]
								set_angle?x__ -> Memory_angle(x__)
							)
							Memory_speed_adj(x__) = ( 
								get_speed_adj!x__ -> Memory_speed_adj(x__)
								[]
								getV_speed_adj!x__ -> Memory_speed_adj(x__)
								[]
								set_speed_adj?x__ -> Memory_speed_adj(x__)
							)
							Memory_angle_adj(x__) = ( 
								get_angle_adj!x__ -> Memory_angle_adj(x__)
								[]
								getV_angle_adj!x__ -> Memory_angle_adj(x__)
								[]
								set_angle_adj?x__ -> Memory_angle_adj(x__)
							)
							Memory_direction(x__) = ( 
								get_direction!x__ -> Memory_direction(x__)
								[]
								getV_direction!x__ -> Memory_direction(x__)
								[]
								set_direction?x__ -> Memory_direction(x__)
								[]
								turn__!TID_MidLevelSM_t1.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t3.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t4.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t6.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t11.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t12.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t13.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t14.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t15.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t16.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t20.in?direction -> Memory_direction(direction)
								[]
								turn__!TID_MidLevelSM_t21.in?direction -> Memory_direction(direction)
							)
							Memory_orientation(x__) = ( 
								get_orientation!x__ -> Memory_orientation(x__)
								[]
								getV_orientation!x__ -> Memory_orientation(x__)
								[]
								set_orientation?x__ -> Memory_orientation(x__)
							)
							Memory_WC_TID_MidLevelSM_t26_0(x__) = (
								getWC.WC_TID_MidLevelSM_t26_0_ID!x__ -> Memory_WC_TID_MidLevelSM_t26_0(x__)
								[]
								setWC.WC_TID_MidLevelSM_t26_0_ID?x__ -> Memory_WC_TID_MidLevelSM_t26_0(x__)
							)
							Memory_WC_TID_MidLevelSM_t23_0(x__) = (
								getWC.WC_TID_MidLevelSM_t23_0_ID!x__ -> Memory_WC_TID_MidLevelSM_t23_0(x__)
								[]
								setWC.WC_TID_MidLevelSM_t23_0_ID?x__ -> Memory_WC_TID_MidLevelSM_t23_0(x__)
							)
							Memory_WC_TID_MidLevelSM_t24_0(x__) = (
								getWC.WC_TID_MidLevelSM_t24_0_ID!x__ -> Memory_WC_TID_MidLevelSM_t24_0(x__)
								[]
								setWC.WC_TID_MidLevelSM_t24_0_ID?x__ -> Memory_WC_TID_MidLevelSM_t24_0(x__)
							)
							Memory_WC_TID_MidLevelSM_t22_0(x__) = (
								getWC.WC_TID_MidLevelSM_t22_0_ID!x__ -> Memory_WC_TID_MidLevelSM_t22_0(x__)
								[]
								setWC.WC_TID_MidLevelSM_t22_0_ID?x__ -> Memory_WC_TID_MidLevelSM_t22_0(x__)
							)
							Memory_WC_TID_MidLevelSM_t27_0(x__) = (
								getWC.WC_TID_MidLevelSM_t27_0_ID!x__ -> Memory_WC_TID_MidLevelSM_t27_0(x__)
								[]
								setWC.WC_TID_MidLevelSM_t27_0_ID?x__ -> Memory_WC_TID_MidLevelSM_t27_0(x__)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 lspeed,
								 rspeed,
								 angle,
								 speed_adj,
								 angle_adj,
								 direction,
								 orientation,
								 WC_TID_MidLevelSM_t26_0,
								 WC_TID_MidLevelSM_t23_0,
								 WC_TID_MidLevelSM_t24_0,
								 WC_TID_MidLevelSM_t22_0,
								 WC_TID_MidLevelSM_t27_0,
								 const_MidLevelSM_step,
								 const_MidLevelSM_climb_speed,
								 const_MidLevelSM_descent_speed,
								 const_MidLevelSM_side_speed,
								 const_MidLevelSM_forward_angle,
								 const_MidLevelSM_left_angle,
								 const_MidLevelSM_right_angle,
								 const_MidLevelSM_turn_speed,
								 const_MidLevelSM_movesp,
								 const_MidLevelSM_stopsp) = (
								turn__!TID_MidLevelSM_t1.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> SKIP
								[]
								(((orientation==Orientation_left) or (orientation==Orientation_right)))&move_forward__!TID_MidLevelSM_t2.in -> SKIP
								[]
								turn__!TID_MidLevelSM_t3.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> SKIP
								[]
								turn__!TID_MidLevelSM_t4.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> SKIP
								[]
								(((orientation==Orientation_left) or (orientation==Orientation_right)))&move_forward__!TID_MidLevelSM_t5.in -> SKIP
								[]
								turn__!TID_MidLevelSM_t6.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> SKIP
								[]
								((orientation==Orientation_up))&move_forward__!TID_MidLevelSM_t7.in -> SKIP
								[]
								((orientation==Orientation_down))&move_forward__!TID_MidLevelSM_t8.in -> SKIP
								[]
								((orientation==Orientation_up))&move_forward__!TID_MidLevelSM_t9.in -> SKIP
								[]
								((orientation==Orientation_down))&move_forward__!TID_MidLevelSM_t10.in -> SKIP
								[]
								turn__!TID_MidLevelSM_t11.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> SKIP
								[]
								turn__!TID_MidLevelSM_t12.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> SKIP
								[]
								turn__!TID_MidLevelSM_t13.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> SKIP
								[]
								turn__!TID_MidLevelSM_t14.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> SKIP
								[]
								internal__!TID_MidLevelSM_t0 -> SKIP
								[]
								turn__!TID_MidLevelSM_t15.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> SKIP
								[]
								turn__!TID_MidLevelSM_t16.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> SKIP
								[]
								stop__!TID_MidLevelSM_t17.in -> SKIP
								[]
								stop__!TID_MidLevelSM_t18.in -> SKIP
								[]
								stop__!TID_MidLevelSM_t19.in -> SKIP
								[]
								turn__!TID_MidLevelSM_t20.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> SKIP
								[]
								turn__!TID_MidLevelSM_t21.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> SKIP
								[]
								(WC_TID_MidLevelSM_t22_0)&internal__!TID_MidLevelSM_t22 -> SKIP
								[]
								(WC_TID_MidLevelSM_t23_0)&internal__!TID_MidLevelSM_t23 -> SKIP
								[]
								(WC_TID_MidLevelSM_t24_0)&internal__!TID_MidLevelSM_t24 -> SKIP
								[]
								(WC_TID_MidLevelSM_t23_0)&internal__!TID_MidLevelSM_t25 -> SKIP
								[]
								(WC_TID_MidLevelSM_t26_0)&internal__!TID_MidLevelSM_t26 -> SKIP
								[]
								(WC_TID_MidLevelSM_t27_0)&internal__!TID_MidLevelSM_t27 -> SKIP
							
								[]
									set_lspeed?x__ -> SKIP
								[]
								set_rspeed?x__ -> SKIP
								[]
								set_angle?x__ -> SKIP
								[]
								set_speed_adj?x__ -> SKIP
								[]
								set_angle_adj?x__ -> SKIP
								[]
								set_direction?x__ -> SKIP
								[]
								set_orientation?x__ -> SKIP
							
								[]
									setWC.WC_TID_MidLevelSM_t26_0_ID?x__ -> SKIP
								[]
								setWC.WC_TID_MidLevelSM_t23_0_ID?x__ -> SKIP
								[]
								setWC.WC_TID_MidLevelSM_t24_0_ID?x__ -> SKIP
								[]
								setWC.WC_TID_MidLevelSM_t22_0_ID?x__ -> SKIP
								[]
								setWC.WC_TID_MidLevelSM_t27_0_ID?x__ -> SKIP
							 	)
							MemoryTransitions_MidLevelSM(id__,
								 const_MidLevelSM_step,
								 const_MidLevelSM_climb_speed,
								 const_MidLevelSM_descent_speed,
								 const_MidLevelSM_side_speed,
								 const_MidLevelSM_forward_angle,
								 const_MidLevelSM_left_angle,
								 const_MidLevelSM_right_angle,
								 const_MidLevelSM_turn_speed,
								 const_MidLevelSM_movesp,
								 const_MidLevelSM_stopsp) =
								(
								getV_lspeed?lspeed ->	
								getV_rspeed?rspeed ->	
								getV_angle?angle ->	
								getV_speed_adj?speed_adj ->	
								getV_angle_adj?angle_adj ->	
								getV_direction?direction ->	
								getV_orientation?orientation ->	
								getWC.WC_TID_MidLevelSM_t26_0_ID?WC_TID_MidLevelSM_t26_0 ->	
								getWC.WC_TID_MidLevelSM_t23_0_ID?WC_TID_MidLevelSM_t23_0 ->	
								getWC.WC_TID_MidLevelSM_t24_0_ID?WC_TID_MidLevelSM_t24_0 ->	
								getWC.WC_TID_MidLevelSM_t22_0_ID?WC_TID_MidLevelSM_t22_0 ->	
								getWC.WC_TID_MidLevelSM_t27_0_ID?WC_TID_MidLevelSM_t27_0 ->
								 MemoryTransitions(id__,
								 	 lspeed,
								 	 rspeed,
								 	 angle,
								 	 speed_adj,
								 	 angle_adj,
								 	 direction,
								 	 orientation,
								 	 WC_TID_MidLevelSM_t26_0,
								 	 WC_TID_MidLevelSM_t23_0,
								 	 WC_TID_MidLevelSM_t24_0,
								 	 WC_TID_MidLevelSM_t22_0,
								 	 WC_TID_MidLevelSM_t27_0,
								 	 const_MidLevelSM_step,
								 	 const_MidLevelSM_climb_speed,
								 	 const_MidLevelSM_descent_speed,
								 	 const_MidLevelSM_side_speed,
								 	 const_MidLevelSM_forward_angle,
								 	 const_MidLevelSM_left_angle,
								 	 const_MidLevelSM_right_angle,
								 	 const_MidLevelSM_turn_speed,
								 	 const_MidLevelSM_movesp,
								 	 const_MidLevelSM_stopsp);
								 MemoryTransitions_MidLevelSM(id__,
								 	 const_MidLevelSM_step,
								 	 const_MidLevelSM_climb_speed,
								 	 const_MidLevelSM_descent_speed,
								 	 const_MidLevelSM_side_speed,
								 	 const_MidLevelSM_forward_angle,
								 	 const_MidLevelSM_left_angle,
								 	 const_MidLevelSM_right_angle,
								 	 const_MidLevelSM_turn_speed,
								 	 const_MidLevelSM_movesp,
								 	 const_MidLevelSM_stopsp)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_MidLevelSM = Union(
								{
									{
										Memory_lspeed(0),
										Memory_rspeed(0),
										Memory_angle(0),
										Memory_speed_adj(0),
										Memory_angle_adj(0),
										Memory_direction(Direction_left),
										Memory_orientation(Orientation_up),
										Memory_WC_TID_MidLevelSM_t26_0(false),
										Memory_WC_TID_MidLevelSM_t23_0(false),
										Memory_WC_TID_MidLevelSM_t24_0(false),
										Memory_WC_TID_MidLevelSM_t22_0(false),
										Memory_WC_TID_MidLevelSM_t27_0(false)
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									setWC.WC_TID_MidLevelSM_t27_0_ID,
									getV_angle,
									getWC.WC_TID_MidLevelSM_t22_0_ID,
									setWC.WC_TID_MidLevelSM_t24_0_ID,
									set_lspeed,
									getV_rspeed,
									getV_lspeed,
									set_rspeed,
									set_direction,
									setWC.WC_TID_MidLevelSM_t26_0_ID,
									getWC.WC_TID_MidLevelSM_t23_0_ID,
									setWC.WC_TID_MidLevelSM_t23_0_ID,
									turn__.TID_MidLevelSM_t20,
									getWC.WC_TID_MidLevelSM_t26_0_ID,
									turn__.TID_MidLevelSM_t21,
									set_speed_adj,
									getV_direction,
									turn__.TID_MidLevelSM_t15,
									turn__.TID_MidLevelSM_t16,
									getV_angle_adj,
									setWC,
									getV_speed_adj,
									getWC.WC_TID_MidLevelSM_t27_0_ID,
									turn__.TID_MidLevelSM_t6,
									set_angle_adj,
									turn__.TID_MidLevelSM_t4,
									getV_orientation,
									getWC.WC_TID_MidLevelSM_t24_0_ID,
									setWC.WC_TID_MidLevelSM_t22_0_ID,
									set_angle,
									turn__.TID_MidLevelSM_t11,
									turn__.TID_MidLevelSM_t12,
									turn__.TID_MidLevelSM_t13,
									turn__.TID_MidLevelSM_t14,
									turn__.TID_MidLevelSM_t3,
									set_orientation,
									turn__.TID_MidLevelSM_t1
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_direction,
									getV_rspeed,
									getV_lspeed,
									getV_orientation,
									getV_angle_adj,
									getV_angle,
									getWC,
									getV_speed_adj
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_MidLevelSM @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_MidLevelSM_step,
								 const_MidLevelSM_climb_speed,
								 const_MidLevelSM_descent_speed,
								 const_MidLevelSM_side_speed,
								 const_MidLevelSM_forward_angle,
								 const_MidLevelSM_left_angle,
								 const_MidLevelSM_right_angle,
								 const_MidLevelSM_turn_speed,
								 const_MidLevelSM_movesp,
								 const_MidLevelSM_stopsp) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_MidLevelSM(id__,
								 const_MidLevelSM_step,
								 const_MidLevelSM_climb_speed,
								 const_MidLevelSM_descent_speed,
								 const_MidLevelSM_side_speed,
								 const_MidLevelSM_forward_angle,
								 const_MidLevelSM_left_angle,
								 const_MidLevelSM_right_angle,
								 const_MidLevelSM_turn_speed,
								 const_MidLevelSM_movesp,
								 const_MidLevelSM_stopsp)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- {WC_TID_MidLevelSM_t27_0}
							-- {WC_TID_MidLevelSM_t24_0}
							-- {WC_TID_MidLevelSM_t23_0}
							-- {orientation}
							-- {WC_TID_MidLevelSM_t22_0}
							-- {WC_TID_MidLevelSM_t26_0}
							-- Summary of all identified named elements:
							-- {
							-- WC_TID_MidLevelSM_t27_0
							-- WC_TID_MidLevelSM_t24_0
							-- WC_TID_MidLevelSM_t23_0
							-- lspeed
							-- rspeed
							-- speed_adj
							-- orientation
							-- angle
							-- direction
							-- WC_TID_MidLevelSM_t22_0
							-- WC_TID_MidLevelSM_t26_0
							-- angle_adj
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_MidLevelSM_t21,
							--		TID_MidLevelSM_t19,
							--		TID_MidLevelSM_t0,
							--		TID_MidLevelSM_t4,
							--		TID_MidLevelSM_t3,
							--		TID_MidLevelSM_t13,
							--		TID_MidLevelSM_t20,
							--		TID_MidLevelSM_t14,
							--		TID_MidLevelSM_t15,
							--		TID_MidLevelSM_t12,
							--		TID_MidLevelSM_t1,
							--		TID_MidLevelSM_t16,
							--		TID_MidLevelSM_t11,
							--		TID_MidLevelSM_t6,
							--		TID_MidLevelSM_t18,
							--		TID_MidLevelSM_t17}
							-- 1:{WC_TID_MidLevelSM_t27_0}
							--	=> {
							--		TID_MidLevelSM_t27}
							-- 2:{WC_TID_MidLevelSM_t24_0}
							--	=> {
							--		TID_MidLevelSM_t24}
							-- 3:{WC_TID_MidLevelSM_t23_0}
							--	=> {
							--		TID_MidLevelSM_t23,
							--		TID_MidLevelSM_t25}
							-- 4:{orientation}
							--	=> {
							--		TID_MidLevelSM_t9,
							--		TID_MidLevelSM_t8,
							--		TID_MidLevelSM_t10,
							--		TID_MidLevelSM_t7,
							--		TID_MidLevelSM_t2,
							--		TID_MidLevelSM_t5}
							-- 5:{WC_TID_MidLevelSM_t22_0}
							--	=> {
							--		TID_MidLevelSM_t22}
							-- 6:{WC_TID_MidLevelSM_t26_0}
							--	=> {
							--		TID_MidLevelSM_t26}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   turn__!TID_MidLevelSM_t21.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> Update
									 	   []
									 	   stop__!TID_MidLevelSM_t19.in -> Update
									 	   []
									 	   internal__!TID_MidLevelSM_t0 -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t4.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t3.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t13.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t20.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t14.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t15.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t12.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t1.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t16.in?direction:{direction|direction <- Direction, (direction==Direction_right)} -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t11.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> Update
									 	   []
									 	   turn__!TID_MidLevelSM_t6.in?direction:{direction|direction <- Direction, (direction==Direction_left)} -> Update
									 	   []
									 	   stop__!TID_MidLevelSM_t18.in -> Update
									 	   []
									 	   stop__!TID_MidLevelSM_t17.in -> Update
								within
									Update
							)
							MemoryTransitions_opt_1(id__) =
							(
								let
									Update = 
									getWC.WC_TID_MidLevelSM_t27_0_ID?WC_TID_MidLevelSM_t27_0 ->
									Current(id__,
										 WC_TID_MidLevelSM_t27_0)
									Current(id__,
										 WC_TID_MidLevelSM_t27_0)
									 	   = 
									 	   (WC_TID_MidLevelSM_t27_0)&(internal__!TID_MidLevelSM_t27 -> Update)
									 	   	 
									 	   	 []
									 	   	 setWC.WC_TID_MidLevelSM_t27_0_ID?x__ -> Update
								within
									Update
							)
							MemoryTransitions_opt_2(id__) =
							(
								let
									Update = 
									getWC.WC_TID_MidLevelSM_t24_0_ID?WC_TID_MidLevelSM_t24_0 ->
									Current(id__,
										 WC_TID_MidLevelSM_t24_0)
									Current(id__,
										 WC_TID_MidLevelSM_t24_0)
									 	   = 
									 	   (WC_TID_MidLevelSM_t24_0)&(internal__!TID_MidLevelSM_t24 -> Update)
									 	   	 
									 	   	 []
									 	   	 setWC.WC_TID_MidLevelSM_t24_0_ID?x__ -> Update
								within
									Update
							)
							MemoryTransitions_opt_3(id__) =
							(
								let
									Update = 
									getWC.WC_TID_MidLevelSM_t23_0_ID?WC_TID_MidLevelSM_t23_0 ->
									Current(id__,
										 WC_TID_MidLevelSM_t23_0)
									Current(id__,
										 WC_TID_MidLevelSM_t23_0)
									 	   = 
									 	   (WC_TID_MidLevelSM_t23_0)&(internal__!TID_MidLevelSM_t23 -> Update)
									 	   []
									 	   (WC_TID_MidLevelSM_t23_0)&(internal__!TID_MidLevelSM_t25 -> Update)
									 	   	 
									 	   	 []
									 	   	 setWC.WC_TID_MidLevelSM_t23_0_ID?x__ -> Update
								within
									Update
							)
							MemoryTransitions_opt_4(id__) =
							(
								let
									Update = 
									get_orientation?orientation ->
									Current(id__,
										 orientation)
									Current(id__,
										 orientation)
									 	   = 
									 	   ((orientation==Orientation_up))&(move_forward__!TID_MidLevelSM_t9.in -> Update)
									 	   []
									 	   ((orientation==Orientation_down))&(move_forward__!TID_MidLevelSM_t8.in -> Update)
									 	   []
									 	   ((orientation==Orientation_down))&(move_forward__!TID_MidLevelSM_t10.in -> Update)
									 	   []
									 	   ((orientation==Orientation_up))&(move_forward__!TID_MidLevelSM_t7.in -> Update)
									 	   []
									 	   (((orientation==Orientation_left) or (orientation==Orientation_right)))&(move_forward__!TID_MidLevelSM_t2.in -> Update)
									 	   []
									 	   (((orientation==Orientation_left) or (orientation==Orientation_right)))&(move_forward__!TID_MidLevelSM_t5.in -> Update)
									 	   	 
									 	   	 []
									 	   	 set_orientation?x__ -> Update
								within
									Update
							)
							MemoryTransitions_opt_5(id__) =
							(
								let
									Update = 
									getWC.WC_TID_MidLevelSM_t22_0_ID?WC_TID_MidLevelSM_t22_0 ->
									Current(id__,
										 WC_TID_MidLevelSM_t22_0)
									Current(id__,
										 WC_TID_MidLevelSM_t22_0)
									 	   = 
									 	   (WC_TID_MidLevelSM_t22_0)&(internal__!TID_MidLevelSM_t22 -> Update)
									 	   	 
									 	   	 []
									 	   	 setWC.WC_TID_MidLevelSM_t22_0_ID?x__ -> Update
								within
									Update
							)
							MemoryTransitions_opt_6(id__) =
							(
								let
									Update = 
									getWC.WC_TID_MidLevelSM_t26_0_ID?WC_TID_MidLevelSM_t26_0 ->
									Current(id__,
										 WC_TID_MidLevelSM_t26_0)
									Current(id__,
										 WC_TID_MidLevelSM_t26_0)
									 	   = 
									 	   (WC_TID_MidLevelSM_t26_0)&(internal__!TID_MidLevelSM_t26 -> Update)
									 	   	 
									 	   	 []
									 	   	 setWC.WC_TID_MidLevelSM_t26_0_ID?x__ -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_WC_TID_MidLevelSM_t27_0(x__) = ( 
								getWC.WC_TID_MidLevelSM_t27_0_ID!x__ -> Memory_opt_WC_TID_MidLevelSM_t27_0(x__)
								[]
								setWC.WC_TID_MidLevelSM_t27_0_ID?x__ -> Memory_opt_WC_TID_MidLevelSM_t27_0(x__)
							)
							Memory_opt_WC_TID_MidLevelSM_t24_0(x__) = ( 
								getWC.WC_TID_MidLevelSM_t24_0_ID!x__ -> Memory_opt_WC_TID_MidLevelSM_t24_0(x__)
								[]
								setWC.WC_TID_MidLevelSM_t24_0_ID?x__ -> Memory_opt_WC_TID_MidLevelSM_t24_0(x__)
							)
							Memory_opt_WC_TID_MidLevelSM_t23_0(x__) = ( 
								getWC.WC_TID_MidLevelSM_t23_0_ID!x__ -> Memory_opt_WC_TID_MidLevelSM_t23_0(x__)
								[]
								setWC.WC_TID_MidLevelSM_t23_0_ID?x__ -> Memory_opt_WC_TID_MidLevelSM_t23_0(x__)
							)
							Memory_opt_lspeed(x__) = ( 
								get_lspeed!x__ -> Memory_opt_lspeed(x__)
								[]
								set_lspeed?x__ -> Memory_opt_lspeed(x__)
							)
							Memory_opt_rspeed(x__) = ( 
								get_rspeed!x__ -> Memory_opt_rspeed(x__)
								[]
								set_rspeed?x__ -> Memory_opt_rspeed(x__)
							)
							Memory_opt_speed_adj(x__) = ( 
								get_speed_adj!x__ -> Memory_opt_speed_adj(x__)
								[]
								set_speed_adj?x__ -> Memory_opt_speed_adj(x__)
							)
							Memory_opt_orientation(x__) = ( 
								get_orientation!x__ -> Memory_opt_orientation(x__)
								[]
								set_orientation?x__ -> Memory_opt_orientation(x__)
							)
							Memory_opt_angle(x__) = ( 
								get_angle!x__ -> Memory_opt_angle(x__)
								[]
								set_angle?x__ -> Memory_opt_angle(x__)
							)
							Memory_opt_direction(x__) = ( 
								get_direction!x__ -> Memory_opt_direction(x__)
								[]
								set_direction?x__ -> Memory_opt_direction(x__)
							)
							Memory_opt_WC_TID_MidLevelSM_t22_0(x__) = ( 
								getWC.WC_TID_MidLevelSM_t22_0_ID!x__ -> Memory_opt_WC_TID_MidLevelSM_t22_0(x__)
								[]
								setWC.WC_TID_MidLevelSM_t22_0_ID?x__ -> Memory_opt_WC_TID_MidLevelSM_t22_0(x__)
							)
							Memory_opt_WC_TID_MidLevelSM_t26_0(x__) = ( 
								getWC.WC_TID_MidLevelSM_t26_0_ID!x__ -> Memory_opt_WC_TID_MidLevelSM_t26_0(x__)
								[]
								setWC.WC_TID_MidLevelSM_t26_0_ID?x__ -> Memory_opt_WC_TID_MidLevelSM_t26_0(x__)
							)
							Memory_opt_angle_adj(x__) = ( 
								get_angle_adj!x__ -> Memory_opt_angle_adj(x__)
								[]
								set_angle_adj?x__ -> Memory_opt_angle_adj(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) =
								dbisim(
								  sbisim(Memory_opt_WC_TID_MidLevelSM_t27_0(false)
								      	[| {|getWC.WC_TID_MidLevelSM_t27_0_ID,setWC.WC_TID_MidLevelSM_t27_0_ID|} |] 
								      	sbisim(	
								      	  dbisim(
								      	    sbisim(dbisim(
								      	      sbisim(Memory_opt_WC_TID_MidLevelSM_t24_0(false)
								      	          	[| {|getWC.WC_TID_MidLevelSM_t24_0_ID,setWC.WC_TID_MidLevelSM_t24_0_ID|} |] 
								      	          	sbisim(	
								      	          	  dbisim(
								      	          	    sbisim(dbisim(
								      	          	      sbisim(Memory_opt_WC_TID_MidLevelSM_t23_0(false)
								      	          	          	[| {|getWC.WC_TID_MidLevelSM_t23_0_ID,setWC.WC_TID_MidLevelSM_t23_0_ID|} |] 
								      	          	          	sbisim(	
								      	          	          	  dbisim(
								      	          	          	    sbisim(dbisim(
								      	          	          	      sbisim(Memory_opt_orientation(Orientation_up)
								      	          	          	          	[| {|get_orientation,set_orientation|} |] 
								      	          	          	          	sbisim(	
								      	          	          	          	  dbisim(
								      	          	          	          	    sbisim(dbisim(
								      	          	          	          	      sbisim(Memory_opt_WC_TID_MidLevelSM_t22_0(false)
								      	          	          	          	          	[| {|setWC.WC_TID_MidLevelSM_t22_0_ID,getWC.WC_TID_MidLevelSM_t22_0_ID|} |] 
								      	          	          	          	          	sbisim(	
								      	          	          	          	          	  dbisim(
								      	          	          	          	          	    sbisim(dbisim(
								      	          	          	          	          	      sbisim(Memory_opt_WC_TID_MidLevelSM_t26_0(false)
								      	          	          	          	          	          	[| {|setWC.WC_TID_MidLevelSM_t26_0_ID,getWC.WC_TID_MidLevelSM_t26_0_ID|} |] 
								      	          	          	          	          	          	sbisim(	
								      	          	          	          	          	          	  dbisim(
								      	          	          	          	          	          	    sbisim(sbisim(	
								      	          	          	          	          	          	      dbisim(
								      	          	          	          	          	          	        sbisim(dbisim(sbisim(Memory_opt_lspeed(0)
								      	          	          	          	          	          	              	[| {|set_lspeed,get_lspeed|} |] 
								      	          	          	          	          	          	              	dbisim(sbisim(Memory_opt_rspeed(0)
								      	          	          	          	          	          	              	      	[| {|set_rspeed,get_rspeed|} |] 
								      	          	          	          	          	          	              	      	dbisim(sbisim(Memory_opt_speed_adj(0)
								      	          	          	          	          	          	              	      	      	[| {|set_speed_adj,get_speed_adj|} |] 
								      	          	          	          	          	          	              	      	      	dbisim(sbisim(Memory_opt_angle(0)
								      	          	          	          	          	          	              	      	      	      	[| {|get_angle,set_angle|} |] 
								      	          	          	          	          	          	              	      	      	      	dbisim(sbisim(Memory_opt_direction(Direction_left)
								      	          	          	          	          	          	              	      	      	      	      	[| {|set_direction,get_direction|} |] 
								      	          	          	          	          	          	              	      	      	      	      	dbisim(sbisim(Memory_opt_angle_adj(0)
								      	          	          	          	          	          	              	      	      	      	      	      	[| {|set_angle_adj,get_angle_adj|} |] 
								      	          	          	          	          	          	              	      	      	      	      	      	STM_core(id__,
								      	          	          	          	          	          	              	      	      	      	      	      			    const_MidLevelSM_step,
								      	          	          	          	          	          	              	      	      	      	      	      			    const_MidLevelSM_climb_speed,
								      	          	          	          	          	          	              	      	      	      	      	      			    const_MidLevelSM_descent_speed,
								      	          	          	          	          	          	              	      	      	      	      	      			    const_MidLevelSM_side_speed,
								      	          	          	          	          	          	              	      	      	      	      	      			    const_MidLevelSM_forward_angle,
								      	          	          	          	          	          	              	      	      	      	      	      			    const_MidLevelSM_left_angle,
								      	          	          	          	          	          	              	      	      	      	      	      			    const_MidLevelSM_right_angle,
								      	          	          	          	          	          	              	      	      	      	      	      			    const_MidLevelSM_turn_speed,
								      	          	          	          	          	          	              	      	      	      	      	      			    const_MidLevelSM_movesp,
								      	          	          	          	          	          	              	      	      	      	      	      			    const_MidLevelSM_stopsp)
								      	          	          	          	          	          	              	      	      	      	      	      	)\ {|set_angle_adj,get_angle_adj|}
								      	          	          	          	          	          	              	      	      	      	      	      )
								      	          	          	          	          	          	              	      	      	      	      	)\ {|set_direction,get_direction|}
								      	          	          	          	          	          	              	      	      	      	      )
								      	          	          	          	          	          	              	      	      	      	)\ {|get_angle,set_angle|}
								      	          	          	          	          	          	              	      	      	      )
								      	          	          	          	          	          	              	      	      	)\ {|set_speed_adj,get_speed_adj|}
								      	          	          	          	          	          	              	      	      )
								      	          	          	          	          	          	              	      	)\ {|set_rspeed,get_rspeed|}
								      	          	          	          	          	          	              	      )
								      	          	          	          	          	          	              	)\ {|set_lspeed,get_lspeed|}
								      	          	          	          	          	          	              )
								      	          	          	          	          	          	          	  [| {|turn__.TID_MidLevelSM_t15,turn__.TID_MidLevelSM_t16,internal__.TID_MidLevelSM_t0,turn__.TID_MidLevelSM_t6,turn__.TID_MidLevelSM_t4,stop__.TID_MidLevelSM_t17,stop__.TID_MidLevelSM_t19,stop__.TID_MidLevelSM_t18,turn__.TID_MidLevelSM_t11,turn__.TID_MidLevelSM_t12,turn__.TID_MidLevelSM_t13,turn__.TID_MidLevelSM_t14,turn__.TID_MidLevelSM_t3,turn__.TID_MidLevelSM_t20,turn__.TID_MidLevelSM_t1,turn__.TID_MidLevelSM_t21|} |]
								      	          	          	          	          	          	          	  MemoryTransitions_opt_0(id__)
								      	          	          	          	          	          	          	  )\{||})
								      	          	          	          	          	          	          )
								      	          	          	          	          	          	      	  [| {|internal__.TID_MidLevelSM_t26,setWC.WC_TID_MidLevelSM_t26_0_ID|} |]
								      	          	          	          	          	          	      	  MemoryTransitions_opt_6(id__)
								      	          	          	          	          	          	      	  )\{||})
								      	          	          	          	          	          	      )
								      	          	          	          	          	          	) \ {|setWC.WC_TID_MidLevelSM_t26_0_ID,getWC.WC_TID_MidLevelSM_t26_0_ID|}
								      	          	          	          	          	          )
								      	          	          	          	          	      	  [| {|setWC.WC_TID_MidLevelSM_t22_0_ID,internal__.TID_MidLevelSM_t22|} |]
								      	          	          	          	          	      	  MemoryTransitions_opt_5(id__)
								      	          	          	          	          	      	  )\{||})
								      	          	          	          	          	      )
								      	          	          	          	          	) \ {|setWC.WC_TID_MidLevelSM_t22_0_ID,getWC.WC_TID_MidLevelSM_t22_0_ID|}
								      	          	          	          	          )
								      	          	          	          	      	  [| {|move_forward__.TID_MidLevelSM_t2,move_forward__.TID_MidLevelSM_t10,move_forward__.TID_MidLevelSM_t5,set_orientation,move_forward__.TID_MidLevelSM_t7,move_forward__.TID_MidLevelSM_t8,move_forward__.TID_MidLevelSM_t9|} |]
								      	          	          	          	      	  MemoryTransitions_opt_4(id__)
								      	          	          	          	      	  )\{||})
								      	          	          	          	      )
								      	          	          	          	) \ {|get_orientation,set_orientation|}
								      	          	          	          )
								      	          	          	      	  [| {|setWC.WC_TID_MidLevelSM_t23_0_ID,internal__.TID_MidLevelSM_t23,internal__.TID_MidLevelSM_t25|} |]
								      	          	          	      	  MemoryTransitions_opt_3(id__)
								      	          	          	      	  )\{||})
								      	          	          	      )
								      	          	          	) \ {|getWC.WC_TID_MidLevelSM_t23_0_ID,setWC.WC_TID_MidLevelSM_t23_0_ID|}
								      	          	          )
								      	          	      	  [| {|setWC.WC_TID_MidLevelSM_t24_0_ID,internal__.TID_MidLevelSM_t24|} |]
								      	          	      	  MemoryTransitions_opt_2(id__)
								      	          	      	  )\{||})
								      	          	      )
								      	          	) \ {|getWC.WC_TID_MidLevelSM_t24_0_ID,setWC.WC_TID_MidLevelSM_t24_0_ID|}
								      	          )
								      	      	  [| {|internal__.TID_MidLevelSM_t27,setWC.WC_TID_MidLevelSM_t27_0_ID|} |]
								      	      	  MemoryTransitions_opt_1(id__)
								      	      	  )\{||})
								      	      )
								      	) \ {|getWC.WC_TID_MidLevelSM_t27_0_ID,setWC.WC_TID_MidLevelSM_t27_0_ID|}
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_lspeed,set_lspeed,
										get_rspeed,set_rspeed,
										get_angle,set_angle,
										get_speed_adj,set_speed_adj,
										get_angle_adj,set_angle_adj,
										get_direction,set_direction,
										get_orientation,set_orientation|},
										{||}
									)
										
									,
									{|turn__.TID_MidLevelSM_t1,
									move_forward__.TID_MidLevelSM_t2,
									turn__.TID_MidLevelSM_t3,
									turn__.TID_MidLevelSM_t4,
									move_forward__.TID_MidLevelSM_t5,
									turn__.TID_MidLevelSM_t6,
									move_forward__.TID_MidLevelSM_t7,
									move_forward__.TID_MidLevelSM_t8,
									move_forward__.TID_MidLevelSM_t9,
									move_forward__.TID_MidLevelSM_t10,
									turn__.TID_MidLevelSM_t11,
									turn__.TID_MidLevelSM_t12,
									turn__.TID_MidLevelSM_t13,
									turn__.TID_MidLevelSM_t14,
									internal__.TID_MidLevelSM_t0,
									turn__.TID_MidLevelSM_t15,
									turn__.TID_MidLevelSM_t16,
									stop__.TID_MidLevelSM_t17,
									stop__.TID_MidLevelSM_t18,
									stop__.TID_MidLevelSM_t19,
									turn__.TID_MidLevelSM_t20,
									turn__.TID_MidLevelSM_t21,
									internal__.TID_MidLevelSM_t22,
									internal__.TID_MidLevelSM_t23,
									internal__.TID_MidLevelSM_t24,
									internal__.TID_MidLevelSM_t25,
									internal__.TID_MidLevelSM_t26,
									internal__.TID_MidLevelSM_t27|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_lspeed,set_lspeed,
									get_rspeed,set_rspeed,
									get_angle,set_angle,
									get_speed_adj,set_speed_adj,
									get_angle_adj,set_angle_adj,
									get_direction,set_direction,
									get_orientation,set_orientation|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = prioritise((((
								wbisim(STM(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_MidLevelSM_step,
										 const_MidLevelSM_climb_speed,
										 const_MidLevelSM_descent_speed,
										 const_MidLevelSM_side_speed,
										 const_MidLevelSM_forward_angle,
										 const_MidLevelSM_left_angle,
										 const_MidLevelSM_right_angle,
										 const_MidLevelSM_turn_speed,
										 const_MidLevelSM_movesp,
										 const_MidLevelSM_stopsp))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_MidLevelSM_step,
											    const_MidLevelSM_climb_speed,
											    const_MidLevelSM_descent_speed,
											    const_MidLevelSM_side_speed,
											    const_MidLevelSM_forward_angle,
											    const_MidLevelSM_left_angle,
											    const_MidLevelSM_right_angle,
											    const_MidLevelSM_turn_speed,
											    const_MidLevelSM_movesp,
											    const_MidLevelSM_stopsp)
								)\WCsets
							)
							[[
								target_speed__.x____ <- target_speed,
								target_angle__.x____ <- target_angle,
								speed_adjustment__.x____ <- speed_adjustment,
								angle_adjustment__.x____ <- angle_adjustment,
								move_forward__.x____ <- move_forward,
								turn__.x____ <- turn,
								stop__.x____ <- stop
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_MidLevelSM_step,
													    const_MidLevelSM_climb_speed,
													    const_MidLevelSM_descent_speed,
													    const_MidLevelSM_side_speed,
													    const_MidLevelSM_forward_angle,
													    const_MidLevelSM_left_angle,
													    const_MidLevelSM_right_angle,
													    const_MidLevelSM_turn_speed,
													    const_MidLevelSM_movesp,
													    const_MidLevelSM_stopsp)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_MidLevelSM_step,
													    const_MidLevelSM_climb_speed,
													    const_MidLevelSM_descent_speed,
													    const_MidLevelSM_side_speed,
													    const_MidLevelSM_forward_angle,
													    const_MidLevelSM_left_angle,
													    const_MidLevelSM_right_angle,
													    const_MidLevelSM_turn_speed,
													    const_MidLevelSM_movesp,
													    const_MidLevelSM_stopsp))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_MidLevelSM_step,
											    const_MidLevelSM_climb_speed,
											    const_MidLevelSM_descent_speed,
											    const_MidLevelSM_side_speed,
											    const_MidLevelSM_forward_angle,
											    const_MidLevelSM_left_angle,
											    const_MidLevelSM_right_angle,
											    const_MidLevelSM_turn_speed,
											    const_MidLevelSM_movesp,
											    const_MidLevelSM_stopsp)
									)[[
										target_speed__.x____ <- target_speed,
										target_angle__.x____ <- target_angle,
										speed_adjustment__.x____ <- speed_adjustment,
										angle_adjustment__.x____ <- angle_adjustment,
										move_forward__.x____ <- move_forward,
										turn__.x____ <- turn,
										stop__.x____ <- stop
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = prioritise((((
								wbisim(STM(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_MidLevelSM_step,
									 const_MidLevelSM_climb_speed,
									 const_MidLevelSM_descent_speed,
									 const_MidLevelSM_side_speed,
									 const_MidLevelSM_forward_angle,
									 const_MidLevelSM_left_angle,
									 const_MidLevelSM_right_angle,
									 const_MidLevelSM_turn_speed,
									 const_MidLevelSM_movesp,
									 const_MidLevelSM_stopsp)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							                             | WC_TID_MidLevelSM_t24_0_ID
							                             | WC_TID_MidLevelSM_t27_0_ID
							                             | WC_TID_MidLevelSM_t26_0_ID
							                             | WC_TID_MidLevelSM_t22_0_ID
							                             | WC_TID_MidLevelSM_t23_0_ID
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = Union({
								{
								({|internal__.TID_MidLevelSM_t26,entered.x.SID_MidLevelSM_Stop,setWC.WC_TID_MidLevelSM_t26_0_ID | x <- SIDS|},P_WC_TID_MidLevelSM_t26_0(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)),
								
								({|entered.x.SID_MidLevelSM_Turn_left,setWC.WC_TID_MidLevelSM_t23_0_ID,internal__.TID_MidLevelSM_t23,internal__.TID_MidLevelSM_t25 | x <- SIDS|},P_WC_TID_MidLevelSM_t23_0(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)),
								
								({|entered.x.SID_MidLevelSM_Go_up,internal__.TID_MidLevelSM_t24,setWC.WC_TID_MidLevelSM_t24_0_ID | x <- SIDS|},P_WC_TID_MidLevelSM_t24_0(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)),
								
								({|setWC.WC_TID_MidLevelSM_t22_0_ID,internal__.TID_MidLevelSM_t22,entered.x.SID_MidLevelSM_Turn_right | x <- SIDS|},P_WC_TID_MidLevelSM_t22_0(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp)),
								
								({|internal__.TID_MidLevelSM_t27,setWC.WC_TID_MidLevelSM_t27_0_ID,entered.x.SID_MidLevelSM_Go_down | x <- SIDS|},P_WC_TID_MidLevelSM_t27_0(id__,
										    const_MidLevelSM_step,
										    const_MidLevelSM_climb_speed,
										    const_MidLevelSM_descent_speed,
										    const_MidLevelSM_side_speed,
										    const_MidLevelSM_forward_angle,
										    const_MidLevelSM_left_angle,
										    const_MidLevelSM_right_angle,
										    const_MidLevelSM_turn_speed,
										    const_MidLevelSM_movesp,
										    const_MidLevelSM_stopsp))
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{|internal__.TID_MidLevelSM_t27,
								internal__.TID_MidLevelSM_t26,
								internal__.TID_MidLevelSM_t23,
								internal__.TID_MidLevelSM_t22,
								internal__.TID_MidLevelSM_t25,
								internal__.TID_MidLevelSM_t24|}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{|entered.x.SID_MidLevelSM_Stop,
								entered.x.SID_MidLevelSM_Turn_left,
								entered.x.SID_MidLevelSM_Go_up,
								entered.x.SID_MidLevelSM_Turn_right,
								entered.x.SID_MidLevelSM_Go_down | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							P_WC_TID_MidLevelSM_t26_0_reset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = entered?x.SID_MidLevelSM_Stop -> setWC.WC_TID_MidLevelSM_t26_0_ID.false -> P_WC_TID_MidLevelSM_t26_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t26_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = (TimedInterrupt(RUN({|internal__.TID_MidLevelSM_t26,tock|}),const_MidLevelSM_step) ; setWC.WC_TID_MidLevelSM_t26_0_ID.true -> RUN({|internal__.TID_MidLevelSM_t26,tock|})) /\ P_WC_TID_MidLevelSM_t26_0_reset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t23_0_reset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = entered?x.SID_MidLevelSM_Turn_left -> setWC.WC_TID_MidLevelSM_t23_0_ID.false -> P_WC_TID_MidLevelSM_t23_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t23_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = (TimedInterrupt(RUN({|tock,internal__.TID_MidLevelSM_t23,internal__.TID_MidLevelSM_t25|}),const_MidLevelSM_step) ; setWC.WC_TID_MidLevelSM_t23_0_ID.true -> RUN({|tock,internal__.TID_MidLevelSM_t23,internal__.TID_MidLevelSM_t25|})) /\ P_WC_TID_MidLevelSM_t23_0_reset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t24_0_reset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = entered?x.SID_MidLevelSM_Go_up -> setWC.WC_TID_MidLevelSM_t24_0_ID.false -> P_WC_TID_MidLevelSM_t24_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t24_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = (TimedInterrupt(RUN({|tock,internal__.TID_MidLevelSM_t24|}),const_MidLevelSM_step) ; setWC.WC_TID_MidLevelSM_t24_0_ID.true -> RUN({|tock,internal__.TID_MidLevelSM_t24|})) /\ P_WC_TID_MidLevelSM_t24_0_reset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t22_0_reset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = entered?x.SID_MidLevelSM_Turn_right -> setWC.WC_TID_MidLevelSM_t22_0_ID.false -> P_WC_TID_MidLevelSM_t22_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t22_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = (TimedInterrupt(RUN({|tock,internal__.TID_MidLevelSM_t22|}),const_MidLevelSM_step) ; setWC.WC_TID_MidLevelSM_t22_0_ID.true -> RUN({|tock,internal__.TID_MidLevelSM_t22|})) /\ P_WC_TID_MidLevelSM_t22_0_reset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t27_0_reset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = entered?x.SID_MidLevelSM_Go_down -> setWC.WC_TID_MidLevelSM_t27_0_ID.false -> P_WC_TID_MidLevelSM_t27_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t27_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = (TimedInterrupt(RUN({|internal__.TID_MidLevelSM_t27,tock|}),const_MidLevelSM_step) ; setWC.WC_TID_MidLevelSM_t27_0_ID.true -> RUN({|internal__.TID_MidLevelSM_t27,tock|})) /\ P_WC_TID_MidLevelSM_t27_0_reset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t26_0(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = setWC.WC_TID_MidLevelSM_t26_0_ID.false -> P_WC_TID_MidLevelSM_t26_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t23_0(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = setWC.WC_TID_MidLevelSM_t23_0_ID.false -> P_WC_TID_MidLevelSM_t23_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t24_0(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = setWC.WC_TID_MidLevelSM_t24_0_ID.false -> P_WC_TID_MidLevelSM_t24_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t22_0(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = setWC.WC_TID_MidLevelSM_t22_0_ID.false -> P_WC_TID_MidLevelSM_t22_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							P_WC_TID_MidLevelSM_t27_0(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = setWC.WC_TID_MidLevelSM_t27_0_ID.false -> P_WC_TID_MidLevelSM_t27_0_monitor(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							-- Clocks process
							Clocks(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = || (alpha, P) : WCset(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = timed_priority(AUX(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = timed_priority(AUX_opt(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = D__(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = timed_priority(AUX(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = ShowV(timed_priority(AUX(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp) = AUX(id__,
									    const_MidLevelSM_step,
									    const_MidLevelSM_climb_speed,
									    const_MidLevelSM_descent_speed,
									    const_MidLevelSM_side_speed,
									    const_MidLevelSM_forward_angle,
									    const_MidLevelSM_left_angle,
									    const_MidLevelSM_right_angle,
									    const_MidLevelSM_turn_speed,
									    const_MidLevelSM_movesp,
									    const_MidLevelSM_stopsp)
						}
					endmodule
					module stm_ref9
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_spl, set_spl: TripleAxis
							channel get_spr, set_spr: TripleAxis
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel speed_l__: TIDS.InOut.TripleAxis
							channel speed_l: InOut.TripleAxis
							channel speed_r__: TIDS.InOut.TripleAxis
							channel speed_r: InOut.TripleAxis
							channel linear_speed__: TIDS.InOut.core_int
							channel linear_speed: InOut.core_int
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_LinearSpeedSM
							              | SID_LinearSpeedSM_wait_input
							              | SID_LinearSpeedSM_send_output
							              | SID_LinearSpeedSM_wait_right
							              | SID_LinearSpeedSM_wait_left
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_LinearSpeedSM_t0
							              | TID_LinearSpeedSM_t1
							              | TID_LinearSpeedSM_t2
							              | TID_LinearSpeedSM_t3
							              | TID_LinearSpeedSM_t4
							              | TID_LinearSpeedSM_t5
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_LinearSpeedSM_t1,	TID_LinearSpeedSM_t2,	TID_LinearSpeedSM_t3,	TID_LinearSpeedSM_t4,	TID_LinearSpeedSM_t5
							}
							
							int_int = {|
								speed_l__.TID_LinearSpeedSM_t1,
								speed_r__.TID_LinearSpeedSM_t1,
								linear_speed__.TID_LinearSpeedSM_t1,
								internal__.TID_LinearSpeedSM_t1,
								speed_l__.TID_LinearSpeedSM_t2,
								speed_r__.TID_LinearSpeedSM_t2,
								linear_speed__.TID_LinearSpeedSM_t2,
								internal__.TID_LinearSpeedSM_t2,
								speed_l__.TID_LinearSpeedSM_t3,
								speed_r__.TID_LinearSpeedSM_t3,
								linear_speed__.TID_LinearSpeedSM_t3,
								internal__.TID_LinearSpeedSM_t3,
								speed_l__.TID_LinearSpeedSM_t4,
								speed_r__.TID_LinearSpeedSM_t4,
								linear_speed__.TID_LinearSpeedSM_t4,
								internal__.TID_LinearSpeedSM_t4,
								speed_l__.TID_LinearSpeedSM_t5,
								speed_r__.TID_LinearSpeedSM_t5,
								linear_speed__.TID_LinearSpeedSM_t5,
								internal__.TID_LinearSpeedSM_t5
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_LinearSpeedSM_wait_input_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_LinearSpeedSM_wait_input,SID_LinearSpeedSM_send_output,SID_LinearSpeedSM_wait_right,SID_LinearSpeedSM_wait_left},
								y____ <- {SID_LinearSpeedSM_wait_input}
							|}
							
							
							LinearSpeedSM_wait_input_triggers = {|
								speed_r__.TID_LinearSpeedSM_t2,
								speed_r__.TID_LinearSpeedSM_t3,
								speed_l__.TID_LinearSpeedSM_t1,
								speed_l__.TID_LinearSpeedSM_t4,
								internal__.TID_LinearSpeedSM_t5
							|}
							
							State_LinearSpeedSM_wait_input(id__) = let
								T_LinearSpeedSM_t1(id__) = speed_l__!TID_LinearSpeedSM_t1.in?spl -> set_spl!spl ->  (exit.SID_LinearSpeedSM_wait_input.SID_LinearSpeedSM_wait_input -> SKIP;
													SKIP;exited.SID_LinearSpeedSM_wait_input.SID_LinearSpeedSM_wait_input -> SKIP;
													enter!SID_LinearSpeedSM_wait_input!SID_LinearSpeedSM_wait_right -> entered!SID_LinearSpeedSM_wait_input!SID_LinearSpeedSM_wait_right ->
													State_LinearSpeedSM_wait_input(id__)
								)
								T_LinearSpeedSM_t2(id__) = speed_r__!TID_LinearSpeedSM_t2.in?spr -> set_spr!spr ->  (exit.SID_LinearSpeedSM_wait_input.SID_LinearSpeedSM_wait_input -> SKIP;
													SKIP;exited.SID_LinearSpeedSM_wait_input.SID_LinearSpeedSM_wait_input -> SKIP;
													enter!SID_LinearSpeedSM_wait_input!SID_LinearSpeedSM_wait_left -> entered!SID_LinearSpeedSM_wait_input!SID_LinearSpeedSM_wait_left ->
													State_LinearSpeedSM_wait_input(id__)
								)
								State_LinearSpeedSM_wait_input_execute(id__,o____) = SKIP; 
									entered!o____!SID_LinearSpeedSM_wait_input ->
									(SKIP; STOP /\ (
										T_LinearSpeedSM_t1(id__)[]
										T_LinearSpeedSM_t2(id__)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5}) -> exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_input})!SID_LinearSpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_input -> SKIP);
												State_LinearSpeedSM_wait_input(id__)
										[] speed_l__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_input})!SID_LinearSpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_input -> SKIP);
												State_LinearSpeedSM_wait_input(id__)
										[] speed_r__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_input})!SID_LinearSpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_input -> SKIP);
												State_LinearSpeedSM_wait_input(id__)
										[] linear_speed__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_input})!SID_LinearSpeedSM_wait_input -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_input -> SKIP);
												State_LinearSpeedSM_wait_input(id__)
									))
							within
								enter?x____:diff(SIDS,{SID_LinearSpeedSM_wait_input})!SID_LinearSpeedSM_wait_input -> (State_LinearSpeedSM_wait_input_execute(id__,x____))
							
							CS_LinearSpeedSM_send_output_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_LinearSpeedSM_wait_input,SID_LinearSpeedSM_send_output,SID_LinearSpeedSM_wait_right,SID_LinearSpeedSM_wait_left},
								y____ <- {SID_LinearSpeedSM_send_output}
							|}
							
							
							LinearSpeedSM_send_output_triggers = {|
								speed_r__.TID_LinearSpeedSM_t2,
								speed_r__.TID_LinearSpeedSM_t3,
								speed_l__.TID_LinearSpeedSM_t1,
								speed_l__.TID_LinearSpeedSM_t4,
								internal__.TID_LinearSpeedSM_t5
							|}
							
							State_LinearSpeedSM_send_output(id__) = let
								T_LinearSpeedSM_t5(id__) = internal__!TID_LinearSpeedSM_t5 ->  exit.SID_LinearSpeedSM_send_output.SID_LinearSpeedSM_send_output -> SKIP;
													SKIP;exited.SID_LinearSpeedSM_send_output.SID_LinearSpeedSM_send_output -> SKIP;
													get_spl?spl -> get_spr?spr -> true&(linear_speed.out!get_linear_speed(TripleAxis_Z(spl),TripleAxis_Z(spr)) -> SKIP);enter!SID_LinearSpeedSM_send_output!SID_LinearSpeedSM_wait_input -> entered!SID_LinearSpeedSM_send_output!SID_LinearSpeedSM_wait_input ->
													State_LinearSpeedSM_send_output(id__)
								State_LinearSpeedSM_send_output_execute(id__,o____) = SKIP; 
									entered!o____!SID_LinearSpeedSM_send_output ->
									(SKIP; STOP /\ (
										T_LinearSpeedSM_t5(id__)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5}) -> exit?y____:diff(SIDS,{SID_LinearSpeedSM_send_output})!SID_LinearSpeedSM_send_output -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_send_output -> SKIP);
												State_LinearSpeedSM_send_output(id__)
										[] speed_l__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_send_output})!SID_LinearSpeedSM_send_output -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_send_output -> SKIP);
												State_LinearSpeedSM_send_output(id__)
										[] speed_r__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_send_output})!SID_LinearSpeedSM_send_output -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_send_output -> SKIP);
												State_LinearSpeedSM_send_output(id__)
										[] linear_speed__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_send_output})!SID_LinearSpeedSM_send_output -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_send_output -> SKIP);
												State_LinearSpeedSM_send_output(id__)
									))
							within
								enter?x____:diff(SIDS,{SID_LinearSpeedSM_send_output})!SID_LinearSpeedSM_send_output -> (State_LinearSpeedSM_send_output_execute(id__,x____))
							
							CS_LinearSpeedSM_wait_right_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_LinearSpeedSM_wait_input,SID_LinearSpeedSM_send_output,SID_LinearSpeedSM_wait_right,SID_LinearSpeedSM_wait_left},
								y____ <- {SID_LinearSpeedSM_wait_right}
							|}
							
							
							LinearSpeedSM_wait_right_triggers = {|
								speed_r__.TID_LinearSpeedSM_t2,
								speed_r__.TID_LinearSpeedSM_t3,
								speed_l__.TID_LinearSpeedSM_t1,
								speed_l__.TID_LinearSpeedSM_t4,
								internal__.TID_LinearSpeedSM_t5
							|}
							
							State_LinearSpeedSM_wait_right(id__) = let
								T_LinearSpeedSM_t3(id__) = speed_r__!TID_LinearSpeedSM_t3.in?spr -> set_spr!spr ->  (exit.SID_LinearSpeedSM_wait_right.SID_LinearSpeedSM_wait_right -> SKIP;
													SKIP;exited.SID_LinearSpeedSM_wait_right.SID_LinearSpeedSM_wait_right -> SKIP;
													enter!SID_LinearSpeedSM_wait_right!SID_LinearSpeedSM_send_output -> entered!SID_LinearSpeedSM_wait_right!SID_LinearSpeedSM_send_output ->
													State_LinearSpeedSM_wait_right(id__)
								)
								State_LinearSpeedSM_wait_right_execute(id__,o____) = SKIP; 
									entered!o____!SID_LinearSpeedSM_wait_right ->
									(SKIP; STOP /\ (
										T_LinearSpeedSM_t3(id__)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5}) -> exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_right})!SID_LinearSpeedSM_wait_right -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_right -> SKIP);
												State_LinearSpeedSM_wait_right(id__)
										[] speed_l__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_right})!SID_LinearSpeedSM_wait_right -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_right -> SKIP);
												State_LinearSpeedSM_wait_right(id__)
										[] speed_r__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_right})!SID_LinearSpeedSM_wait_right -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_right -> SKIP);
												State_LinearSpeedSM_wait_right(id__)
										[] linear_speed__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_right})!SID_LinearSpeedSM_wait_right -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_right -> SKIP);
												State_LinearSpeedSM_wait_right(id__)
									))
							within
								enter?x____:diff(SIDS,{SID_LinearSpeedSM_wait_right})!SID_LinearSpeedSM_wait_right -> (State_LinearSpeedSM_wait_right_execute(id__,x____))
							
							CS_LinearSpeedSM_wait_left_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_LinearSpeedSM_wait_input,SID_LinearSpeedSM_send_output,SID_LinearSpeedSM_wait_right,SID_LinearSpeedSM_wait_left},
								y____ <- {SID_LinearSpeedSM_wait_left}
							|}
							
							
							LinearSpeedSM_wait_left_triggers = {|
								speed_r__.TID_LinearSpeedSM_t2,
								speed_r__.TID_LinearSpeedSM_t3,
								speed_l__.TID_LinearSpeedSM_t1,
								speed_l__.TID_LinearSpeedSM_t4,
								internal__.TID_LinearSpeedSM_t5
							|}
							
							State_LinearSpeedSM_wait_left(id__) = let
								T_LinearSpeedSM_t4(id__) = speed_l__!TID_LinearSpeedSM_t4.in?spl -> set_spl!spl ->  (exit.SID_LinearSpeedSM_wait_left.SID_LinearSpeedSM_wait_left -> SKIP;
													SKIP;exited.SID_LinearSpeedSM_wait_left.SID_LinearSpeedSM_wait_left -> SKIP;
													enter!SID_LinearSpeedSM_wait_left!SID_LinearSpeedSM_send_output -> entered!SID_LinearSpeedSM_wait_left!SID_LinearSpeedSM_send_output ->
													State_LinearSpeedSM_wait_left(id__)
								)
								State_LinearSpeedSM_wait_left_execute(id__,o____) = SKIP; 
									entered!o____!SID_LinearSpeedSM_wait_left ->
									(SKIP; STOP /\ (
										T_LinearSpeedSM_t4(id__)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5}) -> exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_left})!SID_LinearSpeedSM_wait_left -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_left -> SKIP);
												State_LinearSpeedSM_wait_left(id__)
										[] speed_l__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_left})!SID_LinearSpeedSM_wait_left -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_left -> SKIP);
												State_LinearSpeedSM_wait_left(id__)
										[] speed_r__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_left})!SID_LinearSpeedSM_wait_left -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_left -> SKIP);
												State_LinearSpeedSM_wait_left(id__)
										[] linear_speed__?x____:diff(ITIDS,{NULLTRANSITION__,TID_LinearSpeedSM_t2,TID_LinearSpeedSM_t3,TID_LinearSpeedSM_t1,TID_LinearSpeedSM_t4,TID_LinearSpeedSM_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_LinearSpeedSM_wait_left})!SID_LinearSpeedSM_wait_left -> (
												SKIP;
												exited!y____!SID_LinearSpeedSM_wait_left -> SKIP);
												State_LinearSpeedSM_wait_left(id__)
									))
							within
								enter?x____:diff(SIDS,{SID_LinearSpeedSM_wait_left})!SID_LinearSpeedSM_wait_left -> (State_LinearSpeedSM_wait_left_execute(id__,x____))
							
							
							I_LinearSpeedSM_i0(id__) = let
								T_LinearSpeedSM_t0(id__) = internal__!TID_LinearSpeedSM_t0 -> enter!SID_LinearSpeedSM!SID_LinearSpeedSM_wait_input -> entered!SID_LinearSpeedSM!SID_LinearSpeedSM_wait_input ->
								SKIP
							within
								T_LinearSpeedSM_t0(id__)
							
							
							State_LinearSpeedSM_wait_input_R(id__) = 
								State_LinearSpeedSM_wait_input(id__)
									[|diff(int_int,LinearSpeedSM_wait_input_triggers)|]
								SKIP
									 		
							State_LinearSpeedSM_send_output_R(id__) = 
								State_LinearSpeedSM_send_output(id__)
									[|diff(int_int,LinearSpeedSM_send_output_triggers)|]
								SKIP
									 		
							State_LinearSpeedSM_wait_right_R(id__) = 
								State_LinearSpeedSM_wait_right(id__)
									[|diff(int_int,LinearSpeedSM_wait_right_triggers)|]
								SKIP
									 		
							State_LinearSpeedSM_wait_left_R(id__) = 
								State_LinearSpeedSM_wait_left(id__)
									[|diff(int_int,LinearSpeedSM_wait_left_triggers)|]
								SKIP
									 		
								
							STM(id__) = (
								I_LinearSpeedSM_i0(id__)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_LinearSpeedSM_wait_input,SID_LinearSpeedSM_send_output,SID_LinearSpeedSM_wait_right,SID_LinearSpeedSM_wait_left}),
											y____ <- {SID_LinearSpeedSM_wait_input,SID_LinearSpeedSM_send_output,SID_LinearSpeedSM_wait_right,SID_LinearSpeedSM_wait_left}
									|}|]
								(
									State_LinearSpeedSM_wait_input_R(id__)
										[|inter(CS_LinearSpeedSM_wait_input_sync,union(union(CS_LinearSpeedSM_send_output_sync,CS_LinearSpeedSM_wait_right_sync),CS_LinearSpeedSM_wait_left_sync))|]
									(
										State_LinearSpeedSM_send_output_R(id__)
											[|inter(CS_LinearSpeedSM_send_output_sync,union(CS_LinearSpeedSM_wait_right_sync,CS_LinearSpeedSM_wait_left_sync))|]
										(
											State_LinearSpeedSM_wait_right_R(id__)
												[|inter(CS_LinearSpeedSM_wait_right_sync,CS_LinearSpeedSM_wait_left_sync)|]
											State_LinearSpeedSM_wait_left_R(id__)
										)
									)
								)
							)
							
							-- optimized memory process
							channel getV_spl: TripleAxis
							channel getV_spr: TripleAxis
							
							-- individual memory processes
							Memory_spl(x__) = ( 
								get_spl!x__ -> Memory_spl(x__)
								[]
								getV_spl!x__ -> Memory_spl(x__)
								[]
								set_spl?x__ -> Memory_spl(x__)
								[]
								speed_l__!TID_LinearSpeedSM_t1.in?spl -> Memory_spl(spl)
								[]
								speed_l__!TID_LinearSpeedSM_t4.in?spl -> Memory_spl(spl)
							)
							Memory_spr(x__) = ( 
								get_spr!x__ -> Memory_spr(x__)
								[]
								getV_spr!x__ -> Memory_spr(x__)
								[]
								set_spr?x__ -> Memory_spr(x__)
								[]
								speed_r__!TID_LinearSpeedSM_t2.in?spr -> Memory_spr(spr)
								[]
								speed_r__!TID_LinearSpeedSM_t3.in?spr -> Memory_spr(spr)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 spl,
								 spr) = (
								internal__!TID_LinearSpeedSM_t0 -> SKIP
								[]
								speed_l__!TID_LinearSpeedSM_t1.in?spl -> SKIP
								[]
								speed_r__!TID_LinearSpeedSM_t2.in?spr -> SKIP
								[]
								speed_r__!TID_LinearSpeedSM_t3.in?spr -> SKIP
								[]
								speed_l__!TID_LinearSpeedSM_t4.in?spl -> SKIP
								[]
								internal__!TID_LinearSpeedSM_t5 -> SKIP
							
								[]
									set_spl?x__ -> SKIP
								[]
								set_spr?x__ -> SKIP
							 	)
							MemoryTransitions_LinearSpeedSM(id__) =
								(
								getV_spl?spl ->	
								getV_spr?spr ->
								 MemoryTransitions(id__,
								 	 spl,
								 	 spr);
								 MemoryTransitions_LinearSpeedSM(id__)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_LinearSpeedSM = Union(
								{
									{
										Memory_spl((0,0,0)),
										Memory_spr((0,0,0))
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									speed_l__.TID_LinearSpeedSM_t1,
									speed_r__.TID_LinearSpeedSM_t3,
									speed_l__.TID_LinearSpeedSM_t4,
									set_spl,
									speed_r__.TID_LinearSpeedSM_t2,
									getV_spl,
									setWC,
									set_spr,
									getV_spr
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_spl,
									getWC,
									getV_spr
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_LinearSpeedSM @ P
							
							-- complete memory process
							MemoryN(id__) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_LinearSpeedSM(id__)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- spr
							-- spl
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_LinearSpeedSM_t3,
							--		TID_LinearSpeedSM_t2,
							--		TID_LinearSpeedSM_t1,
							--		TID_LinearSpeedSM_t0,
							--		TID_LinearSpeedSM_t5,
							--		TID_LinearSpeedSM_t4}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   speed_r__!TID_LinearSpeedSM_t3.in?spr -> Update
									 	   []
									 	   speed_r__!TID_LinearSpeedSM_t2.in?spr -> Update
									 	   []
									 	   speed_l__!TID_LinearSpeedSM_t1.in?spl -> Update
									 	   []
									 	   internal__!TID_LinearSpeedSM_t0 -> Update
									 	   []
									 	   internal__!TID_LinearSpeedSM_t5 -> Update
									 	   []
									 	   speed_l__!TID_LinearSpeedSM_t4.in?spl -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_spr(x__) = ( 
								get_spr!x__ -> Memory_opt_spr(x__)
								[]
								set_spr?x__ -> Memory_opt_spr(x__)
							)
							Memory_opt_spl(x__) = ( 
								get_spl!x__ -> Memory_opt_spl(x__)
								[]
								set_spl?x__ -> Memory_opt_spl(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_spr((0,0,0))
								          	[| {|get_spr,set_spr|} |] 
								          	dbisim(sbisim(Memory_opt_spl((0,0,0))
								          	      	[| {|set_spl,get_spl|} |] 
								          	      	STM_core(id__)
								          	      	)\ {|set_spl,get_spl|}
								          	      )
								          	)\ {|get_spr,set_spr|}
								          )
								      	  [| {|speed_l__.TID_LinearSpeedSM_t1,speed_r__.TID_LinearSpeedSM_t3,speed_l__.TID_LinearSpeedSM_t4,speed_r__.TID_LinearSpeedSM_t2,internal__.TID_LinearSpeedSM_t5,internal__.TID_LinearSpeedSM_t0|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{|internal__.TID_LinearSpeedSM_t0|})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_spl,set_spl,
										get_spr,set_spr|},
										{||}
									)
										
									,
									{|internal__.TID_LinearSpeedSM_t0,
									speed_l__.TID_LinearSpeedSM_t1,
									speed_r__.TID_LinearSpeedSM_t2,
									speed_r__.TID_LinearSpeedSM_t3,
									speed_l__.TID_LinearSpeedSM_t4,
									internal__.TID_LinearSpeedSM_t5|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_spl,set_spl,
									get_spr,set_spr|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__) = prioritise((((
								wbisim(STM(id__))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__))
										[| union(WCsets,WCsync) |]
									Clocks(id__)
								)\WCsets
							)
							[[
								speed_l__.x____ <- speed_l,
								speed_r__.x____ <- speed_r,
								linear_speed__.x____ <- linear_speed
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__) = 
								dbisim(
									sbisim(
											(STM(id__)
											[| union(WCsync,WCresets) |]
											Clocks(id__))\WCresets
										  )
									  )
							
							AUX_opt(id__) = 
								prioritise(
									(MemorySTM_opt(id__)
									)[[
										speed_l__.x____ <- speed_l,
										speed_r__.x____ <- speed_r,
										linear_speed__.x____ <- linear_speed
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__) = prioritise((((
								wbisim(STM(id__))
									[|MachineMemorySyncSet|]
								((MemoryN(id__)) [| union(WCsets,WCsync) |] Clocks(id__))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__) = timed_priority(AUX(id__) \ union(internal_events,ClockResets))
							
							D__(id__) = timed_priority(AUX_opt(id__) \ union(internal_events,ClockResets))
							
							O__(id__) = D__(id__)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__) = timed_priority(AUX(id__) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__) = ShowV(timed_priority(AUX(id__) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__) = AUX(id__)
						}
					endmodule
					module stm_ref10
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_x, set_x: TripleAxis
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel input__: TIDS.InOut.TripleAxis
							channel input: InOut.TripleAxis
							channel output1__: TIDS.InOut.TripleAxis
							channel output1: InOut.TripleAxis
							channel output2__: TIDS.InOut.TripleAxis
							channel output2: InOut.TripleAxis
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_InputDuplicationSM
							              | SID_InputDuplicationSM_wait_input
							              | SID_InputDuplicationSM_send_output
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_InputDuplicationSM_t0
							              | TID_InputDuplicationSM_t1
							              | TID_InputDuplicationSM_t2
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_InputDuplicationSM_t1,	TID_InputDuplicationSM_t2
							}
							
							int_int = {|
								input__.TID_InputDuplicationSM_t1,
								output1__.TID_InputDuplicationSM_t1,
								output2__.TID_InputDuplicationSM_t1,
								internal__.TID_InputDuplicationSM_t1,
								input__.TID_InputDuplicationSM_t2,
								output1__.TID_InputDuplicationSM_t2,
								output2__.TID_InputDuplicationSM_t2,
								internal__.TID_InputDuplicationSM_t2
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_InputDuplicationSM_wait_input_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output},
								y____ <- {SID_InputDuplicationSM_wait_input}
							|}
							
							
							InputDuplicationSM_wait_input_triggers = {|
								input__.TID_InputDuplicationSM_t1,
								internal__.TID_InputDuplicationSM_t2
							|}
							
							State_InputDuplicationSM_wait_input(id__) = let
								T_InputDuplicationSM_t1(id__) = input__!TID_InputDuplicationSM_t1.in?x -> set_x!x ->  (exit.SID_InputDuplicationSM_wait_input.SID_InputDuplicationSM_wait_input -> SKIP;
													SKIP;exited.SID_InputDuplicationSM_wait_input.SID_InputDuplicationSM_wait_input -> SKIP;
													enter!SID_InputDuplicationSM_wait_input!SID_InputDuplicationSM_send_output -> entered!SID_InputDuplicationSM_wait_input!SID_InputDuplicationSM_send_output ->
													State_InputDuplicationSM_wait_input(id__)
								)
								State_InputDuplicationSM_wait_input_execute(id__,o____) = SKIP; 
									entered!o____!SID_InputDuplicationSM_wait_input ->
									(SKIP; STOP /\ (
										T_InputDuplicationSM_t1(id__)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2}) -> exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
										[] input__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
										[] output1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
										[] output2__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
									))
							within
								enter?x____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (State_InputDuplicationSM_wait_input_execute(id__,x____))
							
							CS_InputDuplicationSM_send_output_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output},
								y____ <- {SID_InputDuplicationSM_send_output}
							|}
							
							
							InputDuplicationSM_send_output_triggers = {|
								input__.TID_InputDuplicationSM_t1,
								internal__.TID_InputDuplicationSM_t2
							|}
							
							State_InputDuplicationSM_send_output(id__) = let
								T_InputDuplicationSM_t2(id__) = internal__!TID_InputDuplicationSM_t2 ->  exit.SID_InputDuplicationSM_send_output.SID_InputDuplicationSM_send_output -> SKIP;
													SKIP;exited.SID_InputDuplicationSM_send_output.SID_InputDuplicationSM_send_output -> SKIP;
													get_x?x -> true&(output1.out!x -> SKIP);get_x?x -> true&(output2.out!x -> SKIP);enter!SID_InputDuplicationSM_send_output!SID_InputDuplicationSM_wait_input -> entered!SID_InputDuplicationSM_send_output!SID_InputDuplicationSM_wait_input ->
													State_InputDuplicationSM_send_output(id__)
								State_InputDuplicationSM_send_output_execute(id__,o____) = SKIP; 
									entered!o____!SID_InputDuplicationSM_send_output ->
									(SKIP; STOP /\ (
										T_InputDuplicationSM_t2(id__)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2}) -> exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
										[] input__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
										[] output1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
										[] output2__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
									))
							within
								enter?x____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (State_InputDuplicationSM_send_output_execute(id__,x____))
							
							
							I_InputDuplicationSM_i0(id__) = let
								T_InputDuplicationSM_t0(id__) = internal__!TID_InputDuplicationSM_t0 -> enter!SID_InputDuplicationSM!SID_InputDuplicationSM_wait_input -> entered!SID_InputDuplicationSM!SID_InputDuplicationSM_wait_input ->
								SKIP
							within
								T_InputDuplicationSM_t0(id__)
							
							
							State_InputDuplicationSM_wait_input_R(id__) = 
								State_InputDuplicationSM_wait_input(id__)
									[|diff(int_int,InputDuplicationSM_wait_input_triggers)|]
								SKIP
									 		
							State_InputDuplicationSM_send_output_R(id__) = 
								State_InputDuplicationSM_send_output(id__)
									[|diff(int_int,InputDuplicationSM_send_output_triggers)|]
								SKIP
									 		
								
							STM(id__) = (
								I_InputDuplicationSM_i0(id__)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output}),
											y____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output}
									|}|]
								(
									State_InputDuplicationSM_wait_input_R(id__)
										[|inter(CS_InputDuplicationSM_wait_input_sync,CS_InputDuplicationSM_send_output_sync)|]
									State_InputDuplicationSM_send_output_R(id__)
								)
							)
							
							-- optimized memory process
							channel getV_x: TripleAxis
							
							-- individual memory processes
							Memory_x(x__) = ( 
								get_x!x__ -> Memory_x(x__)
								[]
								getV_x!x__ -> Memory_x(x__)
								[]
								set_x?x__ -> Memory_x(x__)
								[]
								input__!TID_InputDuplicationSM_t1.in?x -> Memory_x(x)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 x) = (
								internal__!TID_InputDuplicationSM_t0 -> SKIP
								[]
								input__!TID_InputDuplicationSM_t1.in?x -> SKIP
								[]
								internal__!TID_InputDuplicationSM_t2 -> SKIP
							
								[]
									set_x?x__ -> SKIP
							 	)
							MemoryTransitions_InputDuplicationSM(id__) =
								(
								getV_x?x ->
								 MemoryTransitions(id__,
								 	 x);
								 MemoryTransitions_InputDuplicationSM(id__)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_InputDuplicationSM = Union(
								{
									{
										Memory_x((0,0,0))
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									getV_x,
									setWC,
									input__.TID_InputDuplicationSM_t1,
									set_x
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_x,
									getWC
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_InputDuplicationSM @ P
							
							-- complete memory process
							MemoryN(id__) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_InputDuplicationSM(id__)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- x
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_InputDuplicationSM_t0,
							--		TID_InputDuplicationSM_t1,
							--		TID_InputDuplicationSM_t2}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   internal__!TID_InputDuplicationSM_t0 -> Update
									 	   []
									 	   input__!TID_InputDuplicationSM_t1.in?x -> Update
									 	   []
									 	   internal__!TID_InputDuplicationSM_t2 -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_x(x__) = ( 
								get_x!x__ -> Memory_opt_x(x__)
								[]
								set_x?x__ -> Memory_opt_x(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_x((0,0,0))
								          	[| {|get_x,set_x|} |] 
								          	STM_core(id__)
								          	)\ {|get_x,set_x|}
								          )
								      	  [| {|internal__.TID_InputDuplicationSM_t0,internal__.TID_InputDuplicationSM_t2,input__.TID_InputDuplicationSM_t1|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{||})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_x,set_x|},
										{||}
									)
										
									,
									{|internal__.TID_InputDuplicationSM_t0,
									input__.TID_InputDuplicationSM_t1,
									internal__.TID_InputDuplicationSM_t2|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_x,set_x|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__) = prioritise((((
								wbisim(STM(id__))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__))
										[| union(WCsets,WCsync) |]
									Clocks(id__)
								)\WCsets
							)
							[[
								input__.x____ <- input,
								output1__.x____ <- output1,
								output2__.x____ <- output2
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__) = 
								dbisim(
									sbisim(
											(STM(id__)
											[| union(WCsync,WCresets) |]
											Clocks(id__))\WCresets
										  )
									  )
							
							AUX_opt(id__) = 
								prioritise(
									(MemorySTM_opt(id__)
									)[[
										input__.x____ <- input,
										output1__.x____ <- output1,
										output2__.x____ <- output2
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__) = prioritise((((
								wbisim(STM(id__))
									[|MachineMemorySyncSet|]
								((MemoryN(id__)) [| union(WCsets,WCsync) |] Clocks(id__))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__) = timed_priority(AUX(id__) \ union(internal_events,ClockResets))
							
							D__(id__) = timed_priority(AUX_opt(id__) \ union(internal_events,ClockResets))
							
							O__(id__) = D__(id__)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__) = timed_priority(AUX(id__) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__) = ShowV(timed_priority(AUX(id__) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__) = AUX(id__)
						}
					endmodule
					module stm_ref11
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_x, set_x: TripleAxis
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel input__: TIDS.InOut.TripleAxis
							channel input: InOut.TripleAxis
							channel output1__: TIDS.InOut.TripleAxis
							channel output1: InOut.TripleAxis
							channel output2__: TIDS.InOut.TripleAxis
							channel output2: InOut.TripleAxis
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_InputDuplicationSM
							              | SID_InputDuplicationSM_wait_input
							              | SID_InputDuplicationSM_send_output
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_InputDuplicationSM_t0
							              | TID_InputDuplicationSM_t1
							              | TID_InputDuplicationSM_t2
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_InputDuplicationSM_t1,	TID_InputDuplicationSM_t2
							}
							
							int_int = {|
								input__.TID_InputDuplicationSM_t1,
								output1__.TID_InputDuplicationSM_t1,
								output2__.TID_InputDuplicationSM_t1,
								internal__.TID_InputDuplicationSM_t1,
								input__.TID_InputDuplicationSM_t2,
								output1__.TID_InputDuplicationSM_t2,
								output2__.TID_InputDuplicationSM_t2,
								internal__.TID_InputDuplicationSM_t2
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_InputDuplicationSM_wait_input_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output},
								y____ <- {SID_InputDuplicationSM_wait_input}
							|}
							
							
							InputDuplicationSM_wait_input_triggers = {|
								input__.TID_InputDuplicationSM_t1,
								internal__.TID_InputDuplicationSM_t2
							|}
							
							State_InputDuplicationSM_wait_input(id__) = let
								T_InputDuplicationSM_t1(id__) = input__!TID_InputDuplicationSM_t1.in?x -> set_x!x ->  (exit.SID_InputDuplicationSM_wait_input.SID_InputDuplicationSM_wait_input -> SKIP;
													SKIP;exited.SID_InputDuplicationSM_wait_input.SID_InputDuplicationSM_wait_input -> SKIP;
													enter!SID_InputDuplicationSM_wait_input!SID_InputDuplicationSM_send_output -> entered!SID_InputDuplicationSM_wait_input!SID_InputDuplicationSM_send_output ->
													State_InputDuplicationSM_wait_input(id__)
								)
								State_InputDuplicationSM_wait_input_execute(id__,o____) = SKIP; 
									entered!o____!SID_InputDuplicationSM_wait_input ->
									(SKIP; STOP /\ (
										T_InputDuplicationSM_t1(id__)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2}) -> exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
										[] input__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
										[] output1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
										[] output2__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
									))
							within
								enter?x____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (State_InputDuplicationSM_wait_input_execute(id__,x____))
							
							CS_InputDuplicationSM_send_output_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output},
								y____ <- {SID_InputDuplicationSM_send_output}
							|}
							
							
							InputDuplicationSM_send_output_triggers = {|
								input__.TID_InputDuplicationSM_t1,
								internal__.TID_InputDuplicationSM_t2
							|}
							
							State_InputDuplicationSM_send_output(id__) = let
								T_InputDuplicationSM_t2(id__) = internal__!TID_InputDuplicationSM_t2 ->  exit.SID_InputDuplicationSM_send_output.SID_InputDuplicationSM_send_output -> SKIP;
													SKIP;exited.SID_InputDuplicationSM_send_output.SID_InputDuplicationSM_send_output -> SKIP;
													get_x?x -> true&(output1.out!x -> SKIP);get_x?x -> true&(output2.out!x -> SKIP);enter!SID_InputDuplicationSM_send_output!SID_InputDuplicationSM_wait_input -> entered!SID_InputDuplicationSM_send_output!SID_InputDuplicationSM_wait_input ->
													State_InputDuplicationSM_send_output(id__)
								State_InputDuplicationSM_send_output_execute(id__,o____) = SKIP; 
									entered!o____!SID_InputDuplicationSM_send_output ->
									(SKIP; STOP /\ (
										T_InputDuplicationSM_t2(id__)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2}) -> exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
										[] input__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
										[] output1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
										[] output2__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
									))
							within
								enter?x____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (State_InputDuplicationSM_send_output_execute(id__,x____))
							
							
							I_InputDuplicationSM_i0(id__) = let
								T_InputDuplicationSM_t0(id__) = internal__!TID_InputDuplicationSM_t0 -> enter!SID_InputDuplicationSM!SID_InputDuplicationSM_wait_input -> entered!SID_InputDuplicationSM!SID_InputDuplicationSM_wait_input ->
								SKIP
							within
								T_InputDuplicationSM_t0(id__)
							
							
							State_InputDuplicationSM_wait_input_R(id__) = 
								State_InputDuplicationSM_wait_input(id__)
									[|diff(int_int,InputDuplicationSM_wait_input_triggers)|]
								SKIP
									 		
							State_InputDuplicationSM_send_output_R(id__) = 
								State_InputDuplicationSM_send_output(id__)
									[|diff(int_int,InputDuplicationSM_send_output_triggers)|]
								SKIP
									 		
								
							STM(id__) = (
								I_InputDuplicationSM_i0(id__)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output}),
											y____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output}
									|}|]
								(
									State_InputDuplicationSM_wait_input_R(id__)
										[|inter(CS_InputDuplicationSM_wait_input_sync,CS_InputDuplicationSM_send_output_sync)|]
									State_InputDuplicationSM_send_output_R(id__)
								)
							)
							
							-- optimized memory process
							channel getV_x: TripleAxis
							
							-- individual memory processes
							Memory_x(x__) = ( 
								get_x!x__ -> Memory_x(x__)
								[]
								getV_x!x__ -> Memory_x(x__)
								[]
								set_x?x__ -> Memory_x(x__)
								[]
								input__!TID_InputDuplicationSM_t1.in?x -> Memory_x(x)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 x) = (
								internal__!TID_InputDuplicationSM_t0 -> SKIP
								[]
								input__!TID_InputDuplicationSM_t1.in?x -> SKIP
								[]
								internal__!TID_InputDuplicationSM_t2 -> SKIP
							
								[]
									set_x?x__ -> SKIP
							 	)
							MemoryTransitions_InputDuplicationSM(id__) =
								(
								getV_x?x ->
								 MemoryTransitions(id__,
								 	 x);
								 MemoryTransitions_InputDuplicationSM(id__)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_InputDuplicationSM = Union(
								{
									{
										Memory_x((0,0,0))
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									getV_x,
									setWC,
									input__.TID_InputDuplicationSM_t1,
									set_x
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_x,
									getWC
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_InputDuplicationSM @ P
							
							-- complete memory process
							MemoryN(id__) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_InputDuplicationSM(id__)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- x
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_InputDuplicationSM_t2,
							--		TID_InputDuplicationSM_t0,
							--		TID_InputDuplicationSM_t1}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   internal__!TID_InputDuplicationSM_t2 -> Update
									 	   []
									 	   internal__!TID_InputDuplicationSM_t0 -> Update
									 	   []
									 	   input__!TID_InputDuplicationSM_t1.in?x -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_x(x__) = ( 
								get_x!x__ -> Memory_opt_x(x__)
								[]
								set_x?x__ -> Memory_opt_x(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_x((0,0,0))
								          	[| {|get_x,set_x|} |] 
								          	STM_core(id__)
								          	)\ {|get_x,set_x|}
								          )
								      	  [| {|internal__.TID_InputDuplicationSM_t0,internal__.TID_InputDuplicationSM_t2,input__.TID_InputDuplicationSM_t1|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{||})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_x,set_x|},
										{||}
									)
										
									,
									{|internal__.TID_InputDuplicationSM_t0,
									input__.TID_InputDuplicationSM_t1,
									internal__.TID_InputDuplicationSM_t2|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_x,set_x|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__) = prioritise((((
								wbisim(STM(id__))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__))
										[| union(WCsets,WCsync) |]
									Clocks(id__)
								)\WCsets
							)
							[[
								input__.x____ <- input,
								output1__.x____ <- output1,
								output2__.x____ <- output2
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__) = 
								dbisim(
									sbisim(
											(STM(id__)
											[| union(WCsync,WCresets) |]
											Clocks(id__))\WCresets
										  )
									  )
							
							AUX_opt(id__) = 
								prioritise(
									(MemorySTM_opt(id__)
									)[[
										input__.x____ <- input,
										output1__.x____ <- output1,
										output2__.x____ <- output2
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__) = prioritise((((
								wbisim(STM(id__))
									[|MachineMemorySyncSet|]
								((MemoryN(id__)) [| union(WCsets,WCsync) |] Clocks(id__))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__) = timed_priority(AUX(id__) \ union(internal_events,ClockResets))
							
							D__(id__) = timed_priority(AUX_opt(id__) \ union(internal_events,ClockResets))
							
							O__(id__) = D__(id__)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__) = timed_priority(AUX(id__) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__) = ShowV(timed_priority(AUX(id__) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__) = AUX(id__)
						}
					endmodule
					module stm_ref12
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_x, set_x: TripleAxis
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel input__: TIDS.InOut.TripleAxis
							channel input: InOut.TripleAxis
							channel output1__: TIDS.InOut.TripleAxis
							channel output1: InOut.TripleAxis
							channel output2__: TIDS.InOut.TripleAxis
							channel output2: InOut.TripleAxis
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_InputDuplicationSM
							              | SID_InputDuplicationSM_wait_input
							              | SID_InputDuplicationSM_send_output
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_InputDuplicationSM_t0
							              | TID_InputDuplicationSM_t1
							              | TID_InputDuplicationSM_t2
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_InputDuplicationSM_t1,	TID_InputDuplicationSM_t2
							}
							
							int_int = {|
								input__.TID_InputDuplicationSM_t1,
								output1__.TID_InputDuplicationSM_t1,
								output2__.TID_InputDuplicationSM_t1,
								internal__.TID_InputDuplicationSM_t1,
								input__.TID_InputDuplicationSM_t2,
								output1__.TID_InputDuplicationSM_t2,
								output2__.TID_InputDuplicationSM_t2,
								internal__.TID_InputDuplicationSM_t2
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_InputDuplicationSM_wait_input_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output},
								y____ <- {SID_InputDuplicationSM_wait_input}
							|}
							
							
							InputDuplicationSM_wait_input_triggers = {|
								input__.TID_InputDuplicationSM_t1,
								internal__.TID_InputDuplicationSM_t2
							|}
							
							State_InputDuplicationSM_wait_input(id__) = let
								T_InputDuplicationSM_t1(id__) = input__!TID_InputDuplicationSM_t1.in?x -> set_x!x ->  (exit.SID_InputDuplicationSM_wait_input.SID_InputDuplicationSM_wait_input -> SKIP;
													SKIP;exited.SID_InputDuplicationSM_wait_input.SID_InputDuplicationSM_wait_input -> SKIP;
													enter!SID_InputDuplicationSM_wait_input!SID_InputDuplicationSM_send_output -> entered!SID_InputDuplicationSM_wait_input!SID_InputDuplicationSM_send_output ->
													State_InputDuplicationSM_wait_input(id__)
								)
								State_InputDuplicationSM_wait_input_execute(id__,o____) = SKIP; 
									entered!o____!SID_InputDuplicationSM_wait_input ->
									(SKIP; STOP /\ (
										T_InputDuplicationSM_t1(id__)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2}) -> exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
										[] input__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
										[] output1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
										[] output2__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_wait_input -> SKIP);
												State_InputDuplicationSM_wait_input(id__)
									))
							within
								enter?x____:diff(SIDS,{SID_InputDuplicationSM_wait_input})!SID_InputDuplicationSM_wait_input -> (State_InputDuplicationSM_wait_input_execute(id__,x____))
							
							CS_InputDuplicationSM_send_output_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output},
								y____ <- {SID_InputDuplicationSM_send_output}
							|}
							
							
							InputDuplicationSM_send_output_triggers = {|
								input__.TID_InputDuplicationSM_t1,
								internal__.TID_InputDuplicationSM_t2
							|}
							
							State_InputDuplicationSM_send_output(id__) = let
								T_InputDuplicationSM_t2(id__) = internal__!TID_InputDuplicationSM_t2 ->  exit.SID_InputDuplicationSM_send_output.SID_InputDuplicationSM_send_output -> SKIP;
													SKIP;exited.SID_InputDuplicationSM_send_output.SID_InputDuplicationSM_send_output -> SKIP;
													get_x?x -> true&(output1.out!x -> SKIP);get_x?x -> true&(output2.out!x -> SKIP);enter!SID_InputDuplicationSM_send_output!SID_InputDuplicationSM_wait_input -> entered!SID_InputDuplicationSM_send_output!SID_InputDuplicationSM_wait_input ->
													State_InputDuplicationSM_send_output(id__)
								State_InputDuplicationSM_send_output_execute(id__,o____) = SKIP; 
									entered!o____!SID_InputDuplicationSM_send_output ->
									(SKIP; STOP /\ (
										T_InputDuplicationSM_t2(id__)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2}) -> exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
										[] input__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
										[] output1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
										[] output2__?x____:diff(ITIDS,{NULLTRANSITION__,TID_InputDuplicationSM_t1,TID_InputDuplicationSM_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (
												SKIP;
												exited!y____!SID_InputDuplicationSM_send_output -> SKIP);
												State_InputDuplicationSM_send_output(id__)
									))
							within
								enter?x____:diff(SIDS,{SID_InputDuplicationSM_send_output})!SID_InputDuplicationSM_send_output -> (State_InputDuplicationSM_send_output_execute(id__,x____))
							
							
							I_InputDuplicationSM_i0(id__) = let
								T_InputDuplicationSM_t0(id__) = internal__!TID_InputDuplicationSM_t0 -> enter!SID_InputDuplicationSM!SID_InputDuplicationSM_wait_input -> entered!SID_InputDuplicationSM!SID_InputDuplicationSM_wait_input ->
								SKIP
							within
								T_InputDuplicationSM_t0(id__)
							
							
							State_InputDuplicationSM_wait_input_R(id__) = 
								State_InputDuplicationSM_wait_input(id__)
									[|diff(int_int,InputDuplicationSM_wait_input_triggers)|]
								SKIP
									 		
							State_InputDuplicationSM_send_output_R(id__) = 
								State_InputDuplicationSM_send_output(id__)
									[|diff(int_int,InputDuplicationSM_send_output_triggers)|]
								SKIP
									 		
								
							STM(id__) = (
								I_InputDuplicationSM_i0(id__)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output}),
											y____ <- {SID_InputDuplicationSM_wait_input,SID_InputDuplicationSM_send_output}
									|}|]
								(
									State_InputDuplicationSM_wait_input_R(id__)
										[|inter(CS_InputDuplicationSM_wait_input_sync,CS_InputDuplicationSM_send_output_sync)|]
									State_InputDuplicationSM_send_output_R(id__)
								)
							)
							
							-- optimized memory process
							channel getV_x: TripleAxis
							
							-- individual memory processes
							Memory_x(x__) = ( 
								get_x!x__ -> Memory_x(x__)
								[]
								getV_x!x__ -> Memory_x(x__)
								[]
								set_x?x__ -> Memory_x(x__)
								[]
								input__!TID_InputDuplicationSM_t1.in?x -> Memory_x(x)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 x) = (
								internal__!TID_InputDuplicationSM_t0 -> SKIP
								[]
								input__!TID_InputDuplicationSM_t1.in?x -> SKIP
								[]
								internal__!TID_InputDuplicationSM_t2 -> SKIP
							
								[]
									set_x?x__ -> SKIP
							 	)
							MemoryTransitions_InputDuplicationSM(id__) =
								(
								getV_x?x ->
								 MemoryTransitions(id__,
								 	 x);
								 MemoryTransitions_InputDuplicationSM(id__)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_InputDuplicationSM = Union(
								{
									{
										Memory_x((0,0,0))
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									getV_x,
									setWC,
									input__.TID_InputDuplicationSM_t1,
									set_x
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_x,
									getWC
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_InputDuplicationSM @ P
							
							-- complete memory process
							MemoryN(id__) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_InputDuplicationSM(id__)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- x
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_InputDuplicationSM_t1,
							--		TID_InputDuplicationSM_t0,
							--		TID_InputDuplicationSM_t2}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   input__!TID_InputDuplicationSM_t1.in?x -> Update
									 	   []
									 	   internal__!TID_InputDuplicationSM_t0 -> Update
									 	   []
									 	   internal__!TID_InputDuplicationSM_t2 -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_x(x__) = ( 
								get_x!x__ -> Memory_opt_x(x__)
								[]
								set_x?x__ -> Memory_opt_x(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_x((0,0,0))
								          	[| {|get_x,set_x|} |] 
								          	STM_core(id__)
								          	)\ {|get_x,set_x|}
								          )
								      	  [| {|internal__.TID_InputDuplicationSM_t0,internal__.TID_InputDuplicationSM_t2,input__.TID_InputDuplicationSM_t1|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{||})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_x,set_x|},
										{||}
									)
										
									,
									{|internal__.TID_InputDuplicationSM_t0,
									input__.TID_InputDuplicationSM_t1,
									internal__.TID_InputDuplicationSM_t2|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_x,set_x|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__) = prioritise((((
								wbisim(STM(id__))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__))
										[| union(WCsets,WCsync) |]
									Clocks(id__)
								)\WCsets
							)
							[[
								input__.x____ <- input,
								output1__.x____ <- output1,
								output2__.x____ <- output2
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__) = 
								dbisim(
									sbisim(
											(STM(id__)
											[| union(WCsync,WCresets) |]
											Clocks(id__))\WCresets
										  )
									  )
							
							AUX_opt(id__) = 
								prioritise(
									(MemorySTM_opt(id__)
									)[[
										input__.x____ <- input,
										output1__.x____ <- output1,
										output2__.x____ <- output2
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__) = prioritise((((
								wbisim(STM(id__))
									[|MachineMemorySyncSet|]
								((MemoryN(id__)) [| union(WCsets,WCsync) |] Clocks(id__))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__) = timed_priority(AUX(id__) \ union(internal_events,ClockResets))
							
							D__(id__) = timed_priority(AUX_opt(id__) \ union(internal_events,ClockResets))
							
							O__(id__) = D__(id__)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__) = timed_priority(AUX(id__) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__) = ShowV(timed_priority(AUX(id__) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__) = AUX(id__)
						}
					endmodule
		
		
			Timed(OneStep) {
				-- declaring call and ret events for undefined operations
				channel output_left_motorCall: core_int
				channel output_right_motorCall: core_int
				channel brushCall: core_int
				channel vacuumCall: core_int
		
				CALL__output_left_motor(id__,
						    x) =  EDeadline(output_left_motorCall.x,0)		
				CALL__output_right_motor(id__,
						    x) =  EDeadline(output_right_motorCall.x,0)		
				CALL__brush(id__,
						    x) =  EDeadline(brushCall.x,0)		
				CALL__vacuum(id__,
						    x) =  EDeadline(vacuumCall.x,0)		
							
				-- declaring controller events
				channel acc_l: InOut.TripleAxis
				channel acc_r: InOut.TripleAxis
				channel ultrasonic: InOut.core_int
				channel battery_level: InOut.core_int
				channel charging: InOut
								
	
			
				-- declaring controller memory
				Memory(id__) = SKIP
				-- declaring controller termination channel
				channel terminate
				
				-- set of visible memory events
				visibleMemoryEvents = {||}
			
				D__(id__,
						    const_Module_PathPlanningController_stm_ref0_cliff,
						    const_Module_PathPlanningController_stm_ref0_nozzle,
						    const_Module_PathPlanningController_stm_ref0_battery_low,
						    const_Module_PathPlanningController_stm_ref0_sleep_time,
						    const_Module_PathPlanningController_stm_ref0_acc_distance,
						    const_Module_PathPlanningController_stm_ref1_t,
						    const_Module_PathPlanningController_stm_ref2_t,
						    const_Module_PathPlanningController_stm_ref3_t,
						    const_Module_PathPlanningController_stm_ref4_voltage,
						    const_Module_PathPlanningController_stm_ref5_t,
						    const_Module_PathPlanningController_stm_ref5_acc_distance,
						    const_Module_PathPlanningController_stm_ref6_kp,
						    const_Module_PathPlanningController_stm_ref6_ki,
						    const_Module_PathPlanningController_stm_ref6_kd,
						    const_Module_PathPlanningController_stm_ref6_step,
						    const_Module_PathPlanningController_stm_ref7_kp,
						    const_Module_PathPlanningController_stm_ref7_ki,
						    const_Module_PathPlanningController_stm_ref7_kd,
						    const_Module_PathPlanningController_stm_ref7_step,
						    const_Module_PathPlanningController_stm_ref8_step,
						    const_Module_PathPlanningController_stm_ref8_climb_speed,
						    const_Module_PathPlanningController_stm_ref8_descent_speed,
						    const_Module_PathPlanningController_stm_ref8_side_speed,
						    const_Module_PathPlanningController_stm_ref8_forward_angle,
						    const_Module_PathPlanningController_stm_ref8_left_angle,
						    const_Module_PathPlanningController_stm_ref8_right_angle,
						    const_Module_PathPlanningController_stm_ref8_turn_speed,
						    const_Module_PathPlanningController_stm_ref8_movesp,
						    const_Module_PathPlanningController_stm_ref8_stopsp) = prioritise(wbisim(
					(
						(
							let
								const_PathPlanningSM_cliff = const_Module_PathPlanningController_stm_ref0_cliff
								const_PathPlanningSM_nozzle = const_Module_PathPlanningController_stm_ref0_nozzle
								const_PathPlanningSM_battery_low = const_Module_PathPlanningController_stm_ref0_battery_low
								const_PathPlanningSM_sleep_time = const_Module_PathPlanningController_stm_ref0_sleep_time
								const_PathPlanningSM_acc_distance = const_Module_PathPlanningController_stm_ref0_acc_distance
							within 
							stm_ref0::D__(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::displacement.in <- stm_ref3::displacement.out,
								stm_ref0::displacement.out <- stm_ref3::displacement.in,
								stm_ref0::ultrasonic <- ultrasonic,
								stm_ref0::battery_level <- battery_level,
								stm_ref0::charging <- charging
							]]
						)
							[|{|terminate, stm_ref0::clean, stm_ref3::displacement, stm_ref0::move_forward, stm_ref0::turn, stm_ref0::stop|}|]
						(
							(
								let
									const_SpeedSM_t = const_Module_PathPlanningController_stm_ref1_t
								within 
								stm_ref1::D__(id__,
										    const_SpeedSM_t)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::acc.in <- stm_ref10::output1.out,
									stm_ref1::acc.out <- stm_ref10::output1.in
								]]
							)
								[|{|terminate, stm_ref1::sp, stm_ref10::output1|}|]
							(
								(
									let
										const_SpeedSM_t = const_Module_PathPlanningController_stm_ref2_t
									within 
									stm_ref2::D__(id__,
											    const_SpeedSM_t)[[
										stm_ref2::terminate <- terminate,
										stm_ref2::acc.in <- stm_ref11::output1.out,
										stm_ref2::acc.out <- stm_ref11::output1.in
									]]
								)
									[|{|terminate, stm_ref11::output1, stm_ref2::sp|}|]
								(
									(
										let
											const_DisplacementSM_t = const_Module_PathPlanningController_stm_ref3_t
										within 
										stm_ref3::D__(id__,
												    const_DisplacementSM_t)[[
											stm_ref3::terminate <- terminate,
											stm_ref3::sp.in <- stm_ref12::output1.out,
											stm_ref3::sp.out <- stm_ref12::output1.in
										]]
									)
										[|{|terminate, stm_ref12::output1|}|]
									(
										(
											let
												const_CleanSM_voltage = const_Module_PathPlanningController_stm_ref4_voltage
											within 
											stm_ref4::D__(id__,
													    const_CleanSM_voltage)[[
												stm_ref4::terminate <- terminate,
												stm_ref4::clean.in <- stm_ref0::clean.out,
												stm_ref4::clean.out <- stm_ref0::clean.in,
												stm_ref4::brushCall <- brushCall,
												stm_ref4::vacuumCall <- vacuumCall
											]]
										)
											[|{|terminate|}|]
										(
											(
												let
													const_AngularSpeedSM_t = const_Module_PathPlanningController_stm_ref5_t
													const_AngularSpeedSM_acc_distance = const_Module_PathPlanningController_stm_ref5_acc_distance
												within 
												stm_ref5::D__(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)[[
													stm_ref5::terminate <- terminate,
													stm_ref5::acc_l.in <- stm_ref10::output2.out,
													stm_ref5::acc_l.out <- stm_ref10::output2.in,
													stm_ref5::acc_r.in <- stm_ref11::output2.out,
													stm_ref5::acc_r.out <- stm_ref11::output2.in
												]]
											)
												[|{|terminate, stm_ref5::angle, stm_ref10::output2, stm_ref11::output2|}|]
											(
												(
													let
														const_PID_kp = const_Module_PathPlanningController_stm_ref6_kp
														const_PID_ki = const_Module_PathPlanningController_stm_ref6_ki
														const_PID_kd = const_Module_PathPlanningController_stm_ref6_kd
														const_PID_step = const_Module_PathPlanningController_stm_ref6_step
													within 
													stm_ref6::D__(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)[[
														stm_ref6::terminate <- terminate,
														stm_ref6::target.in <- stm_ref8::target_angle.out,
														stm_ref6::target.out <- stm_ref8::target_angle.in,
														stm_ref6::actual.in <- stm_ref5::angle.out,
														stm_ref6::actual.out <- stm_ref5::angle.in
													]]
												)
													[|{|terminate, stm_ref8::target_angle, stm_ref6::err_output|}|]
												(
													(
														let
															const_PID_kp = const_Module_PathPlanningController_stm_ref7_kp
															const_PID_ki = const_Module_PathPlanningController_stm_ref7_ki
															const_PID_kd = const_Module_PathPlanningController_stm_ref7_kd
															const_PID_step = const_Module_PathPlanningController_stm_ref7_step
														within 
														stm_ref7::D__(id__,
																    const_PID_kp,
																    const_PID_ki,
																    const_PID_kd,
																    const_PID_step)[[
															stm_ref7::terminate <- terminate,
															stm_ref7::target.in <- stm_ref8::target_speed.out,
															stm_ref7::target.out <- stm_ref8::target_speed.in,
															stm_ref7::actual.in <- stm_ref9::linear_speed.out,
															stm_ref7::actual.out <- stm_ref9::linear_speed.in
														]]
													)
														[|{|terminate, stm_ref8::target_speed, stm_ref7::err_output, stm_ref9::linear_speed|}|]
													(
														(
															let
																const_MidLevelSM_step = const_Module_PathPlanningController_stm_ref8_step
																const_MidLevelSM_climb_speed = const_Module_PathPlanningController_stm_ref8_climb_speed
																const_MidLevelSM_descent_speed = const_Module_PathPlanningController_stm_ref8_descent_speed
																const_MidLevelSM_side_speed = const_Module_PathPlanningController_stm_ref8_side_speed
																const_MidLevelSM_forward_angle = const_Module_PathPlanningController_stm_ref8_forward_angle
																const_MidLevelSM_left_angle = const_Module_PathPlanningController_stm_ref8_left_angle
																const_MidLevelSM_right_angle = const_Module_PathPlanningController_stm_ref8_right_angle
																const_MidLevelSM_turn_speed = const_Module_PathPlanningController_stm_ref8_turn_speed
																const_MidLevelSM_movesp = const_Module_PathPlanningController_stm_ref8_movesp
																const_MidLevelSM_stopsp = const_Module_PathPlanningController_stm_ref8_stopsp
															within 
															stm_ref8::D__(id__,
																	    const_MidLevelSM_step,
																	    const_MidLevelSM_climb_speed,
																	    const_MidLevelSM_descent_speed,
																	    const_MidLevelSM_side_speed,
																	    const_MidLevelSM_forward_angle,
																	    const_MidLevelSM_left_angle,
																	    const_MidLevelSM_right_angle,
																	    const_MidLevelSM_turn_speed,
																	    const_MidLevelSM_movesp,
																	    const_MidLevelSM_stopsp)[[
																stm_ref8::terminate <- terminate,
																stm_ref8::speed_adjustment.in <- stm_ref7::err_output.out,
																stm_ref8::speed_adjustment.out <- stm_ref7::err_output.in,
																stm_ref8::angle_adjustment.in <- stm_ref6::err_output.out,
																stm_ref8::angle_adjustment.out <- stm_ref6::err_output.in,
																stm_ref8::move_forward.in <- stm_ref0::move_forward.out,
																stm_ref8::move_forward.out <- stm_ref0::move_forward.in,
																stm_ref8::turn.in <- stm_ref0::turn.out,
																stm_ref8::turn.out <- stm_ref0::turn.in,
																stm_ref8::stop.in <- stm_ref0::stop.out,
																stm_ref8::stop.out <- stm_ref0::stop.in,
																stm_ref8::output_left_motorCall <- output_left_motorCall,
																stm_ref8::output_right_motorCall <- output_right_motorCall
															]]
														)
															[|{|terminate|}|]
														(
															(
																stm_ref9::D__(id__)[[
																	stm_ref9::terminate <- terminate,
																	stm_ref9::speed_l.in <- stm_ref1::sp.out,
																	stm_ref9::speed_l.out <- stm_ref1::sp.in,
																	stm_ref9::speed_r.in <- stm_ref12::output2.out,
																	stm_ref9::speed_r.out <- stm_ref12::output2.in
																]]
															)
																[|{|terminate, stm_ref12::output2|}|]
															(
																(
																	stm_ref10::D__(id__)[[
																		stm_ref10::terminate <- terminate,
																		stm_ref10::input <- acc_l
																	]]
																)
																	[|{|terminate|}|]
																(
																	(
																		stm_ref11::D__(id__)[[
																			stm_ref11::terminate <- terminate,
																			stm_ref11::input <- acc_r
																		]]
																	)
																		[|{|terminate|}|]
																	(
																		stm_ref12::D__(id__)[[
																			stm_ref12::terminate <- terminate,
																			stm_ref12::input.in <- stm_ref2::sp.out,
																			stm_ref12::input.out <- stm_ref2::sp.in
																		]]
																	)
																)
																\diff(
																	{|terminate|},
																	{|terminate|}
																)
															)
															\diff(
																{|terminate|},
																{|terminate|}
															)
														)
														\diff(
															{|terminate, stm_ref12::output2|},
															{|terminate|}
														)
													)
													\diff(
														{|terminate|},
														{|terminate|}
													)
												)
												\diff(
													{|terminate, stm_ref8::target_speed, stm_ref7::err_output, stm_ref9::linear_speed|},
													{|terminate|}
												)
											)
											\diff(
												{|terminate, stm_ref8::target_angle, stm_ref6::err_output|},
												{|terminate|}
											)
										)
										\diff(
											{|terminate, stm_ref5::angle, stm_ref10::output2, stm_ref11::output2|},
											{|terminate|}
										)
									)
									\diff(
										{|terminate|},
										{|terminate|}
									)
								)
								\diff(
									{|terminate, stm_ref12::output1|},
									{|terminate|}
								)
							)
							\diff(
								{|terminate, stm_ref11::output1, stm_ref2::sp|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate, stm_ref1::sp, stm_ref10::output1|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_ref0::clean, stm_ref3::displacement, stm_ref0::move_forward, stm_ref0::turn, stm_ref0::stop|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP,
				<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				O__(id__,
						    const_Module_PathPlanningController_stm_ref0_cliff,
						    const_Module_PathPlanningController_stm_ref0_nozzle,
						    const_Module_PathPlanningController_stm_ref0_battery_low,
						    const_Module_PathPlanningController_stm_ref0_sleep_time,
						    const_Module_PathPlanningController_stm_ref0_acc_distance,
						    const_Module_PathPlanningController_stm_ref1_t,
						    const_Module_PathPlanningController_stm_ref2_t,
						    const_Module_PathPlanningController_stm_ref3_t,
						    const_Module_PathPlanningController_stm_ref4_voltage,
						    const_Module_PathPlanningController_stm_ref5_t,
						    const_Module_PathPlanningController_stm_ref5_acc_distance,
						    const_Module_PathPlanningController_stm_ref6_kp,
						    const_Module_PathPlanningController_stm_ref6_ki,
						    const_Module_PathPlanningController_stm_ref6_kd,
						    const_Module_PathPlanningController_stm_ref6_step,
						    const_Module_PathPlanningController_stm_ref7_kp,
						    const_Module_PathPlanningController_stm_ref7_ki,
						    const_Module_PathPlanningController_stm_ref7_kd,
						    const_Module_PathPlanningController_stm_ref7_step,
						    const_Module_PathPlanningController_stm_ref8_step,
						    const_Module_PathPlanningController_stm_ref8_climb_speed,
						    const_Module_PathPlanningController_stm_ref8_descent_speed,
						    const_Module_PathPlanningController_stm_ref8_side_speed,
						    const_Module_PathPlanningController_stm_ref8_forward_angle,
						    const_Module_PathPlanningController_stm_ref8_left_angle,
						    const_Module_PathPlanningController_stm_ref8_right_angle,
						    const_Module_PathPlanningController_stm_ref8_turn_speed,
						    const_Module_PathPlanningController_stm_ref8_movesp,
						    const_Module_PathPlanningController_stm_ref8_stopsp) = D__(id__,
						    const_Module_PathPlanningController_stm_ref0_cliff,
						    const_Module_PathPlanningController_stm_ref0_nozzle,
						    const_Module_PathPlanningController_stm_ref0_battery_low,
						    const_Module_PathPlanningController_stm_ref0_sleep_time,
						    const_Module_PathPlanningController_stm_ref0_acc_distance,
						    const_Module_PathPlanningController_stm_ref1_t,
						    const_Module_PathPlanningController_stm_ref2_t,
						    const_Module_PathPlanningController_stm_ref3_t,
						    const_Module_PathPlanningController_stm_ref4_voltage,
						    const_Module_PathPlanningController_stm_ref5_t,
						    const_Module_PathPlanningController_stm_ref5_acc_distance,
						    const_Module_PathPlanningController_stm_ref6_kp,
						    const_Module_PathPlanningController_stm_ref6_ki,
						    const_Module_PathPlanningController_stm_ref6_kd,
						    const_Module_PathPlanningController_stm_ref6_step,
						    const_Module_PathPlanningController_stm_ref7_kp,
						    const_Module_PathPlanningController_stm_ref7_ki,
						    const_Module_PathPlanningController_stm_ref7_kd,
						    const_Module_PathPlanningController_stm_ref7_step,
						    const_Module_PathPlanningController_stm_ref8_step,
						    const_Module_PathPlanningController_stm_ref8_climb_speed,
						    const_Module_PathPlanningController_stm_ref8_descent_speed,
						    const_Module_PathPlanningController_stm_ref8_side_speed,
						    const_Module_PathPlanningController_stm_ref8_forward_angle,
						    const_Module_PathPlanningController_stm_ref8_left_angle,
						    const_Module_PathPlanningController_stm_ref8_right_angle,
						    const_Module_PathPlanningController_stm_ref8_turn_speed,
						    const_Module_PathPlanningController_stm_ref8_movesp,
						    const_Module_PathPlanningController_stm_ref8_stopsp)
				
				-- VS version
				VS__(id__,
						    const_Module_PathPlanningController_stm_ref0_cliff,
						    const_Module_PathPlanningController_stm_ref0_nozzle,
						    const_Module_PathPlanningController_stm_ref0_battery_low,
						    const_Module_PathPlanningController_stm_ref0_sleep_time,
						    const_Module_PathPlanningController_stm_ref0_acc_distance,
						    const_Module_PathPlanningController_stm_ref1_t,
						    const_Module_PathPlanningController_stm_ref2_t,
						    const_Module_PathPlanningController_stm_ref3_t,
						    const_Module_PathPlanningController_stm_ref4_voltage,
						    const_Module_PathPlanningController_stm_ref5_t,
						    const_Module_PathPlanningController_stm_ref5_acc_distance,
						    const_Module_PathPlanningController_stm_ref6_kp,
						    const_Module_PathPlanningController_stm_ref6_ki,
						    const_Module_PathPlanningController_stm_ref6_kd,
						    const_Module_PathPlanningController_stm_ref6_step,
						    const_Module_PathPlanningController_stm_ref7_kp,
						    const_Module_PathPlanningController_stm_ref7_ki,
						    const_Module_PathPlanningController_stm_ref7_kd,
						    const_Module_PathPlanningController_stm_ref7_step,
						    const_Module_PathPlanningController_stm_ref8_step,
						    const_Module_PathPlanningController_stm_ref8_climb_speed,
						    const_Module_PathPlanningController_stm_ref8_descent_speed,
						    const_Module_PathPlanningController_stm_ref8_side_speed,
						    const_Module_PathPlanningController_stm_ref8_forward_angle,
						    const_Module_PathPlanningController_stm_ref8_left_angle,
						    const_Module_PathPlanningController_stm_ref8_right_angle,
						    const_Module_PathPlanningController_stm_ref8_turn_speed,
						    const_Module_PathPlanningController_stm_ref8_movesp,
						    const_Module_PathPlanningController_stm_ref8_stopsp) = prioritise(wbisim(
					(
						(
							let
								const_PathPlanningSM_cliff = const_Module_PathPlanningController_stm_ref0_cliff
								const_PathPlanningSM_nozzle = const_Module_PathPlanningController_stm_ref0_nozzle
								const_PathPlanningSM_battery_low = const_Module_PathPlanningController_stm_ref0_battery_low
								const_PathPlanningSM_sleep_time = const_Module_PathPlanningController_stm_ref0_sleep_time
								const_PathPlanningSM_acc_distance = const_Module_PathPlanningController_stm_ref0_acc_distance
							within 
							stm_ref0::VS__(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::displacement.in <- stm_ref3::displacement.out,
								stm_ref0::displacement.out <- stm_ref3::displacement.in,
								stm_ref0::ultrasonic <- ultrasonic,
								stm_ref0::battery_level <- battery_level,
								stm_ref0::charging <- charging
							]]
						)
							[|{|terminate, stm_ref0::clean, stm_ref3::displacement, stm_ref0::move_forward, stm_ref0::turn, stm_ref0::stop|}|]
						(
							(
								let
									const_SpeedSM_t = const_Module_PathPlanningController_stm_ref1_t
								within 
								stm_ref1::VS__(id__,
										    const_SpeedSM_t)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::acc.in <- stm_ref10::output1.out,
									stm_ref1::acc.out <- stm_ref10::output1.in
								]]
							)
								[|{|terminate, stm_ref1::sp, stm_ref10::output1|}|]
							(
								(
									let
										const_SpeedSM_t = const_Module_PathPlanningController_stm_ref2_t
									within 
									stm_ref2::VS__(id__,
											    const_SpeedSM_t)[[
										stm_ref2::terminate <- terminate,
										stm_ref2::acc.in <- stm_ref11::output1.out,
										stm_ref2::acc.out <- stm_ref11::output1.in
									]]
								)
									[|{|terminate, stm_ref11::output1, stm_ref2::sp|}|]
								(
									(
										let
											const_DisplacementSM_t = const_Module_PathPlanningController_stm_ref3_t
										within 
										stm_ref3::VS__(id__,
												    const_DisplacementSM_t)[[
											stm_ref3::terminate <- terminate,
											stm_ref3::sp.in <- stm_ref12::output1.out,
											stm_ref3::sp.out <- stm_ref12::output1.in
										]]
									)
										[|{|terminate, stm_ref12::output1|}|]
									(
										(
											let
												const_CleanSM_voltage = const_Module_PathPlanningController_stm_ref4_voltage
											within 
											stm_ref4::VS__(id__,
													    const_CleanSM_voltage)[[
												stm_ref4::terminate <- terminate,
												stm_ref4::clean.in <- stm_ref0::clean.out,
												stm_ref4::clean.out <- stm_ref0::clean.in,
												stm_ref4::brushCall <- brushCall,
												stm_ref4::vacuumCall <- vacuumCall
											]]
										)
											[|{|terminate|}|]
										(
											(
												let
													const_AngularSpeedSM_t = const_Module_PathPlanningController_stm_ref5_t
													const_AngularSpeedSM_acc_distance = const_Module_PathPlanningController_stm_ref5_acc_distance
												within 
												stm_ref5::VS__(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)[[
													stm_ref5::terminate <- terminate,
													stm_ref5::acc_l.in <- stm_ref10::output2.out,
													stm_ref5::acc_l.out <- stm_ref10::output2.in,
													stm_ref5::acc_r.in <- stm_ref11::output2.out,
													stm_ref5::acc_r.out <- stm_ref11::output2.in
												]]
											)
												[|{|terminate, stm_ref5::angle, stm_ref10::output2, stm_ref11::output2|}|]
											(
												(
													let
														const_PID_kp = const_Module_PathPlanningController_stm_ref6_kp
														const_PID_ki = const_Module_PathPlanningController_stm_ref6_ki
														const_PID_kd = const_Module_PathPlanningController_stm_ref6_kd
														const_PID_step = const_Module_PathPlanningController_stm_ref6_step
													within 
													stm_ref6::VS__(id__,
															    const_PID_kp,
															    const_PID_ki,
															    const_PID_kd,
															    const_PID_step)[[
														stm_ref6::terminate <- terminate,
														stm_ref6::target.in <- stm_ref8::target_angle.out,
														stm_ref6::target.out <- stm_ref8::target_angle.in,
														stm_ref6::actual.in <- stm_ref5::angle.out,
														stm_ref6::actual.out <- stm_ref5::angle.in
													]]
												)
													[|{|terminate, stm_ref8::target_angle, stm_ref6::err_output|}|]
												(
													(
														let
															const_PID_kp = const_Module_PathPlanningController_stm_ref7_kp
															const_PID_ki = const_Module_PathPlanningController_stm_ref7_ki
															const_PID_kd = const_Module_PathPlanningController_stm_ref7_kd
															const_PID_step = const_Module_PathPlanningController_stm_ref7_step
														within 
														stm_ref7::VS__(id__,
																    const_PID_kp,
																    const_PID_ki,
																    const_PID_kd,
																    const_PID_step)[[
															stm_ref7::terminate <- terminate,
															stm_ref7::target.in <- stm_ref8::target_speed.out,
															stm_ref7::target.out <- stm_ref8::target_speed.in,
															stm_ref7::actual.in <- stm_ref9::linear_speed.out,
															stm_ref7::actual.out <- stm_ref9::linear_speed.in
														]]
													)
														[|{|terminate, stm_ref8::target_speed, stm_ref7::err_output, stm_ref9::linear_speed|}|]
													(
														(
															let
																const_MidLevelSM_step = const_Module_PathPlanningController_stm_ref8_step
																const_MidLevelSM_climb_speed = const_Module_PathPlanningController_stm_ref8_climb_speed
																const_MidLevelSM_descent_speed = const_Module_PathPlanningController_stm_ref8_descent_speed
																const_MidLevelSM_side_speed = const_Module_PathPlanningController_stm_ref8_side_speed
																const_MidLevelSM_forward_angle = const_Module_PathPlanningController_stm_ref8_forward_angle
																const_MidLevelSM_left_angle = const_Module_PathPlanningController_stm_ref8_left_angle
																const_MidLevelSM_right_angle = const_Module_PathPlanningController_stm_ref8_right_angle
																const_MidLevelSM_turn_speed = const_Module_PathPlanningController_stm_ref8_turn_speed
																const_MidLevelSM_movesp = const_Module_PathPlanningController_stm_ref8_movesp
																const_MidLevelSM_stopsp = const_Module_PathPlanningController_stm_ref8_stopsp
															within 
															stm_ref8::VS__(id__,
																	    const_MidLevelSM_step,
																	    const_MidLevelSM_climb_speed,
																	    const_MidLevelSM_descent_speed,
																	    const_MidLevelSM_side_speed,
																	    const_MidLevelSM_forward_angle,
																	    const_MidLevelSM_left_angle,
																	    const_MidLevelSM_right_angle,
																	    const_MidLevelSM_turn_speed,
																	    const_MidLevelSM_movesp,
																	    const_MidLevelSM_stopsp)[[
																stm_ref8::terminate <- terminate,
																stm_ref8::speed_adjustment.in <- stm_ref7::err_output.out,
																stm_ref8::speed_adjustment.out <- stm_ref7::err_output.in,
																stm_ref8::angle_adjustment.in <- stm_ref6::err_output.out,
																stm_ref8::angle_adjustment.out <- stm_ref6::err_output.in,
																stm_ref8::move_forward.in <- stm_ref0::move_forward.out,
																stm_ref8::move_forward.out <- stm_ref0::move_forward.in,
																stm_ref8::turn.in <- stm_ref0::turn.out,
																stm_ref8::turn.out <- stm_ref0::turn.in,
																stm_ref8::stop.in <- stm_ref0::stop.out,
																stm_ref8::stop.out <- stm_ref0::stop.in,
																stm_ref8::output_left_motorCall <- output_left_motorCall,
																stm_ref8::output_right_motorCall <- output_right_motorCall
															]]
														)
															[|{|terminate|}|]
														(
															(
																stm_ref9::VS__(id__)[[
																	stm_ref9::terminate <- terminate,
																	stm_ref9::speed_l.in <- stm_ref1::sp.out,
																	stm_ref9::speed_l.out <- stm_ref1::sp.in,
																	stm_ref9::speed_r.in <- stm_ref12::output2.out,
																	stm_ref9::speed_r.out <- stm_ref12::output2.in
																]]
															)
																[|{|terminate, stm_ref12::output2|}|]
															(
																(
																	stm_ref10::VS__(id__)[[
																		stm_ref10::terminate <- terminate,
																		stm_ref10::input <- acc_l
																	]]
																)
																	[|{|terminate|}|]
																(
																	(
																		stm_ref11::VS__(id__)[[
																			stm_ref11::terminate <- terminate,
																			stm_ref11::input <- acc_r
																		]]
																	)
																		[|{|terminate|}|]
																	(
																		stm_ref12::VS__(id__)[[
																			stm_ref12::terminate <- terminate,
																			stm_ref12::input.in <- stm_ref2::sp.out,
																			stm_ref12::input.out <- stm_ref2::sp.in
																		]]
																	)
																)
																\diff(
																	{|terminate|},
																	{|terminate|}
																)
															)
															\diff(
																{|terminate|},
																{|terminate|}
															)
														)
														\diff(
															{|terminate, stm_ref12::output2|},
															{|terminate|}
														)
													)
													\diff(
														{|terminate|},
														{|terminate|}
													)
												)
												\diff(
													{|terminate, stm_ref8::target_speed, stm_ref7::err_output, stm_ref9::linear_speed|},
													{|terminate|}
												)
											)
											\diff(
												{|terminate, stm_ref8::target_angle, stm_ref6::err_output|},
												{|terminate|}
											)
										)
										\diff(
											{|terminate, stm_ref5::angle, stm_ref10::output2, stm_ref11::output2|},
											{|terminate|}
										)
									)
									\diff(
										{|terminate|},
										{|terminate|}
									)
								)
								\diff(
									{|terminate, stm_ref12::output1|},
									{|terminate|}
								)
							)
							\diff(
								{|terminate, stm_ref11::output1, stm_ref2::sp|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate, stm_ref1::sp, stm_ref10::output1|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_ref0::clean, stm_ref3::displacement, stm_ref0::move_forward, stm_ref0::turn, stm_ref0::stop|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP,
				<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				HEXT(id__,
						    const_Module_PathPlanningController_stm_ref0_cliff,
						    const_Module_PathPlanningController_stm_ref0_nozzle,
						    const_Module_PathPlanningController_stm_ref0_battery_low,
						    const_Module_PathPlanningController_stm_ref0_sleep_time,
						    const_Module_PathPlanningController_stm_ref0_acc_distance,
						    const_Module_PathPlanningController_stm_ref1_t,
						    const_Module_PathPlanningController_stm_ref2_t,
						    const_Module_PathPlanningController_stm_ref3_t,
						    const_Module_PathPlanningController_stm_ref4_voltage,
						    const_Module_PathPlanningController_stm_ref5_t,
						    const_Module_PathPlanningController_stm_ref5_acc_distance,
						    const_Module_PathPlanningController_stm_ref6_kp,
						    const_Module_PathPlanningController_stm_ref6_ki,
						    const_Module_PathPlanningController_stm_ref6_kd,
						    const_Module_PathPlanningController_stm_ref6_step,
						    const_Module_PathPlanningController_stm_ref7_kp,
						    const_Module_PathPlanningController_stm_ref7_ki,
						    const_Module_PathPlanningController_stm_ref7_kd,
						    const_Module_PathPlanningController_stm_ref7_step,
						    const_Module_PathPlanningController_stm_ref8_step,
						    const_Module_PathPlanningController_stm_ref8_climb_speed,
						    const_Module_PathPlanningController_stm_ref8_descent_speed,
						    const_Module_PathPlanningController_stm_ref8_side_speed,
						    const_Module_PathPlanningController_stm_ref8_forward_angle,
						    const_Module_PathPlanningController_stm_ref8_left_angle,
						    const_Module_PathPlanningController_stm_ref8_right_angle,
						    const_Module_PathPlanningController_stm_ref8_turn_speed,
						    const_Module_PathPlanningController_stm_ref8_movesp,
						    const_Module_PathPlanningController_stm_ref8_stopsp) = D__(id__,
						    const_Module_PathPlanningController_stm_ref0_cliff,
						    const_Module_PathPlanningController_stm_ref0_nozzle,
						    const_Module_PathPlanningController_stm_ref0_battery_low,
						    const_Module_PathPlanningController_stm_ref0_sleep_time,
						    const_Module_PathPlanningController_stm_ref0_acc_distance,
						    const_Module_PathPlanningController_stm_ref1_t,
						    const_Module_PathPlanningController_stm_ref2_t,
						    const_Module_PathPlanningController_stm_ref3_t,
						    const_Module_PathPlanningController_stm_ref4_voltage,
						    const_Module_PathPlanningController_stm_ref5_t,
						    const_Module_PathPlanningController_stm_ref5_acc_distance,
						    const_Module_PathPlanningController_stm_ref6_kp,
						    const_Module_PathPlanningController_stm_ref6_ki,
						    const_Module_PathPlanningController_stm_ref6_kd,
						    const_Module_PathPlanningController_stm_ref6_step,
						    const_Module_PathPlanningController_stm_ref7_kp,
						    const_Module_PathPlanningController_stm_ref7_ki,
						    const_Module_PathPlanningController_stm_ref7_kd,
						    const_Module_PathPlanningController_stm_ref7_step,
						    const_Module_PathPlanningController_stm_ref8_step,
						    const_Module_PathPlanningController_stm_ref8_climb_speed,
						    const_Module_PathPlanningController_stm_ref8_descent_speed,
						    const_Module_PathPlanningController_stm_ref8_side_speed,
						    const_Module_PathPlanningController_stm_ref8_forward_angle,
						    const_Module_PathPlanningController_stm_ref8_left_angle,
						    const_Module_PathPlanningController_stm_ref8_right_angle,
						    const_Module_PathPlanningController_stm_ref8_turn_speed,
						    const_Module_PathPlanningController_stm_ref8_movesp,
						    const_Module_PathPlanningController_stm_ref8_stopsp) [|shared_variable_events|] SKIP
			}
		endmodule
	
	Timed(OneStep) {
			
		-- declaring module memory
		Memory(id__) = SKIP
		
		visibleMemoryEvents = {||}
		
		D__(id__,
				    const_Module_PathPlanningController_stm_ref6_kp,
				    const_Module_PathPlanningController_stm_ref6_ki,
				    const_Module_PathPlanningController_stm_ref6_kd,
				    const_Module_PathPlanningController_stm_ref6_step,
				    const_Module_PathPlanningController_stm_ref3_t,
				    const_Module_PathPlanningController_stm_ref7_kp,
				    const_Module_PathPlanningController_stm_ref7_ki,
				    const_Module_PathPlanningController_stm_ref7_kd,
				    const_Module_PathPlanningController_stm_ref7_step,
				    const_Module_PathPlanningController_stm_ref8_step,
				    const_Module_PathPlanningController_stm_ref8_climb_speed,
				    const_Module_PathPlanningController_stm_ref8_descent_speed,
				    const_Module_PathPlanningController_stm_ref8_side_speed,
				    const_Module_PathPlanningController_stm_ref8_forward_angle,
				    const_Module_PathPlanningController_stm_ref8_left_angle,
				    const_Module_PathPlanningController_stm_ref8_right_angle,
				    const_Module_PathPlanningController_stm_ref8_turn_speed,
				    const_Module_PathPlanningController_stm_ref8_movesp,
				    const_Module_PathPlanningController_stm_ref8_stopsp,
				    const_Module_PathPlanningController_stm_ref1_t,
				    const_Module_PathPlanningController_stm_ref2_t,
				    const_Module_PathPlanningController_stm_ref4_voltage,
				    const_Module_PathPlanningController_stm_ref0_cliff,
				    const_Module_PathPlanningController_stm_ref0_nozzle,
				    const_Module_PathPlanningController_stm_ref0_battery_low,
				    const_Module_PathPlanningController_stm_ref0_sleep_time,
				    const_Module_PathPlanningController_stm_ref0_acc_distance,
				    const_Module_PathPlanningController_stm_ref5_t,
				    const_Module_PathPlanningController_stm_ref5_acc_distance) = prioritise(
			(				(
					(
						(SKIP)
							[|{||}|]
						(
							(
								PathPlanningController::D__(id__,
										    const_Module_PathPlanningController_stm_ref0_cliff,
										    const_Module_PathPlanningController_stm_ref0_nozzle,
										    const_Module_PathPlanningController_stm_ref0_battery_low,
										    const_Module_PathPlanningController_stm_ref0_sleep_time,
										    const_Module_PathPlanningController_stm_ref0_acc_distance,
										    const_Module_PathPlanningController_stm_ref1_t,
										    const_Module_PathPlanningController_stm_ref2_t,
										    const_Module_PathPlanningController_stm_ref3_t,
										    const_Module_PathPlanningController_stm_ref4_voltage,
										    const_Module_PathPlanningController_stm_ref5_t,
										    const_Module_PathPlanningController_stm_ref5_acc_distance,
										    const_Module_PathPlanningController_stm_ref6_kp,
										    const_Module_PathPlanningController_stm_ref6_ki,
										    const_Module_PathPlanningController_stm_ref6_kd,
										    const_Module_PathPlanningController_stm_ref6_step,
										    const_Module_PathPlanningController_stm_ref7_kp,
										    const_Module_PathPlanningController_stm_ref7_ki,
										    const_Module_PathPlanningController_stm_ref7_kd,
										    const_Module_PathPlanningController_stm_ref7_step,
										    const_Module_PathPlanningController_stm_ref8_step,
										    const_Module_PathPlanningController_stm_ref8_climb_speed,
										    const_Module_PathPlanningController_stm_ref8_descent_speed,
										    const_Module_PathPlanningController_stm_ref8_side_speed,
										    const_Module_PathPlanningController_stm_ref8_forward_angle,
										    const_Module_PathPlanningController_stm_ref8_left_angle,
										    const_Module_PathPlanningController_stm_ref8_right_angle,
										    const_Module_PathPlanningController_stm_ref8_turn_speed,
										    const_Module_PathPlanningController_stm_ref8_movesp,
										    const_Module_PathPlanningController_stm_ref8_stopsp)[[
									PathPlanningController::terminate <- terminate,
									PathPlanningController::acc_l <- acc_l,
									PathPlanningController::acc_r <- acc_r,
									PathPlanningController::battery_level <- battery_level,
									PathPlanningController::charging <- charging,
									PathPlanningController::ultrasonic <- ultrasonic,
									PathPlanningController::output_left_motorCall <- output_left_motorCall,
									PathPlanningController::output_right_motorCall <- output_right_motorCall,
									PathPlanningController::brushCall <- brushCall,
									PathPlanningController::vacuumCall <- vacuumCall
								]]
							)
								[|
									union(
										{|
										|},
										{|
										|}
									)
								|]
							Memory(id__)
						)
					)
					\ Union({
						{|
						|},
						{|
						|},
						{|
						|}
					})
					[|{|terminate|}|>SKIP
				)\{|terminate|}
			),
			<visibleMemoryEvents,{tock}>
		)
		
		O__(id__,
				    const_Module_PathPlanningController_stm_ref6_kp,
				    const_Module_PathPlanningController_stm_ref6_ki,
				    const_Module_PathPlanningController_stm_ref6_kd,
				    const_Module_PathPlanningController_stm_ref6_step,
				    const_Module_PathPlanningController_stm_ref3_t,
				    const_Module_PathPlanningController_stm_ref7_kp,
				    const_Module_PathPlanningController_stm_ref7_ki,
				    const_Module_PathPlanningController_stm_ref7_kd,
				    const_Module_PathPlanningController_stm_ref7_step,
				    const_Module_PathPlanningController_stm_ref8_step,
				    const_Module_PathPlanningController_stm_ref8_climb_speed,
				    const_Module_PathPlanningController_stm_ref8_descent_speed,
				    const_Module_PathPlanningController_stm_ref8_side_speed,
				    const_Module_PathPlanningController_stm_ref8_forward_angle,
				    const_Module_PathPlanningController_stm_ref8_left_angle,
				    const_Module_PathPlanningController_stm_ref8_right_angle,
				    const_Module_PathPlanningController_stm_ref8_turn_speed,
				    const_Module_PathPlanningController_stm_ref8_movesp,
				    const_Module_PathPlanningController_stm_ref8_stopsp,
				    const_Module_PathPlanningController_stm_ref1_t,
				    const_Module_PathPlanningController_stm_ref2_t,
				    const_Module_PathPlanningController_stm_ref4_voltage,
				    const_Module_PathPlanningController_stm_ref0_cliff,
				    const_Module_PathPlanningController_stm_ref0_nozzle,
				    const_Module_PathPlanningController_stm_ref0_battery_low,
				    const_Module_PathPlanningController_stm_ref0_sleep_time,
				    const_Module_PathPlanningController_stm_ref0_acc_distance,
				    const_Module_PathPlanningController_stm_ref5_t,
				    const_Module_PathPlanningController_stm_ref5_acc_distance) = D__(id__,
				    const_Module_PathPlanningController_stm_ref6_kp,
				    const_Module_PathPlanningController_stm_ref6_ki,
				    const_Module_PathPlanningController_stm_ref6_kd,
				    const_Module_PathPlanningController_stm_ref6_step,
				    const_Module_PathPlanningController_stm_ref3_t,
				    const_Module_PathPlanningController_stm_ref7_kp,
				    const_Module_PathPlanningController_stm_ref7_ki,
				    const_Module_PathPlanningController_stm_ref7_kd,
				    const_Module_PathPlanningController_stm_ref7_step,
				    const_Module_PathPlanningController_stm_ref8_step,
				    const_Module_PathPlanningController_stm_ref8_climb_speed,
				    const_Module_PathPlanningController_stm_ref8_descent_speed,
				    const_Module_PathPlanningController_stm_ref8_side_speed,
				    const_Module_PathPlanningController_stm_ref8_forward_angle,
				    const_Module_PathPlanningController_stm_ref8_left_angle,
				    const_Module_PathPlanningController_stm_ref8_right_angle,
				    const_Module_PathPlanningController_stm_ref8_turn_speed,
				    const_Module_PathPlanningController_stm_ref8_movesp,
				    const_Module_PathPlanningController_stm_ref8_stopsp,
				    const_Module_PathPlanningController_stm_ref1_t,
				    const_Module_PathPlanningController_stm_ref2_t,
				    const_Module_PathPlanningController_stm_ref4_voltage,
				    const_Module_PathPlanningController_stm_ref0_cliff,
				    const_Module_PathPlanningController_stm_ref0_nozzle,
				    const_Module_PathPlanningController_stm_ref0_battery_low,
				    const_Module_PathPlanningController_stm_ref0_sleep_time,
				    const_Module_PathPlanningController_stm_ref0_acc_distance,
				    const_Module_PathPlanningController_stm_ref5_t,
				    const_Module_PathPlanningController_stm_ref5_acc_distance)
		
		-- visible state equivalent
		VS__(id__,
				    const_Module_PathPlanningController_stm_ref6_kp,
				    const_Module_PathPlanningController_stm_ref6_ki,
				    const_Module_PathPlanningController_stm_ref6_kd,
				    const_Module_PathPlanningController_stm_ref6_step,
				    const_Module_PathPlanningController_stm_ref3_t,
				    const_Module_PathPlanningController_stm_ref7_kp,
				    const_Module_PathPlanningController_stm_ref7_ki,
				    const_Module_PathPlanningController_stm_ref7_kd,
				    const_Module_PathPlanningController_stm_ref7_step,
				    const_Module_PathPlanningController_stm_ref8_step,
				    const_Module_PathPlanningController_stm_ref8_climb_speed,
				    const_Module_PathPlanningController_stm_ref8_descent_speed,
				    const_Module_PathPlanningController_stm_ref8_side_speed,
				    const_Module_PathPlanningController_stm_ref8_forward_angle,
				    const_Module_PathPlanningController_stm_ref8_left_angle,
				    const_Module_PathPlanningController_stm_ref8_right_angle,
				    const_Module_PathPlanningController_stm_ref8_turn_speed,
				    const_Module_PathPlanningController_stm_ref8_movesp,
				    const_Module_PathPlanningController_stm_ref8_stopsp,
				    const_Module_PathPlanningController_stm_ref1_t,
				    const_Module_PathPlanningController_stm_ref2_t,
				    const_Module_PathPlanningController_stm_ref4_voltage,
				    const_Module_PathPlanningController_stm_ref0_cliff,
				    const_Module_PathPlanningController_stm_ref0_nozzle,
				    const_Module_PathPlanningController_stm_ref0_battery_low,
				    const_Module_PathPlanningController_stm_ref0_sleep_time,
				    const_Module_PathPlanningController_stm_ref0_acc_distance,
				    const_Module_PathPlanningController_stm_ref5_t,
				    const_Module_PathPlanningController_stm_ref5_acc_distance) = prioritise(
			(				(
					(
						(SKIP)
							[|{||}|]
						(
							(
								PathPlanningController::VS__(id__,
										    const_Module_PathPlanningController_stm_ref0_cliff,
										    const_Module_PathPlanningController_stm_ref0_nozzle,
										    const_Module_PathPlanningController_stm_ref0_battery_low,
										    const_Module_PathPlanningController_stm_ref0_sleep_time,
										    const_Module_PathPlanningController_stm_ref0_acc_distance,
										    const_Module_PathPlanningController_stm_ref1_t,
										    const_Module_PathPlanningController_stm_ref2_t,
										    const_Module_PathPlanningController_stm_ref3_t,
										    const_Module_PathPlanningController_stm_ref4_voltage,
										    const_Module_PathPlanningController_stm_ref5_t,
										    const_Module_PathPlanningController_stm_ref5_acc_distance,
										    const_Module_PathPlanningController_stm_ref6_kp,
										    const_Module_PathPlanningController_stm_ref6_ki,
										    const_Module_PathPlanningController_stm_ref6_kd,
										    const_Module_PathPlanningController_stm_ref6_step,
										    const_Module_PathPlanningController_stm_ref7_kp,
										    const_Module_PathPlanningController_stm_ref7_ki,
										    const_Module_PathPlanningController_stm_ref7_kd,
										    const_Module_PathPlanningController_stm_ref7_step,
										    const_Module_PathPlanningController_stm_ref8_step,
										    const_Module_PathPlanningController_stm_ref8_climb_speed,
										    const_Module_PathPlanningController_stm_ref8_descent_speed,
										    const_Module_PathPlanningController_stm_ref8_side_speed,
										    const_Module_PathPlanningController_stm_ref8_forward_angle,
										    const_Module_PathPlanningController_stm_ref8_left_angle,
										    const_Module_PathPlanningController_stm_ref8_right_angle,
										    const_Module_PathPlanningController_stm_ref8_turn_speed,
										    const_Module_PathPlanningController_stm_ref8_movesp,
										    const_Module_PathPlanningController_stm_ref8_stopsp)[[
									PathPlanningController::terminate <- terminate,
									PathPlanningController::acc_l <- acc_l,
									PathPlanningController::acc_r <- acc_r,
									PathPlanningController::battery_level <- battery_level,
									PathPlanningController::charging <- charging,
									PathPlanningController::ultrasonic <- ultrasonic,
									PathPlanningController::output_left_motorCall <- output_left_motorCall,
									PathPlanningController::output_right_motorCall <- output_right_motorCall,
									PathPlanningController::brushCall <- brushCall,
									PathPlanningController::vacuumCall <- vacuumCall
								]]
							)
								[|
									union(
										{|
										|},
										{|
										|}
									)
								|]
							Memory(id__)
						)
					)
					\ Union({
						{|
						|},
						{|
						|},
						{|
						|}
					})							
					[|{|terminate|}|>SKIP
				)\{|terminate|}
			)
			,<visibleMemoryEvents,{tock}>
		)
	}
endmodule




