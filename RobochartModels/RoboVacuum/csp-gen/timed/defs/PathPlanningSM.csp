		module PathPlanningSM
		exports
			-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			external prioritise
			transparent wbisim
			transparent dbisim
			transparent sbisim
		
			Timed(OneStep) {	
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_cycles, set_cycles: core_int
				channel get_u, set_u: core_int
				channel get_d, set_d: core_int
				channel get_b, set_b: core_int
						
				-- shared variable channels
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel move_forward__: TIDS.InOut
				channel move_forward: InOut
				channel turn__: TIDS.InOut.Direction
				channel turn: InOut.Direction
				channel stop__: TIDS.InOut
				channel stop: InOut
				channel ultrasonic__: TIDS.InOut.core_int
				channel ultrasonic: InOut.core_int
				channel battery_level__: TIDS.InOut.core_int
				channel battery_level: InOut.core_int
				channel charging__: TIDS.InOut
				channel charging: InOut
				channel clean__: TIDS.InOut.core_boolean
				channel clean: InOut.core_boolean
				channel displacement__: TIDS.InOut.core_int
				channel displacement: InOut.core_int
				
				-- declaring call and ret events for undefined operations
			
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machien module.
				
				
				-- definition of functions used to expose flow channels
				ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
								   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
								   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
								   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
									 
				ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_PathPlanningSM
				              | SID_PathPlanningSM_Go_up
				              | SID_PathPlanningSM_Go_right
				              | SID_PathPlanningSM_Go_down
				              | SID_PathPlanningSM_Go_right_again
				              | SID_PathPlanningSM_Return
				              | SID_PathPlanningSM_Dock
				              | SID_PathPlanningSM_Sleep
				              | SID_PathPlanningSM_Check_end
				              | SID_PathPlanningSM_Check_battery
				              | SID_PathPlanningSM_Resume
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_PathPlanningSM_t0
				              | TID_PathPlanningSM_t1
				              | TID_PathPlanningSM_t3
				              | TID_PathPlanningSM_t4
				              | TID_PathPlanningSM_t6
				              | TID_PathPlanningSM_t7
				              | TID_PathPlanningSM_t5
				              | TID_PathPlanningSM_t8
				              | TID_PathPlanningSM_t9
				              | TID_PathPlanningSM_t10
				              | TID_PathPlanningSM_t11
				              | TID_PathPlanningSM_t12
				              | TID_PathPlanningSM_t13
				              | TID_PathPlanningSM_t14
				              | TID_PathPlanningSM_t2
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_PathPlanningSM_t1,	TID_PathPlanningSM_t3,	TID_PathPlanningSM_t4,	TID_PathPlanningSM_t6,	TID_PathPlanningSM_t7,	TID_PathPlanningSM_t5,	TID_PathPlanningSM_t8,	TID_PathPlanningSM_t9,	TID_PathPlanningSM_t10,	TID_PathPlanningSM_t11,	TID_PathPlanningSM_t12,	TID_PathPlanningSM_t13,	TID_PathPlanningSM_t14,	TID_PathPlanningSM_t2
				}
				
				int_int = {|
					move_forward__.TID_PathPlanningSM_t1,
					turn__.TID_PathPlanningSM_t1,
					stop__.TID_PathPlanningSM_t1,
					ultrasonic__.TID_PathPlanningSM_t1,
					battery_level__.TID_PathPlanningSM_t1,
					charging__.TID_PathPlanningSM_t1,
					clean__.TID_PathPlanningSM_t1,
					displacement__.TID_PathPlanningSM_t1,
					internal__.TID_PathPlanningSM_t1,
					move_forward__.TID_PathPlanningSM_t3,
					turn__.TID_PathPlanningSM_t3,
					stop__.TID_PathPlanningSM_t3,
					ultrasonic__.TID_PathPlanningSM_t3,
					battery_level__.TID_PathPlanningSM_t3,
					charging__.TID_PathPlanningSM_t3,
					clean__.TID_PathPlanningSM_t3,
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t3,
					move_forward__.TID_PathPlanningSM_t4,
					turn__.TID_PathPlanningSM_t4,
					stop__.TID_PathPlanningSM_t4,
					ultrasonic__.TID_PathPlanningSM_t4,
					battery_level__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t4,
					clean__.TID_PathPlanningSM_t4,
					displacement__.TID_PathPlanningSM_t4,
					internal__.TID_PathPlanningSM_t4,
					move_forward__.TID_PathPlanningSM_t6,
					turn__.TID_PathPlanningSM_t6,
					stop__.TID_PathPlanningSM_t6,
					ultrasonic__.TID_PathPlanningSM_t6,
					battery_level__.TID_PathPlanningSM_t6,
					charging__.TID_PathPlanningSM_t6,
					clean__.TID_PathPlanningSM_t6,
					displacement__.TID_PathPlanningSM_t6,
					internal__.TID_PathPlanningSM_t6,
					move_forward__.TID_PathPlanningSM_t7,
					turn__.TID_PathPlanningSM_t7,
					stop__.TID_PathPlanningSM_t7,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t7,
					charging__.TID_PathPlanningSM_t7,
					clean__.TID_PathPlanningSM_t7,
					displacement__.TID_PathPlanningSM_t7,
					internal__.TID_PathPlanningSM_t7,
					move_forward__.TID_PathPlanningSM_t5,
					turn__.TID_PathPlanningSM_t5,
					stop__.TID_PathPlanningSM_t5,
					ultrasonic__.TID_PathPlanningSM_t5,
					battery_level__.TID_PathPlanningSM_t5,
					charging__.TID_PathPlanningSM_t5,
					clean__.TID_PathPlanningSM_t5,
					displacement__.TID_PathPlanningSM_t5,
					internal__.TID_PathPlanningSM_t5,
					move_forward__.TID_PathPlanningSM_t8,
					turn__.TID_PathPlanningSM_t8,
					stop__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t8,
					battery_level__.TID_PathPlanningSM_t8,
					charging__.TID_PathPlanningSM_t8,
					clean__.TID_PathPlanningSM_t8,
					displacement__.TID_PathPlanningSM_t8,
					internal__.TID_PathPlanningSM_t8,
					move_forward__.TID_PathPlanningSM_t9,
					turn__.TID_PathPlanningSM_t9,
					stop__.TID_PathPlanningSM_t9,
					ultrasonic__.TID_PathPlanningSM_t9,
					battery_level__.TID_PathPlanningSM_t9,
					charging__.TID_PathPlanningSM_t9,
					clean__.TID_PathPlanningSM_t9,
					displacement__.TID_PathPlanningSM_t9,
					internal__.TID_PathPlanningSM_t9,
					move_forward__.TID_PathPlanningSM_t10,
					turn__.TID_PathPlanningSM_t10,
					stop__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t10,
					battery_level__.TID_PathPlanningSM_t10,
					charging__.TID_PathPlanningSM_t10,
					clean__.TID_PathPlanningSM_t10,
					displacement__.TID_PathPlanningSM_t10,
					internal__.TID_PathPlanningSM_t10,
					move_forward__.TID_PathPlanningSM_t11,
					turn__.TID_PathPlanningSM_t11,
					stop__.TID_PathPlanningSM_t11,
					ultrasonic__.TID_PathPlanningSM_t11,
					battery_level__.TID_PathPlanningSM_t11,
					charging__.TID_PathPlanningSM_t11,
					clean__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t11,
					internal__.TID_PathPlanningSM_t11,
					move_forward__.TID_PathPlanningSM_t12,
					turn__.TID_PathPlanningSM_t12,
					stop__.TID_PathPlanningSM_t12,
					ultrasonic__.TID_PathPlanningSM_t12,
					battery_level__.TID_PathPlanningSM_t12,
					charging__.TID_PathPlanningSM_t12,
					clean__.TID_PathPlanningSM_t12,
					displacement__.TID_PathPlanningSM_t12,
					internal__.TID_PathPlanningSM_t12,
					move_forward__.TID_PathPlanningSM_t13,
					turn__.TID_PathPlanningSM_t13,
					stop__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t13,
					battery_level__.TID_PathPlanningSM_t13,
					charging__.TID_PathPlanningSM_t13,
					clean__.TID_PathPlanningSM_t13,
					displacement__.TID_PathPlanningSM_t13,
					internal__.TID_PathPlanningSM_t13,
					move_forward__.TID_PathPlanningSM_t14,
					turn__.TID_PathPlanningSM_t14,
					stop__.TID_PathPlanningSM_t14,
					ultrasonic__.TID_PathPlanningSM_t14,
					battery_level__.TID_PathPlanningSM_t14,
					charging__.TID_PathPlanningSM_t14,
					clean__.TID_PathPlanningSM_t14,
					displacement__.TID_PathPlanningSM_t14,
					internal__.TID_PathPlanningSM_t14,
					move_forward__.TID_PathPlanningSM_t2,
					turn__.TID_PathPlanningSM_t2,
					stop__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t2,
					battery_level__.TID_PathPlanningSM_t2,
					charging__.TID_PathPlanningSM_t2,
					clean__.TID_PathPlanningSM_t2,
					displacement__.TID_PathPlanningSM_t2,
					internal__.TID_PathPlanningSM_t2
				|}
					
				
				internal_events = {|enter,entered,exit,exited|}
				shared_variable_events = {|
				|}
						
				
				-- declaring all states
				CS_PathPlanningSM_Go_up_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
					y____ <- {SID_PathPlanningSM_Go_up}
				|}
				
				
				PathPlanningSM_Go_up_triggers = {|
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t1,
					ultrasonic__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t14,
					displacement__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t12,
					displacement__.TID_PathPlanningSM_t5,
					battery_level__.TID_PathPlanningSM_t9,
					ultrasonic__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t6
				|}
				
				State_PathPlanningSM_Go_up(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t1(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t1.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Go_up.SID_PathPlanningSM_Go_up -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Go_up.SID_PathPlanningSM_Go_up -> SKIP;
										enter!SID_PathPlanningSM_Go_up!SID_PathPlanningSM_Go_right -> entered!SID_PathPlanningSM_Go_up!SID_PathPlanningSM_Go_right ->
										State_PathPlanningSM_Go_up(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					State_PathPlanningSM_Go_up_execute(id__,o____) = true&(move_forward.out -> SKIP); 
						entered!o____!SID_PathPlanningSM_Go_up ->
						(SKIP; STOP /\ (
							T_PathPlanningSM_t1(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
									State_PathPlanningSM_Go_up(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
									State_PathPlanningSM_Go_up(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
									State_PathPlanningSM_Go_up(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
									State_PathPlanningSM_Go_up(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
									State_PathPlanningSM_Go_up(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
									State_PathPlanningSM_Go_up(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
									State_PathPlanningSM_Go_up(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
									State_PathPlanningSM_Go_up(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_up -> SKIP);
									State_PathPlanningSM_Go_up(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
						))
				within
					enter?x____:diff(SIDS,{SID_PathPlanningSM_Go_up})!SID_PathPlanningSM_Go_up -> (State_PathPlanningSM_Go_up_execute(id__,x____))
				
				CS_PathPlanningSM_Go_right_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
					y____ <- {SID_PathPlanningSM_Go_right}
				|}
				
				
				PathPlanningSM_Go_right_triggers = {|
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t1,
					ultrasonic__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t14,
					displacement__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t12,
					displacement__.TID_PathPlanningSM_t5,
					battery_level__.TID_PathPlanningSM_t9,
					ultrasonic__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t6
				|}
				
				State_PathPlanningSM_Go_right(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t3(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = displacement__!TID_PathPlanningSM_t3.in?d -> set_d!d ->  (exit.SID_PathPlanningSM_Go_right.SID_PathPlanningSM_Go_right -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Go_right.SID_PathPlanningSM_Go_right -> SKIP;
										enter!SID_PathPlanningSM_Go_right!SID_PathPlanningSM_Go_down -> entered!SID_PathPlanningSM_Go_right!SID_PathPlanningSM_Go_down ->
										State_PathPlanningSM_Go_right(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					T_PathPlanningSM_t2(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t2.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Go_right.SID_PathPlanningSM_Go_right -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Go_right.SID_PathPlanningSM_Go_right -> SKIP;
										enter!SID_PathPlanningSM_Go_right!SID_PathPlanningSM_Go_down -> entered!SID_PathPlanningSM_Go_right!SID_PathPlanningSM_Go_down ->
										State_PathPlanningSM_Go_right(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					State_PathPlanningSM_Go_right_execute(id__,o____) = true&(turn.out!Direction_right -> SKIP);true&(move_forward.out -> SKIP);true&(displacement.out!0 -> SKIP); 
						entered!o____!SID_PathPlanningSM_Go_right ->
						(SKIP; STOP /\ (
							T_PathPlanningSM_t3(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)[]
							T_PathPlanningSM_t2(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
									State_PathPlanningSM_Go_right(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
									State_PathPlanningSM_Go_right(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
									State_PathPlanningSM_Go_right(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
									State_PathPlanningSM_Go_right(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
									State_PathPlanningSM_Go_right(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
									State_PathPlanningSM_Go_right(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
									State_PathPlanningSM_Go_right(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
									State_PathPlanningSM_Go_right(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right -> SKIP);
									State_PathPlanningSM_Go_right(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
						))
				within
					enter?x____:diff(SIDS,{SID_PathPlanningSM_Go_right})!SID_PathPlanningSM_Go_right -> (State_PathPlanningSM_Go_right_execute(id__,x____))
				
				CS_PathPlanningSM_Go_down_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
					y____ <- {SID_PathPlanningSM_Go_down}
				|}
				
				
				PathPlanningSM_Go_down_triggers = {|
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t1,
					ultrasonic__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t14,
					displacement__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t12,
					displacement__.TID_PathPlanningSM_t5,
					battery_level__.TID_PathPlanningSM_t9,
					ultrasonic__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t6
				|}
				
				State_PathPlanningSM_Go_down(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t4(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t4.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Go_down.SID_PathPlanningSM_Go_down -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Go_down.SID_PathPlanningSM_Go_down -> SKIP;
										true&(turn.out!Direction_left -> SKIP);true&(move_forward.out -> SKIP);true&(displacement.out!0 -> SKIP);enter!SID_PathPlanningSM_Go_down!SID_PathPlanningSM_Go_right_again -> entered!SID_PathPlanningSM_Go_down!SID_PathPlanningSM_Go_right_again ->
										State_PathPlanningSM_Go_down(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					State_PathPlanningSM_Go_down_execute(id__,o____) = true&(turn.out!Direction_right -> SKIP);true&(move_forward.out -> SKIP); 
						entered!o____!SID_PathPlanningSM_Go_down ->
						(SKIP; STOP /\ (
							T_PathPlanningSM_t4(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
									State_PathPlanningSM_Go_down(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
									State_PathPlanningSM_Go_down(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
									State_PathPlanningSM_Go_down(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
									State_PathPlanningSM_Go_down(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
									State_PathPlanningSM_Go_down(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
									State_PathPlanningSM_Go_down(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
									State_PathPlanningSM_Go_down(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
									State_PathPlanningSM_Go_down(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_down -> SKIP);
									State_PathPlanningSM_Go_down(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
						))
				within
					enter?x____:diff(SIDS,{SID_PathPlanningSM_Go_down})!SID_PathPlanningSM_Go_down -> (State_PathPlanningSM_Go_down_execute(id__,x____))
				
				CS_PathPlanningSM_Go_right_again_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
					y____ <- {SID_PathPlanningSM_Go_right_again}
				|}
				
				
				PathPlanningSM_Go_right_again_triggers = {|
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t1,
					ultrasonic__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t14,
					displacement__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t12,
					displacement__.TID_PathPlanningSM_t5,
					battery_level__.TID_PathPlanningSM_t9,
					ultrasonic__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t6
				|}
				
				State_PathPlanningSM_Go_right_again(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t6(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t6.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Go_right_again.SID_PathPlanningSM_Go_right_again -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Go_right_again.SID_PathPlanningSM_Go_right_again -> SKIP;
										enter!SID_PathPlanningSM_Go_right_again!SID_PathPlanningSM_Check_end -> entered!SID_PathPlanningSM_Go_right_again!SID_PathPlanningSM_Check_end ->
										State_PathPlanningSM_Go_right_again(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					T_PathPlanningSM_t7(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t7.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Go_right_again.SID_PathPlanningSM_Go_right_again -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Go_right_again.SID_PathPlanningSM_Go_right_again -> SKIP;
										true & (set_cycles!0 -> SKIP);enter!SID_PathPlanningSM_Go_right_again!SID_PathPlanningSM_Return -> entered!SID_PathPlanningSM_Go_right_again!SID_PathPlanningSM_Return ->
										State_PathPlanningSM_Go_right_again(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					State_PathPlanningSM_Go_right_again_execute(id__,o____) = SKIP; 
						entered!o____!SID_PathPlanningSM_Go_right_again ->
						(SKIP; STOP /\ (
							T_PathPlanningSM_t6(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)[]
							T_PathPlanningSM_t7(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
									State_PathPlanningSM_Go_right_again(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
									State_PathPlanningSM_Go_right_again(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
									State_PathPlanningSM_Go_right_again(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
									State_PathPlanningSM_Go_right_again(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
									State_PathPlanningSM_Go_right_again(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
									State_PathPlanningSM_Go_right_again(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
									State_PathPlanningSM_Go_right_again(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
									State_PathPlanningSM_Go_right_again(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Go_right_again -> SKIP);
									State_PathPlanningSM_Go_right_again(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
						))
				within
					enter?x____:diff(SIDS,{SID_PathPlanningSM_Go_right_again})!SID_PathPlanningSM_Go_right_again -> (State_PathPlanningSM_Go_right_again_execute(id__,x____))
				
				CS_PathPlanningSM_Return_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
					y____ <- {SID_PathPlanningSM_Return}
				|}
				
				
				PathPlanningSM_Return_triggers = {|
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t1,
					ultrasonic__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t14,
					displacement__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t12,
					displacement__.TID_PathPlanningSM_t5,
					battery_level__.TID_PathPlanningSM_t9,
					ultrasonic__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t6
				|}
				
				State_PathPlanningSM_Return(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t11(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = ultrasonic__!TID_PathPlanningSM_t11.in?u -> set_u!u ->  (exit.SID_PathPlanningSM_Return.SID_PathPlanningSM_Return -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Return.SID_PathPlanningSM_Return -> SKIP;
										enter!SID_PathPlanningSM_Return!SID_PathPlanningSM_Dock -> entered!SID_PathPlanningSM_Return!SID_PathPlanningSM_Dock ->
										State_PathPlanningSM_Return(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					State_PathPlanningSM_Return_execute(id__,o____) = true&(turn.out!Direction_left -> SKIP);true&(turn.out!Direction_left -> SKIP);true&(move_forward.out -> SKIP);true&(clean.out!false -> SKIP); 
						entered!o____!SID_PathPlanningSM_Return ->
						(SKIP; STOP /\ (
							T_PathPlanningSM_t11(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Return -> SKIP);
									State_PathPlanningSM_Return(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Return -> SKIP);
									State_PathPlanningSM_Return(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Return -> SKIP);
									State_PathPlanningSM_Return(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Return -> SKIP);
									State_PathPlanningSM_Return(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Return -> SKIP);
									State_PathPlanningSM_Return(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Return -> SKIP);
									State_PathPlanningSM_Return(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Return -> SKIP);
									State_PathPlanningSM_Return(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Return -> SKIP);
									State_PathPlanningSM_Return(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Return -> SKIP);
									State_PathPlanningSM_Return(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
						))
				within
					enter?x____:diff(SIDS,{SID_PathPlanningSM_Return})!SID_PathPlanningSM_Return -> (State_PathPlanningSM_Return_execute(id__,x____))
				
				CS_PathPlanningSM_Dock_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
					y____ <- {SID_PathPlanningSM_Dock}
				|}
				
				
				PathPlanningSM_Dock_triggers = {|
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t1,
					displacement__.TID_PathPlanningSM_t14,
					ultrasonic__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t12,
					displacement__.TID_PathPlanningSM_t5,
					battery_level__.TID_PathPlanningSM_t9,
					ultrasonic__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t6
				|}
				
				State_PathPlanningSM_Dock(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t12(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = charging__!TID_PathPlanningSM_t12.in ->  (exit.SID_PathPlanningSM_Dock.SID_PathPlanningSM_Dock -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Dock.SID_PathPlanningSM_Dock -> SKIP;
										enter!SID_PathPlanningSM_Dock!SID_PathPlanningSM_Sleep -> entered!SID_PathPlanningSM_Dock!SID_PathPlanningSM_Sleep ->
										State_PathPlanningSM_Dock(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					State_PathPlanningSM_Dock_execute(id__,o____) = true&(turn.out!Direction_left -> SKIP);true&(move_forward.out -> SKIP); 
						entered!o____!SID_PathPlanningSM_Dock ->
						(SKIP; STOP /\ (
							T_PathPlanningSM_t12(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Dock -> SKIP);
									State_PathPlanningSM_Dock(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Dock -> SKIP);
									State_PathPlanningSM_Dock(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Dock -> SKIP);
									State_PathPlanningSM_Dock(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Dock -> SKIP);
									State_PathPlanningSM_Dock(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Dock -> SKIP);
									State_PathPlanningSM_Dock(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Dock -> SKIP);
									State_PathPlanningSM_Dock(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Dock -> SKIP);
									State_PathPlanningSM_Dock(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Dock -> SKIP);
									State_PathPlanningSM_Dock(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Dock -> SKIP);
									State_PathPlanningSM_Dock(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
						))
				within
					enter?x____:diff(SIDS,{SID_PathPlanningSM_Dock})!SID_PathPlanningSM_Dock -> (State_PathPlanningSM_Dock_execute(id__,x____))
				
				CS_PathPlanningSM_Sleep_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
					y____ <- {SID_PathPlanningSM_Sleep}
				|}
				
				
				PathPlanningSM_Sleep_triggers = {|
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t1,
					displacement__.TID_PathPlanningSM_t14,
					ultrasonic__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t12,
					displacement__.TID_PathPlanningSM_t5,
					battery_level__.TID_PathPlanningSM_t9,
					ultrasonic__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t6
				|}
				
				State_PathPlanningSM_Sleep(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t13(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = internal__!TID_PathPlanningSM_t13 ->  exit.SID_PathPlanningSM_Sleep.SID_PathPlanningSM_Sleep -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Sleep.SID_PathPlanningSM_Sleep -> SKIP;
										true&(turn.out!Direction_left -> SKIP);true&(turn.out!Direction_left -> SKIP);true&(move_forward.out -> SKIP);enter!SID_PathPlanningSM_Sleep!SID_PathPlanningSM_Resume -> entered!SID_PathPlanningSM_Sleep!SID_PathPlanningSM_Resume ->
										State_PathPlanningSM_Sleep(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					State_PathPlanningSM_Sleep_execute(id__,o____) = true&(stop.out -> SKIP);WAIT(const_PathPlanningSM_sleep_time); 
						entered!o____!SID_PathPlanningSM_Sleep ->
						(SKIP; STOP /\ (
							T_PathPlanningSM_t13(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
									State_PathPlanningSM_Sleep(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
									State_PathPlanningSM_Sleep(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
									State_PathPlanningSM_Sleep(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
									State_PathPlanningSM_Sleep(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
									State_PathPlanningSM_Sleep(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
									State_PathPlanningSM_Sleep(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
									State_PathPlanningSM_Sleep(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
									State_PathPlanningSM_Sleep(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Sleep -> SKIP);
									State_PathPlanningSM_Sleep(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
						))
				within
					enter?x____:diff(SIDS,{SID_PathPlanningSM_Sleep})!SID_PathPlanningSM_Sleep -> (State_PathPlanningSM_Sleep_execute(id__,x____))
				
				CS_PathPlanningSM_Check_end_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
					y____ <- {SID_PathPlanningSM_Check_end}
				|}
				
				
				PathPlanningSM_Check_end_triggers = {|
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t1,
					ultrasonic__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t14,
					displacement__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t12,
					displacement__.TID_PathPlanningSM_t5,
					battery_level__.TID_PathPlanningSM_t9,
					ultrasonic__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t6
				|}
				
				State_PathPlanningSM_Check_end(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t5(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = displacement__!TID_PathPlanningSM_t5.in?d -> set_d!d ->  (exit.SID_PathPlanningSM_Check_end.SID_PathPlanningSM_Check_end -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Check_end.SID_PathPlanningSM_Check_end -> SKIP;
										enter!SID_PathPlanningSM_Check_end!SID_PathPlanningSM_Go_right_again -> entered!SID_PathPlanningSM_Check_end!SID_PathPlanningSM_Go_right_again ->
										State_PathPlanningSM_Check_end(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					T_PathPlanningSM_t8(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = displacement__!TID_PathPlanningSM_t8.in?d -> set_d!d ->  (exit.SID_PathPlanningSM_Check_end.SID_PathPlanningSM_Check_end -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Check_end.SID_PathPlanningSM_Check_end -> SKIP;
										get_cycles?cycles -> true & (set_cycles!Plus(cycles, 1, core_int) -> SKIP);enter!SID_PathPlanningSM_Check_end!SID_PathPlanningSM_Check_battery -> entered!SID_PathPlanningSM_Check_end!SID_PathPlanningSM_Check_battery ->
										State_PathPlanningSM_Check_end(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					State_PathPlanningSM_Check_end_execute(id__,o____) = SKIP; 
						entered!o____!SID_PathPlanningSM_Check_end ->
						(SKIP; STOP /\ (
							T_PathPlanningSM_t5(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)[]
							T_PathPlanningSM_t8(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
									State_PathPlanningSM_Check_end(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
									State_PathPlanningSM_Check_end(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
									State_PathPlanningSM_Check_end(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
									State_PathPlanningSM_Check_end(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
									State_PathPlanningSM_Check_end(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
									State_PathPlanningSM_Check_end(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
									State_PathPlanningSM_Check_end(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
									State_PathPlanningSM_Check_end(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_end -> SKIP);
									State_PathPlanningSM_Check_end(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
						))
				within
					enter?x____:diff(SIDS,{SID_PathPlanningSM_Check_end})!SID_PathPlanningSM_Check_end -> (State_PathPlanningSM_Check_end_execute(id__,x____))
				
				CS_PathPlanningSM_Check_battery_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
					y____ <- {SID_PathPlanningSM_Check_battery}
				|}
				
				
				PathPlanningSM_Check_battery_triggers = {|
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t1,
					ultrasonic__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t14,
					displacement__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t12,
					battery_level__.TID_PathPlanningSM_t9,
					displacement__.TID_PathPlanningSM_t5,
					ultrasonic__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t6
				|}
				
				State_PathPlanningSM_Check_battery(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t9(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = battery_level__!TID_PathPlanningSM_t9.in?b -> set_b!b ->  (exit.SID_PathPlanningSM_Check_battery.SID_PathPlanningSM_Check_battery -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Check_battery.SID_PathPlanningSM_Check_battery -> SKIP;
										true&(turn.out!Direction_left -> SKIP);enter!SID_PathPlanningSM_Check_battery!SID_PathPlanningSM_Go_up -> entered!SID_PathPlanningSM_Check_battery!SID_PathPlanningSM_Go_up ->
										State_PathPlanningSM_Check_battery(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					T_PathPlanningSM_t10(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = battery_level__!TID_PathPlanningSM_t10.in?b -> set_b!b ->  (exit.SID_PathPlanningSM_Check_battery.SID_PathPlanningSM_Check_battery -> SKIP;
										SKIP;exited.SID_PathPlanningSM_Check_battery.SID_PathPlanningSM_Check_battery -> SKIP;
										enter!SID_PathPlanningSM_Check_battery!SID_PathPlanningSM_Return -> entered!SID_PathPlanningSM_Check_battery!SID_PathPlanningSM_Return ->
										State_PathPlanningSM_Check_battery(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					State_PathPlanningSM_Check_battery_execute(id__,o____) = SKIP; 
						entered!o____!SID_PathPlanningSM_Check_battery ->
						(SKIP; STOP /\ (
							T_PathPlanningSM_t9(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)[]
							T_PathPlanningSM_t10(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
									State_PathPlanningSM_Check_battery(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
									State_PathPlanningSM_Check_battery(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
									State_PathPlanningSM_Check_battery(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
									State_PathPlanningSM_Check_battery(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
									State_PathPlanningSM_Check_battery(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
									State_PathPlanningSM_Check_battery(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
									State_PathPlanningSM_Check_battery(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
									State_PathPlanningSM_Check_battery(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t11,TID_PathPlanningSM_t14,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t9,TID_PathPlanningSM_t5,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (
									SKIP;
									exited!y____!SID_PathPlanningSM_Check_battery -> SKIP);
									State_PathPlanningSM_Check_battery(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
						))
				within
					enter?x____:diff(SIDS,{SID_PathPlanningSM_Check_battery})!SID_PathPlanningSM_Check_battery -> (State_PathPlanningSM_Check_battery_execute(id__,x____))
				
				CS_PathPlanningSM_Resume_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume},
					y____ <- {SID_PathPlanningSM_Resume}
				|}
				
				
				PathPlanningSM_Resume_triggers = {|
					displacement__.TID_PathPlanningSM_t3,
					internal__.TID_PathPlanningSM_t13,
					ultrasonic__.TID_PathPlanningSM_t1,
					displacement__.TID_PathPlanningSM_t14,
					ultrasonic__.TID_PathPlanningSM_t11,
					displacement__.TID_PathPlanningSM_t8,
					ultrasonic__.TID_PathPlanningSM_t7,
					battery_level__.TID_PathPlanningSM_t10,
					ultrasonic__.TID_PathPlanningSM_t4,
					charging__.TID_PathPlanningSM_t12,
					displacement__.TID_PathPlanningSM_t5,
					battery_level__.TID_PathPlanningSM_t9,
					ultrasonic__.TID_PathPlanningSM_t2,
					ultrasonic__.TID_PathPlanningSM_t6
				|}
				
				State_PathPlanningSM_Resume(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t14(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = displacement__!TID_PathPlanningSM_t14.in?d -> set_d!d ->  (exit.SID_PathPlanningSM_Resume.SID_PathPlanningSM_Resume -> SKIP;
										true&(turn.out!Direction_left -> SKIP);exited.SID_PathPlanningSM_Resume.SID_PathPlanningSM_Resume -> SKIP;
										true&(clean.out!true -> SKIP);enter!SID_PathPlanningSM_Resume!SID_PathPlanningSM_Go_up -> entered!SID_PathPlanningSM_Resume!SID_PathPlanningSM_Go_up ->
										State_PathPlanningSM_Resume(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
					)
					State_PathPlanningSM_Resume_execute(id__,o____) = true&(turn.out!Direction_right -> SKIP);true&(move_forward.out -> SKIP);true&(displacement.out!0 -> SKIP); 
						entered!o____!SID_PathPlanningSM_Resume ->
						(SKIP; STOP /\ (
							T_PathPlanningSM_t14(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6}) -> exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
									true&(turn.out!Direction_left -> SKIP);
									exited!y____!SID_PathPlanningSM_Resume -> SKIP);
									State_PathPlanningSM_Resume(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] move_forward__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
									true&(turn.out!Direction_left -> SKIP);
									exited!y____!SID_PathPlanningSM_Resume -> SKIP);
									State_PathPlanningSM_Resume(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
									true&(turn.out!Direction_left -> SKIP);
									exited!y____!SID_PathPlanningSM_Resume -> SKIP);
									State_PathPlanningSM_Resume(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] stop__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
									true&(turn.out!Direction_left -> SKIP);
									exited!y____!SID_PathPlanningSM_Resume -> SKIP);
									State_PathPlanningSM_Resume(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] ultrasonic__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
									true&(turn.out!Direction_left -> SKIP);
									exited!y____!SID_PathPlanningSM_Resume -> SKIP);
									State_PathPlanningSM_Resume(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] battery_level__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
									true&(turn.out!Direction_left -> SKIP);
									exited!y____!SID_PathPlanningSM_Resume -> SKIP);
									State_PathPlanningSM_Resume(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] charging__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
									true&(turn.out!Direction_left -> SKIP);
									exited!y____!SID_PathPlanningSM_Resume -> SKIP);
									State_PathPlanningSM_Resume(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
									true&(turn.out!Direction_left -> SKIP);
									exited!y____!SID_PathPlanningSM_Resume -> SKIP);
									State_PathPlanningSM_Resume(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
							[] displacement__?x____:diff(ITIDS,{NULLTRANSITION__,TID_PathPlanningSM_t3,TID_PathPlanningSM_t13,TID_PathPlanningSM_t1,TID_PathPlanningSM_t14,TID_PathPlanningSM_t11,TID_PathPlanningSM_t8,TID_PathPlanningSM_t7,TID_PathPlanningSM_t10,TID_PathPlanningSM_t4,TID_PathPlanningSM_t12,TID_PathPlanningSM_t5,TID_PathPlanningSM_t9,TID_PathPlanningSM_t2,TID_PathPlanningSM_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (
									true&(turn.out!Direction_left -> SKIP);
									exited!y____!SID_PathPlanningSM_Resume -> SKIP);
									State_PathPlanningSM_Resume(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
						))
				within
					enter?x____:diff(SIDS,{SID_PathPlanningSM_Resume})!SID_PathPlanningSM_Resume -> (State_PathPlanningSM_Resume_execute(id__,x____))
				
				
				I_PathPlanningSM_i0(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = let
					T_PathPlanningSM_t0(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance) = internal__!TID_PathPlanningSM_t0 -> true & (set_cycles!0 -> SKIP);enter!SID_PathPlanningSM!SID_PathPlanningSM_Resume -> entered!SID_PathPlanningSM!SID_PathPlanningSM_Resume ->
					SKIP
				within
					T_PathPlanningSM_t0(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
				
				
				State_PathPlanningSM_Go_up_R(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					State_PathPlanningSM_Go_up(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|diff(int_int,PathPlanningSM_Go_up_triggers)|]
					SKIP
						 		
				State_PathPlanningSM_Go_right_R(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					State_PathPlanningSM_Go_right(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|diff(int_int,PathPlanningSM_Go_right_triggers)|]
					SKIP
						 		
				State_PathPlanningSM_Go_down_R(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					State_PathPlanningSM_Go_down(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|diff(int_int,PathPlanningSM_Go_down_triggers)|]
					SKIP
						 		
				State_PathPlanningSM_Go_right_again_R(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					State_PathPlanningSM_Go_right_again(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|diff(int_int,PathPlanningSM_Go_right_again_triggers)|]
					SKIP
						 		
				State_PathPlanningSM_Return_R(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					State_PathPlanningSM_Return(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|diff(int_int,PathPlanningSM_Return_triggers)|]
					SKIP
						 		
				State_PathPlanningSM_Dock_R(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					State_PathPlanningSM_Dock(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|diff(int_int,PathPlanningSM_Dock_triggers)|]
					SKIP
						 		
				State_PathPlanningSM_Sleep_R(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					State_PathPlanningSM_Sleep(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|diff(int_int,PathPlanningSM_Sleep_triggers)|]
					SKIP
						 		
				State_PathPlanningSM_Check_end_R(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					State_PathPlanningSM_Check_end(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|diff(int_int,PathPlanningSM_Check_end_triggers)|]
					SKIP
						 		
				State_PathPlanningSM_Check_battery_R(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					State_PathPlanningSM_Check_battery(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|diff(int_int,PathPlanningSM_Check_battery_triggers)|]
					SKIP
						 		
				State_PathPlanningSM_Resume_R(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					State_PathPlanningSM_Resume(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|diff(int_int,PathPlanningSM_Resume_triggers)|]
					SKIP
						 		
					
				STM(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = (
					I_PathPlanningSM_i0(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume}),
								y____ <- {SID_PathPlanningSM_Go_up,SID_PathPlanningSM_Go_right,SID_PathPlanningSM_Go_down,SID_PathPlanningSM_Go_right_again,SID_PathPlanningSM_Return,SID_PathPlanningSM_Dock,SID_PathPlanningSM_Sleep,SID_PathPlanningSM_Check_end,SID_PathPlanningSM_Check_battery,SID_PathPlanningSM_Resume}
						|}|]
					(
						State_PathPlanningSM_Go_up_R(id__,
								    const_PathPlanningSM_cliff,
								    const_PathPlanningSM_nozzle,
								    const_PathPlanningSM_battery_low,
								    const_PathPlanningSM_sleep_time,
								    const_PathPlanningSM_acc_distance)
							[|inter(CS_PathPlanningSM_Go_up_sync,union(union(union(union(union(union(union(union(CS_PathPlanningSM_Go_right_sync,CS_PathPlanningSM_Go_down_sync),CS_PathPlanningSM_Go_right_again_sync),CS_PathPlanningSM_Return_sync),CS_PathPlanningSM_Dock_sync),CS_PathPlanningSM_Sleep_sync),CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
						(
							State_PathPlanningSM_Go_right_R(id__,
									    const_PathPlanningSM_cliff,
									    const_PathPlanningSM_nozzle,
									    const_PathPlanningSM_battery_low,
									    const_PathPlanningSM_sleep_time,
									    const_PathPlanningSM_acc_distance)
								[|inter(CS_PathPlanningSM_Go_right_sync,union(union(union(union(union(union(union(CS_PathPlanningSM_Go_down_sync,CS_PathPlanningSM_Go_right_again_sync),CS_PathPlanningSM_Return_sync),CS_PathPlanningSM_Dock_sync),CS_PathPlanningSM_Sleep_sync),CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
							(
								State_PathPlanningSM_Go_down_R(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
									[|inter(CS_PathPlanningSM_Go_down_sync,union(union(union(union(union(union(CS_PathPlanningSM_Go_right_again_sync,CS_PathPlanningSM_Return_sync),CS_PathPlanningSM_Dock_sync),CS_PathPlanningSM_Sleep_sync),CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
								(
									State_PathPlanningSM_Go_right_again_R(id__,
											    const_PathPlanningSM_cliff,
											    const_PathPlanningSM_nozzle,
											    const_PathPlanningSM_battery_low,
											    const_PathPlanningSM_sleep_time,
											    const_PathPlanningSM_acc_distance)
										[|inter(CS_PathPlanningSM_Go_right_again_sync,union(union(union(union(union(CS_PathPlanningSM_Return_sync,CS_PathPlanningSM_Dock_sync),CS_PathPlanningSM_Sleep_sync),CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
									(
										State_PathPlanningSM_Return_R(id__,
												    const_PathPlanningSM_cliff,
												    const_PathPlanningSM_nozzle,
												    const_PathPlanningSM_battery_low,
												    const_PathPlanningSM_sleep_time,
												    const_PathPlanningSM_acc_distance)
											[|inter(CS_PathPlanningSM_Return_sync,union(union(union(union(CS_PathPlanningSM_Dock_sync,CS_PathPlanningSM_Sleep_sync),CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
										(
											State_PathPlanningSM_Dock_R(id__,
													    const_PathPlanningSM_cliff,
													    const_PathPlanningSM_nozzle,
													    const_PathPlanningSM_battery_low,
													    const_PathPlanningSM_sleep_time,
													    const_PathPlanningSM_acc_distance)
												[|inter(CS_PathPlanningSM_Dock_sync,union(union(union(CS_PathPlanningSM_Sleep_sync,CS_PathPlanningSM_Check_end_sync),CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
											(
												State_PathPlanningSM_Sleep_R(id__,
														    const_PathPlanningSM_cliff,
														    const_PathPlanningSM_nozzle,
														    const_PathPlanningSM_battery_low,
														    const_PathPlanningSM_sleep_time,
														    const_PathPlanningSM_acc_distance)
													[|inter(CS_PathPlanningSM_Sleep_sync,union(union(CS_PathPlanningSM_Check_end_sync,CS_PathPlanningSM_Check_battery_sync),CS_PathPlanningSM_Resume_sync))|]
												(
													State_PathPlanningSM_Check_end_R(id__,
															    const_PathPlanningSM_cliff,
															    const_PathPlanningSM_nozzle,
															    const_PathPlanningSM_battery_low,
															    const_PathPlanningSM_sleep_time,
															    const_PathPlanningSM_acc_distance)
														[|inter(CS_PathPlanningSM_Check_end_sync,union(CS_PathPlanningSM_Check_battery_sync,CS_PathPlanningSM_Resume_sync))|]
													(
														State_PathPlanningSM_Check_battery_R(id__,
																    const_PathPlanningSM_cliff,
																    const_PathPlanningSM_nozzle,
																    const_PathPlanningSM_battery_low,
																    const_PathPlanningSM_sleep_time,
																    const_PathPlanningSM_acc_distance)
															[|inter(CS_PathPlanningSM_Check_battery_sync,CS_PathPlanningSM_Resume_sync)|]
														State_PathPlanningSM_Resume_R(id__,
																    const_PathPlanningSM_cliff,
																    const_PathPlanningSM_nozzle,
																    const_PathPlanningSM_battery_low,
																    const_PathPlanningSM_sleep_time,
																    const_PathPlanningSM_acc_distance)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
				
				-- optimized memory process
				channel getV_cycles: core_int
				channel getV_u: core_int
				channel getV_d: core_int
				channel getV_b: core_int
				
				-- individual memory processes
				Memory_cycles(x__) = ( 
					get_cycles!x__ -> Memory_cycles(x__)
					[]
					getV_cycles!x__ -> Memory_cycles(x__)
					[]
					set_cycles?x__ -> Memory_cycles(x__)
				)
				Memory_u(x__) = ( 
					get_u!x__ -> Memory_u(x__)
					[]
					getV_u!x__ -> Memory_u(x__)
					[]
					set_u?x__ -> Memory_u(x__)
					[]
					ultrasonic__!TID_PathPlanningSM_t1.in?u -> Memory_u(u)
					[]
					ultrasonic__!TID_PathPlanningSM_t4.in?u -> Memory_u(u)
					[]
					ultrasonic__!TID_PathPlanningSM_t6.in?u -> Memory_u(u)
					[]
					ultrasonic__!TID_PathPlanningSM_t7.in?u -> Memory_u(u)
					[]
					ultrasonic__!TID_PathPlanningSM_t11.in?u -> Memory_u(u)
					[]
					ultrasonic__!TID_PathPlanningSM_t2.in?u -> Memory_u(u)
				)
				Memory_d(x__) = ( 
					get_d!x__ -> Memory_d(x__)
					[]
					getV_d!x__ -> Memory_d(x__)
					[]
					set_d?x__ -> Memory_d(x__)
					[]
					displacement__!TID_PathPlanningSM_t3.in?d -> Memory_d(d)
					[]
					displacement__!TID_PathPlanningSM_t5.in?d -> Memory_d(d)
					[]
					displacement__!TID_PathPlanningSM_t8.in?d -> Memory_d(d)
					[]
					displacement__!TID_PathPlanningSM_t14.in?d -> Memory_d(d)
				)
				Memory_b(x__) = ( 
					get_b!x__ -> Memory_b(x__)
					[]
					getV_b!x__ -> Memory_b(x__)
					[]
					set_b?x__ -> Memory_b(x__)
					[]
					battery_level__!TID_PathPlanningSM_t9.in?b -> Memory_b(b)
					[]
					battery_level__!TID_PathPlanningSM_t10.in?b -> Memory_b(b)
				)
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 cycles,
					 u,
					 d,
					 b,
					 const_PathPlanningSM_cliff,
					 const_PathPlanningSM_nozzle,
					 const_PathPlanningSM_battery_low,
					 const_PathPlanningSM_sleep_time,
					 const_PathPlanningSM_acc_distance) = (
					internal__!TID_PathPlanningSM_t0 -> SKIP
					[]
					ultrasonic__!TID_PathPlanningSM_t1.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> SKIP
					[]
					displacement__!TID_PathPlanningSM_t3.in?d:{d|d <- core_int, (d>=const_PathPlanningSM_nozzle)} -> SKIP
					[]
					ultrasonic__!TID_PathPlanningSM_t4.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> SKIP
					[]
					ultrasonic__!TID_PathPlanningSM_t6.in?u:{u|u <- core_int, (u<const_PathPlanningSM_cliff)} -> SKIP
					[]
					ultrasonic__!TID_PathPlanningSM_t7.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> SKIP
					[]
					displacement__!TID_PathPlanningSM_t5.in?d:{d|d <- core_int, (d<const_PathPlanningSM_nozzle)} -> SKIP
					[]
					displacement__!TID_PathPlanningSM_t8.in?d:{d|d <- core_int, (d>=const_PathPlanningSM_nozzle)} -> SKIP
					[]
					battery_level__!TID_PathPlanningSM_t9.in?b:{b|b <- core_int, (b>const_PathPlanningSM_battery_low)} -> SKIP
					[]
					battery_level__!TID_PathPlanningSM_t10.in?b:{b|b <- core_int, (b<=const_PathPlanningSM_battery_low)} -> SKIP
					[]
					ultrasonic__!TID_PathPlanningSM_t11.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> SKIP
					[]
					charging__!TID_PathPlanningSM_t12.in -> SKIP
					[]
					internal__!TID_PathPlanningSM_t13 -> SKIP
					[]
					displacement__!TID_PathPlanningSM_t14.in?d:{d|d <- core_int, (d>=Mult(Mult(cycles, 2, core_int), const_PathPlanningSM_nozzle, core_int))} -> SKIP
					[]
					ultrasonic__!TID_PathPlanningSM_t2.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> SKIP
				
					[]
						set_cycles?x__ -> SKIP
					[]
					set_u?x__ -> SKIP
					[]
					set_d?x__ -> SKIP
					[]
					set_b?x__ -> SKIP
				 	)
				MemoryTransitions_PathPlanningSM(id__,
					 const_PathPlanningSM_cliff,
					 const_PathPlanningSM_nozzle,
					 const_PathPlanningSM_battery_low,
					 const_PathPlanningSM_sleep_time,
					 const_PathPlanningSM_acc_distance) =
					(
					getV_cycles?cycles ->	
					getV_u?u ->	
					getV_d?d ->	
					getV_b?b ->
					 MemoryTransitions(id__,
					 	 cycles,
					 	 u,
					 	 d,
					 	 b,
					 	 const_PathPlanningSM_cliff,
					 	 const_PathPlanningSM_nozzle,
					 	 const_PathPlanningSM_battery_low,
					 	 const_PathPlanningSM_sleep_time,
					 	 const_PathPlanningSM_acc_distance);
					 MemoryTransitions_PathPlanningSM(id__,
					 	 const_PathPlanningSM_cliff,
					 	 const_PathPlanningSM_nozzle,
					 	 const_PathPlanningSM_battery_low,
					 	 const_PathPlanningSM_sleep_time,
					 	 const_PathPlanningSM_acc_distance)
					)
				
				-- synchronisation, hiding and process sets 
				MemoryVariablesProcesses_PathPlanningSM = Union(
					{
						{
							Memory_cycles(0),
							Memory_u(0),
							Memory_d(0),
							Memory_b(0)
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						set_b,
						ultrasonic__.TID_PathPlanningSM_t7,
						set_d,
						displacement__.TID_PathPlanningSM_t5,
						displacement__.TID_PathPlanningSM_t3,
						ultrasonic__.TID_PathPlanningSM_t1,
						ultrasonic__.TID_PathPlanningSM_t2,
						setWC,
						getV_b,
						ultrasonic__.TID_PathPlanningSM_t11,
						ultrasonic__.TID_PathPlanningSM_t6,
						getV_d,
						ultrasonic__.TID_PathPlanningSM_t4,
						getV_cycles,
						battery_level__.TID_PathPlanningSM_t9,
						battery_level__.TID_PathPlanningSM_t10,
						set_cycles,
						set_u,
						displacement__.TID_PathPlanningSM_t14,
						getV_u,
						displacement__.TID_PathPlanningSM_t8
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getV_cycles,
						getWC,
						getV_b,
						getV_d,
						getV_u
					|}
				})
				
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_PathPlanningSM @ P
				
				-- complete memory process
				MemoryN(id__,
					 const_PathPlanningSM_cliff,
					 const_PathPlanningSM_nozzle,
					 const_PathPlanningSM_battery_low,
					 const_PathPlanningSM_sleep_time,
					 const_PathPlanningSM_acc_distance) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_PathPlanningSM(id__,
					 const_PathPlanningSM_cliff,
					 const_PathPlanningSM_nozzle,
					 const_PathPlanningSM_battery_low,
					 const_PathPlanningSM_sleep_time,
					 const_PathPlanningSM_acc_distance)) \ MemoryVariablesHideSet
				
				-- optimised memory
				-- Sets of named elements identified according to transition conditions:
				-- {}
				-- {cliff}
				-- {battery_low}
				-- {cycles,nozzle}
				-- Summary of all identified named elements:
				-- {
				-- b
				-- cliff
				-- battery_low
				-- u
				-- cycles
				-- d
				-- nozzle
				-- }
				
				-- Allocation plan:
				-- 0:{}
				--	=> {
				--		TID_PathPlanningSM_t12,
				--		TID_PathPlanningSM_t13,
				--		TID_PathPlanningSM_t0}
				-- 1:{cliff}
				--	=> {
				--		TID_PathPlanningSM_t6,
				--		TID_PathPlanningSM_t1,
				--		TID_PathPlanningSM_t4,
				--		TID_PathPlanningSM_t7,
				--		TID_PathPlanningSM_t11,
				--		TID_PathPlanningSM_t2}
				-- 2:{battery_low}
				--	=> {
				--		TID_PathPlanningSM_t9,
				--		TID_PathPlanningSM_t10}
				-- 3:{cycles,nozzle}
				--	=> {
				--		TID_PathPlanningSM_t8,
				--		TID_PathPlanningSM_t14,
				--		TID_PathPlanningSM_t5,
				--		TID_PathPlanningSM_t3}
				
				-- Memory transition processes
				MemoryTransitions_opt_0(id__) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   charging__!TID_PathPlanningSM_t12.in -> Update
						 	   []
						 	   internal__!TID_PathPlanningSM_t13 -> Update
						 	   []
						 	   internal__!TID_PathPlanningSM_t0 -> Update
					within
						Update
				)
				MemoryTransitions_opt_1(id__,
					 const_PathPlanningSM_cliff) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   ultrasonic__!TID_PathPlanningSM_t6.in?u:{u|u <- core_int, (u<const_PathPlanningSM_cliff)} -> Update
						 	   []
						 	   ultrasonic__!TID_PathPlanningSM_t1.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> Update
						 	   []
						 	   ultrasonic__!TID_PathPlanningSM_t4.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> Update
						 	   []
						 	   ultrasonic__!TID_PathPlanningSM_t7.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> Update
						 	   []
						 	   ultrasonic__!TID_PathPlanningSM_t11.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> Update
						 	   []
						 	   ultrasonic__!TID_PathPlanningSM_t2.in?u:{u|u <- core_int, (u>=const_PathPlanningSM_cliff)} -> Update
					within
						Update
				)
				MemoryTransitions_opt_2(id__,
					 const_PathPlanningSM_battery_low) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   battery_level__!TID_PathPlanningSM_t9.in?b:{b|b <- core_int, (b>const_PathPlanningSM_battery_low)} -> Update
						 	   []
						 	   battery_level__!TID_PathPlanningSM_t10.in?b:{b|b <- core_int, (b<=const_PathPlanningSM_battery_low)} -> Update
					within
						Update
				)
				MemoryTransitions_opt_3(id__,
					 const_PathPlanningSM_nozzle) =
				(
					let
						Update = 
						get_cycles?cycles ->
						Current(id__,
							 cycles)
						Current(id__,
							 cycles)
						 	   = 
						 	   displacement__!TID_PathPlanningSM_t8.in?d:{d|d <- core_int, (d>=const_PathPlanningSM_nozzle)} -> Update
						 	   []
						 	   displacement__!TID_PathPlanningSM_t14.in?d:{d|d <- core_int, (d>=Mult(Mult(cycles, 2, core_int), const_PathPlanningSM_nozzle, core_int))} -> Update
						 	   []
						 	   displacement__!TID_PathPlanningSM_t5.in?d:{d|d <- core_int, (d<const_PathPlanningSM_nozzle)} -> Update
						 	   []
						 	   displacement__!TID_PathPlanningSM_t3.in?d:{d|d <- core_int, (d>=const_PathPlanningSM_nozzle)} -> Update
						 	   	 
						 	   	 []
						 	   	 set_cycles?x__ -> Update
					within
						Update
				)
				
				-- Memory cell processes
				Memory_opt_b(x__) = ( 
					get_b!x__ -> Memory_opt_b(x__)
					[]
					set_b?x__ -> Memory_opt_b(x__)
				)
				Memory_opt_u(x__) = ( 
					get_u!x__ -> Memory_opt_u(x__)
					[]
					set_u?x__ -> Memory_opt_u(x__)
				)
				Memory_opt_cycles(x__) = ( 
					get_cycles!x__ -> Memory_opt_cycles(x__)
					[]
					set_cycles?x__ -> Memory_opt_cycles(x__)
				)
				Memory_opt_d(x__) = ( 
					get_d!x__ -> Memory_opt_d(x__)
					[]
					set_d?x__ -> Memory_opt_d(x__)
				)
				
				-- Composition of memory, StateMachine and Memory transition processes
				
				MemorySTM_opt(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) =
					sbisim(	
					  dbisim(
					    sbisim(sbisim(	
					      dbisim(
					        sbisim(dbisim(
					          sbisim(Memory_opt_cycles(0)
					              	[| {|set_cycles,get_cycles|} |] 
					              	sbisim(	
					              	  dbisim(
					              	    sbisim(sbisim(	
					              	      dbisim(
					              	        sbisim(dbisim(sbisim(Memory_opt_b(0)
					              	              	[| {|set_b,get_b|} |] 
					              	              	dbisim(sbisim(Memory_opt_u(0)
					              	              	      	[| {|get_u,set_u|} |] 
					              	              	      	dbisim(sbisim(Memory_opt_d(0)
					              	              	      	      	[| {|get_d,set_d|} |] 
					              	              	      	      	STM_core(id__,
					              	              	      	      			    const_PathPlanningSM_cliff,
					              	              	      	      			    const_PathPlanningSM_nozzle,
					              	              	      	      			    const_PathPlanningSM_battery_low,
					              	              	      	      			    const_PathPlanningSM_sleep_time,
					              	              	      	      			    const_PathPlanningSM_acc_distance)
					              	              	      	      	)\ {|get_d,set_d|}
					              	              	      	      )
					              	              	      	)\ {|get_u,set_u|}
					              	              	      )
					              	              	)\ {|set_b,get_b|}
					              	              )
					              	          	  [| {|internal__.TID_PathPlanningSM_t13,internal__.TID_PathPlanningSM_t0,charging__.TID_PathPlanningSM_t12|} |]
					              	          	  MemoryTransitions_opt_0(id__)
					              	          	  )\{||})
					              	          )
					              	      	  [| {|displacement__.TID_PathPlanningSM_t5,displacement__.TID_PathPlanningSM_t3,set_cycles,displacement__.TID_PathPlanningSM_t14,displacement__.TID_PathPlanningSM_t8|} |]
					              	      	  MemoryTransitions_opt_3(id__,
					              	      	  	 const_PathPlanningSM_nozzle)
					              	      	  )\{||})
					              	      )
					              	) \ {|set_cycles,get_cycles|}
					              )
					          	  [| {|battery_level__.TID_PathPlanningSM_t9,battery_level__.TID_PathPlanningSM_t10|} |]
					          	  MemoryTransitions_opt_2(id__,
					          	  	 const_PathPlanningSM_battery_low)
					          	  )\{||})
					          )
					      	  [| {|ultrasonic__.TID_PathPlanningSM_t7,ultrasonic__.TID_PathPlanningSM_t1,ultrasonic__.TID_PathPlanningSM_t2,ultrasonic__.TID_PathPlanningSM_t11,ultrasonic__.TID_PathPlanningSM_t6,ultrasonic__.TID_PathPlanningSM_t4|} |]
					      	  MemoryTransitions_opt_1(id__,
					      	  	 const_PathPlanningSM_cliff)
					      	  )\{||})
					      )
				
				-- main process
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_cycles,set_cycles,
							get_u,set_u,
							get_d,set_d,
							get_b,set_b|},
							{||}
						)
							
						,
						{|internal__.TID_PathPlanningSM_t0,
						ultrasonic__.TID_PathPlanningSM_t1,
						displacement__.TID_PathPlanningSM_t3,
						ultrasonic__.TID_PathPlanningSM_t4,
						ultrasonic__.TID_PathPlanningSM_t6,
						ultrasonic__.TID_PathPlanningSM_t7,
						displacement__.TID_PathPlanningSM_t5,
						displacement__.TID_PathPlanningSM_t8,
						battery_level__.TID_PathPlanningSM_t9,
						battery_level__.TID_PathPlanningSM_t10,
						ultrasonic__.TID_PathPlanningSM_t11,
						charging__.TID_PathPlanningSM_t12,
						internal__.TID_PathPlanningSM_t13,
						displacement__.TID_PathPlanningSM_t14,
						ultrasonic__.TID_PathPlanningSM_t2|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_cycles,set_cycles,
						get_u,set_u,
						get_d,set_d,
						get_b,set_b|},
						{||}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
			
				-- main process
				AUX(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = prioritise((((
					wbisim(STM(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance))
						[|MachineMemorySyncSet|]
					(
						(MemoryN(id__,
							 const_PathPlanningSM_cliff,
							 const_PathPlanningSM_nozzle,
							 const_PathPlanningSM_battery_low,
							 const_PathPlanningSM_sleep_time,
							 const_PathPlanningSM_acc_distance))
							[| union(WCsets,WCsync) |]
						Clocks(id__,
								    const_PathPlanningSM_cliff,
								    const_PathPlanningSM_nozzle,
								    const_PathPlanningSM_battery_low,
								    const_PathPlanningSM_sleep_time,
								    const_PathPlanningSM_acc_distance)
					)\WCsets
				)
				[[
					move_forward__.x____ <- move_forward,
					turn__.x____ <- turn,
					stop__.x____ <- stop,
					ultrasonic__.x____ <- ultrasonic,
					battery_level__.x____ <- battery_level,
					charging__.x____ <- charging,
					clean__.x____ <- clean,
					displacement__.x____ <- displacement
					| x____ <- TIDS
				]]
				\MachineMemoryHidingSet)
				[|{|terminate|}|>SKIP\MachineInternalEvents)
				,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
				
				STM_core(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					dbisim(
						sbisim(
								(STM(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance)
								[| union(WCsync,WCresets) |]
								Clocks(id__,
										    const_PathPlanningSM_cliff,
										    const_PathPlanningSM_nozzle,
										    const_PathPlanningSM_battery_low,
										    const_PathPlanningSM_sleep_time,
										    const_PathPlanningSM_acc_distance))\WCresets
							  )
						  )
				
				AUX_opt(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = 
					prioritise(
						(MemorySTM_opt(id__,
								    const_PathPlanningSM_cliff,
								    const_PathPlanningSM_nozzle,
								    const_PathPlanningSM_battery_low,
								    const_PathPlanningSM_sleep_time,
								    const_PathPlanningSM_acc_distance)
						)[[
							move_forward__.x____ <- move_forward,
							turn__.x____ <- turn,
							stop__.x____ <- stop,
							ultrasonic__.x____ <- ultrasonic,
							battery_level__.x____ <- battery_level,
							charging__.x____ <- charging,
							clean__.x____ <- clean,
							displacement__.x____ <- displacement
							| x____ <- TIDS
						]]
					[|{|terminate|}|>SKIP\MachineInternalEvents
					,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
				
				internal_(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = prioritise((((
					wbisim(STM(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance))
						[|MachineMemorySyncSet|]
					((MemoryN(id__,
						 const_PathPlanningSM_cliff,
						 const_PathPlanningSM_nozzle,
						 const_PathPlanningSM_battery_low,
						 const_PathPlanningSM_sleep_time,
						 const_PathPlanningSM_acc_distance)) [| union(WCsets,WCsync) |] Clocks(id__,
							    const_PathPlanningSM_cliff,
							    const_PathPlanningSM_nozzle,
							    const_PathPlanningSM_battery_low,
							    const_PathPlanningSM_sleep_time,
							    const_PathPlanningSM_acc_distance))\WCsets
				)
				\MachineMemoryHidingSet)
				[|{|terminate|}|>SKIP)
				,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 				-- no clocks declared
				
				-- declare trigger deadlines channel
				channel deadline : TIDS.Signal
				
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = || (alpha, P) : WCset(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) @ [alpha] wbisim(P)

				-- collects all clockResets including those of operations
				ClockResets = Union({
					{|clockReset|}
									})
				
				-- With no internal events visible
				Dunopt__(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = timed_priority(AUX(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) \ union(internal_events,ClockResets))
				
				D__(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = timed_priority(AUX_opt(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) \ union(internal_events,ClockResets))
				
				O__(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = D__(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance)
				
				-- With enter/entered/exit/exited events visible
				FVS__(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = timed_priority(AUX(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) \ ClockResets)
				
				-- With enterV/enteredV/exitV/exitedV events visible
				VS__(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = ShowV(timed_priority(AUX(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) \ ClockResets))
				
				-- With clock resets visible
				FVS_C__(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance) = AUX(id__,
						    const_PathPlanningSM_cliff,
						    const_PathPlanningSM_nozzle,
						    const_PathPlanningSM_battery_low,
						    const_PathPlanningSM_sleep_time,
						    const_PathPlanningSM_acc_distance)
			}
		endmodule
