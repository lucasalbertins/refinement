		module CleanSM
		exports
			-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			external prioritise
			transparent wbisim
			transparent dbisim
			transparent sbisim
		
			Timed(OneStep) {	
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_clean_var, set_clean_var: core_boolean
						
				-- shared variable channels
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel clean__: TIDS.InOut.core_boolean
				channel clean: InOut.core_boolean
				
				-- declaring call and ret events for undefined operations
				channel vacuumCall: core_int
				channel brushCall: core_int
			
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machien module.
				CALL__vacuum(id__,
						    x) =  EDeadline(vacuumCall.x,0)		
				CALL__brush(id__,
						    x) =  EDeadline(brushCall.x,0)		
				
				
				-- definition of functions used to expose flow channels
				ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
								   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
								   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
								   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
									 
				ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_CleanSM
				              | SID_CleanSM_clean
				              | SID_CleanSM_dont_clean
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_CleanSM_t0
				              | TID_CleanSM_t1
				              | TID_CleanSM_t2
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_CleanSM_t1,	TID_CleanSM_t2
				}
				
				int_int = {|
					clean__.TID_CleanSM_t1,
					internal__.TID_CleanSM_t1,
					clean__.TID_CleanSM_t2,
					internal__.TID_CleanSM_t2
				|}
					
				
				internal_events = {|enter,entered,exit,exited|}
				shared_variable_events = {|
				|}
						
				
				-- declaring all states
				CS_CleanSM_clean_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_CleanSM_clean,SID_CleanSM_dont_clean},
					y____ <- {SID_CleanSM_clean}
				|}
				
				
				CleanSM_clean_triggers = {|
					clean__.TID_CleanSM_t2,
					clean__.TID_CleanSM_t1
				|}
				
				State_CleanSM_clean(id__,
						    const_CleanSM_voltage) = let
					T_CleanSM_t2(id__,
							    const_CleanSM_voltage) = clean__!TID_CleanSM_t2.in?clean_var -> set_clean_var!clean_var ->  (exit.SID_CleanSM_clean.SID_CleanSM_clean -> SKIP;
										SKIP;exited.SID_CleanSM_clean.SID_CleanSM_clean -> SKIP;
										enter!SID_CleanSM_clean!SID_CleanSM_dont_clean -> entered!SID_CleanSM_clean!SID_CleanSM_dont_clean ->
										State_CleanSM_clean(id__,
												    const_CleanSM_voltage)
					)
					State_CleanSM_clean_execute(id__,o____) = true&CALL__brush(
								id__,
								const_CleanSM_voltage
							);true&CALL__vacuum(
								id__,
								const_CleanSM_voltage
							); 
						entered!o____!SID_CleanSM_clean ->
						(SKIP; STOP /\ (
							T_CleanSM_t2(id__,
									    const_CleanSM_voltage)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t2,TID_CleanSM_t1}) -> exit?y____:diff(SIDS,{SID_CleanSM_clean})!SID_CleanSM_clean -> (
									SKIP;
									exited!y____!SID_CleanSM_clean -> SKIP);
									State_CleanSM_clean(id__,
											    const_CleanSM_voltage)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t2,TID_CleanSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_CleanSM_clean})!SID_CleanSM_clean -> (
									SKIP;
									exited!y____!SID_CleanSM_clean -> SKIP);
									State_CleanSM_clean(id__,
											    const_CleanSM_voltage)
						))
				within
					enter?x____:diff(SIDS,{SID_CleanSM_clean})!SID_CleanSM_clean -> (State_CleanSM_clean_execute(id__,x____))
				
				CS_CleanSM_dont_clean_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_CleanSM_clean,SID_CleanSM_dont_clean},
					y____ <- {SID_CleanSM_dont_clean}
				|}
				
				
				CleanSM_dont_clean_triggers = {|
					clean__.TID_CleanSM_t2,
					clean__.TID_CleanSM_t1
				|}
				
				State_CleanSM_dont_clean(id__,
						    const_CleanSM_voltage) = let
					T_CleanSM_t1(id__,
							    const_CleanSM_voltage) = clean__!TID_CleanSM_t1.in?clean_var -> set_clean_var!clean_var ->  (exit.SID_CleanSM_dont_clean.SID_CleanSM_dont_clean -> SKIP;
										SKIP;exited.SID_CleanSM_dont_clean.SID_CleanSM_dont_clean -> SKIP;
										enter!SID_CleanSM_dont_clean!SID_CleanSM_clean -> entered!SID_CleanSM_dont_clean!SID_CleanSM_clean ->
										State_CleanSM_dont_clean(id__,
												    const_CleanSM_voltage)
					)
					State_CleanSM_dont_clean_execute(id__,o____) = true&CALL__brush(
								id__,
								0
							);true&CALL__vacuum(
								id__,
								0
							); 
						entered!o____!SID_CleanSM_dont_clean ->
						(SKIP; STOP /\ (
							T_CleanSM_t1(id__,
									    const_CleanSM_voltage)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t2,TID_CleanSM_t1}) -> exit?y____:diff(SIDS,{SID_CleanSM_dont_clean})!SID_CleanSM_dont_clean -> (
									SKIP;
									exited!y____!SID_CleanSM_dont_clean -> SKIP);
									State_CleanSM_dont_clean(id__,
											    const_CleanSM_voltage)
							[] clean__?x____:diff(ITIDS,{NULLTRANSITION__,TID_CleanSM_t2,TID_CleanSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_CleanSM_dont_clean})!SID_CleanSM_dont_clean -> (
									SKIP;
									exited!y____!SID_CleanSM_dont_clean -> SKIP);
									State_CleanSM_dont_clean(id__,
											    const_CleanSM_voltage)
						))
				within
					enter?x____:diff(SIDS,{SID_CleanSM_dont_clean})!SID_CleanSM_dont_clean -> (State_CleanSM_dont_clean_execute(id__,x____))
				
				
				I_CleanSM_i0(id__,
						    const_CleanSM_voltage) = let
					T_CleanSM_t0(id__,
							    const_CleanSM_voltage) = internal__!TID_CleanSM_t0 -> enter!SID_CleanSM!SID_CleanSM_dont_clean -> entered!SID_CleanSM!SID_CleanSM_dont_clean ->
					SKIP
				within
					T_CleanSM_t0(id__,
							    const_CleanSM_voltage)
				
				
				State_CleanSM_clean_R(id__,
						    const_CleanSM_voltage) = 
					State_CleanSM_clean(id__,
							    const_CleanSM_voltage)
						[|diff(int_int,CleanSM_clean_triggers)|]
					SKIP
						 		
				State_CleanSM_dont_clean_R(id__,
						    const_CleanSM_voltage) = 
					State_CleanSM_dont_clean(id__,
							    const_CleanSM_voltage)
						[|diff(int_int,CleanSM_dont_clean_triggers)|]
					SKIP
						 		
					
				STM(id__,
						    const_CleanSM_voltage) = (
					I_CleanSM_i0(id__,
							    const_CleanSM_voltage)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_CleanSM_clean,SID_CleanSM_dont_clean}),
								y____ <- {SID_CleanSM_clean,SID_CleanSM_dont_clean}
						|}|]
					(
						State_CleanSM_clean_R(id__,
								    const_CleanSM_voltage)
							[|inter(CS_CleanSM_clean_sync,CS_CleanSM_dont_clean_sync)|]
						State_CleanSM_dont_clean_R(id__,
								    const_CleanSM_voltage)
					)
				)
				
				-- optimized memory process
				channel getV_clean_var: core_boolean
				
				-- individual memory processes
				Memory_clean_var(x__) = ( 
					get_clean_var!x__ -> Memory_clean_var(x__)
					[]
					getV_clean_var!x__ -> Memory_clean_var(x__)
					[]
					set_clean_var?x__ -> Memory_clean_var(x__)
					[]
					clean__!TID_CleanSM_t1.in?clean_var -> Memory_clean_var(clean_var)
					[]
					clean__!TID_CleanSM_t2.in?clean_var -> Memory_clean_var(clean_var)
				)
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 clean_var,
					 const_CleanSM_voltage) = (
					internal__!TID_CleanSM_t0 -> SKIP
					[]
					clean__!TID_CleanSM_t1.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==true)} -> SKIP
					[]
					clean__!TID_CleanSM_t2.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==false)} -> SKIP
				
					[]
						set_clean_var?x__ -> SKIP
				 	)
				MemoryTransitions_CleanSM(id__,
					 const_CleanSM_voltage) =
					(
					getV_clean_var?clean_var ->
					 MemoryTransitions(id__,
					 	 clean_var,
					 	 const_CleanSM_voltage);
					 MemoryTransitions_CleanSM(id__,
					 	 const_CleanSM_voltage)
					)
				
				-- synchronisation, hiding and process sets 
				MemoryVariablesProcesses_CleanSM = Union(
					{
						{
							Memory_clean_var(true)
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						set_clean_var,
						clean__.TID_CleanSM_t2,
						setWC,
						clean__.TID_CleanSM_t1,
						getV_clean_var
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getWC,
						getV_clean_var
					|}
				})
				
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_CleanSM @ P
				
				-- complete memory process
				MemoryN(id__,
					 const_CleanSM_voltage) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_CleanSM(id__,
					 const_CleanSM_voltage)) \ MemoryVariablesHideSet
				
				-- optimised memory
				-- Sets of named elements identified according to transition conditions:
				-- {}
				-- Summary of all identified named elements:
				-- {
				-- clean_var
				-- }
				
				-- Allocation plan:
				-- 0:{}
				--	=> {
				--		TID_CleanSM_t1,
				--		TID_CleanSM_t2,
				--		TID_CleanSM_t0}
				
				-- Memory transition processes
				MemoryTransitions_opt_0(id__) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   clean__!TID_CleanSM_t1.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==true)} -> Update
						 	   []
						 	   clean__!TID_CleanSM_t2.in?clean_var:{clean_var|clean_var <- core_boolean, (clean_var==false)} -> Update
						 	   []
						 	   internal__!TID_CleanSM_t0 -> Update
					within
						Update
				)
				
				-- Memory cell processes
				Memory_opt_clean_var(x__) = ( 
					get_clean_var!x__ -> Memory_opt_clean_var(x__)
					[]
					set_clean_var?x__ -> Memory_opt_clean_var(x__)
				)
				
				-- Composition of memory, StateMachine and Memory transition processes
				
				MemorySTM_opt(id__,
						    const_CleanSM_voltage) =
					sbisim(	
					  dbisim(
					    sbisim(dbisim(sbisim(Memory_opt_clean_var(true)
					          	[| {|set_clean_var,get_clean_var|} |] 
					          	STM_core(id__,
					          			    const_CleanSM_voltage)
					          	)\ {|set_clean_var,get_clean_var|}
					          )
					      	  [| {|clean__.TID_CleanSM_t2,clean__.TID_CleanSM_t1,internal__.TID_CleanSM_t0|} |]
					      	  MemoryTransitions_opt_0(id__)
					      	  )\{|internal__.TID_CleanSM_t0|})
					      )
				
				-- main process
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_clean_var,set_clean_var|},
							{||}
						)
							
						,
						{|internal__.TID_CleanSM_t0,
						clean__.TID_CleanSM_t1,
						clean__.TID_CleanSM_t2|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_clean_var,set_clean_var|},
						{||}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
			
				-- main process
				AUX(id__,
						    const_CleanSM_voltage) = prioritise((((
					wbisim(STM(id__,
							    const_CleanSM_voltage))
						[|MachineMemorySyncSet|]
					(
						(MemoryN(id__,
							 const_CleanSM_voltage))
							[| union(WCsets,WCsync) |]
						Clocks(id__,
								    const_CleanSM_voltage)
					)\WCsets
				)
				[[
					clean__.x____ <- clean
					| x____ <- TIDS
				]]
				\MachineMemoryHidingSet)
				[|{|terminate|}|>SKIP\MachineInternalEvents)
				,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
				
				STM_core(id__,
						    const_CleanSM_voltage) = 
					dbisim(
						sbisim(
								(STM(id__,
										    const_CleanSM_voltage)
								[| union(WCsync,WCresets) |]
								Clocks(id__,
										    const_CleanSM_voltage))\WCresets
							  )
						  )
				
				AUX_opt(id__,
						    const_CleanSM_voltage) = 
					prioritise(
						(MemorySTM_opt(id__,
								    const_CleanSM_voltage)
						)[[
							clean__.x____ <- clean
							| x____ <- TIDS
						]]
					[|{|terminate|}|>SKIP\MachineInternalEvents
					,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
				
				internal_(id__,
						    const_CleanSM_voltage) = prioritise((((
					wbisim(STM(id__,
							    const_CleanSM_voltage))
						[|MachineMemorySyncSet|]
					((MemoryN(id__,
						 const_CleanSM_voltage)) [| union(WCsets,WCsync) |] Clocks(id__,
							    const_CleanSM_voltage))\WCsets
				)
				\MachineMemoryHidingSet)
				[|{|terminate|}|>SKIP)
				,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 				-- no clocks declared
				
				-- declare trigger deadlines channel
				channel deadline : TIDS.Signal
				
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__,
						    const_CleanSM_voltage) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__,
						    const_CleanSM_voltage) = || (alpha, P) : WCset(id__,
						    const_CleanSM_voltage) @ [alpha] wbisim(P)

				-- collects all clockResets including those of operations
				ClockResets = Union({
					{|clockReset|}
									})
				
				-- With no internal events visible
				Dunopt__(id__,
						    const_CleanSM_voltage) = timed_priority(AUX(id__,
						    const_CleanSM_voltage) \ union(internal_events,ClockResets))
				
				D__(id__,
						    const_CleanSM_voltage) = timed_priority(AUX_opt(id__,
						    const_CleanSM_voltage) \ union(internal_events,ClockResets))
				
				O__(id__,
						    const_CleanSM_voltage) = D__(id__,
						    const_CleanSM_voltage)
				
				-- With enter/entered/exit/exited events visible
				FVS__(id__,
						    const_CleanSM_voltage) = timed_priority(AUX(id__,
						    const_CleanSM_voltage) \ ClockResets)
				
				-- With enterV/enteredV/exitV/exitedV events visible
				VS__(id__,
						    const_CleanSM_voltage) = ShowV(timed_priority(AUX(id__,
						    const_CleanSM_voltage) \ ClockResets))
				
				-- With clock resets visible
				FVS_C__(id__,
						    const_CleanSM_voltage) = AUX(id__,
						    const_CleanSM_voltage)
			}
		endmodule
