
--
-- RoboChart generator version 3.0.0.202112100958
-- Automatically generated on 04-03-2022 10:59:34
--
-- Iterated compression status: true
-- Assertions compression status: true
--




module AngularSpeedSM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_wait_input|
	              NID_wait_ar|
	              NID_wait_al|
	              NID_update_value
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_speed, set_speed, setL_speed, setR_speed: core_int
	channel get_turn_angle, set_turn_angle, setL_turn_angle, setR_turn_angle: core_real
	channel get_direction, set_direction, setL_direction, setR_direction: Direction
	channel get_al, set_al, setL_al, setR_al: TripleAxis
	channel get_ar, set_ar, setL_ar, setR_ar: TripleAxis
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel acc_l__: NIDS.InOut.TripleAxis
	channel acc_l: InOut.TripleAxis
	channel acc_r__: NIDS.InOut.TripleAxis
	channel acc_r: InOut.TripleAxis
	channel angle__: NIDS.InOut.core_int
	channel angle: InOut.core_int
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	wait_input::enter,
	wait_ar::enter,
	wait_al::enter,
	update_value::enter
	|}
	
	enteredSS = 	{|
	wait_input::entered,
	wait_ar::entered,
	wait_al::entered,
	update_value::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	acc_l,
		acc_r,
		angle
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_wait_input : core_clock_type 
	channel get_CLID_update_value : core_clock_type 
	channel get_CLID_wait_al : core_clock_type 
	channel get_CLID_wait_ar : core_clock_type 
	--channel increment__
	
	CLID_wait_input_clock_type(id__,
			          const_AngularSpeedSM_t,
			          const_AngularSpeedSM_acc_distance) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_update_value_clock_type(id__,
			          const_AngularSpeedSM_t,
			          const_AngularSpeedSM_acc_distance) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_wait_al_clock_type(id__,
			          const_AngularSpeedSM_t,
			          const_AngularSpeedSM_acc_distance) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_wait_ar_clock_type(id__,
			          const_AngularSpeedSM_t,
			          const_AngularSpeedSM_acc_distance) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) = D__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: wait_input
		module wait_input
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: wait_ar
		module wait_ar
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: wait_al
		module wait_al
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: update_value
		module update_value
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_al?al -> share__choice(get_ar?ar -> share__choice(get_turn_angle?turn_angle -> true & (share__choice(set_turn_angle!Plus(turn_angle, Mult(sqrt(Div(abs(Minus(TripleAxis_Y(al), TripleAxis_Y(ar), core_int)), no_zero_div(const_AngularSpeedSM_acc_distance), core_real)), const_AngularSpeedSM_t, core_real), core_real) -> SKIP)))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_al?al -> share__choice(get_ar?ar -> share__choice(get_turn_angle?turn_angle -> true & (share__choice(set_turn_angle!Plus(turn_angle, Mult(sqrt(Div(abs(Minus(TripleAxis_Y(al), TripleAxis_Y(ar), core_int)), no_zero_div(const_AngularSpeedSM_acc_distance), core_real)), const_AngularSpeedSM_t, core_real), core_real) -> SKIP)))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__,
							    const_AngularSpeedSM_t,
							    const_AngularSpeedSM_acc_distance) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_AngularSpeedSM_t,
					    const_AngularSpeedSM_acc_distance))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		STM_VS_O(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__,
							    const_AngularSpeedSM_t,
							    const_AngularSpeedSM_acc_distance) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_AngularSpeedSM_t,
					    const_AngularSpeedSM_acc_distance))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		-- Transitions
		Transitions(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = ((let
			Trans = TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_turn_angle!0 -> SKIP))) ; wait_input::enter -> SKIP))))
				 [] dbisim((true)&(acc_l__!NID_wait_input.in?al:{al|al <- TripleAxis, true} -> share__choice(set_al!al -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; wait_ar::enter -> SKIP)))
				 [] dbisim((true)&(acc_r__!NID_wait_input.in?ar:{ar|ar <- TripleAxis, true} -> share__choice(set_ar!ar -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; wait_al::enter -> SKIP)))
				 [] dbisim((true)&(acc_r__!NID_wait_ar.in?ar:{ar|ar <- TripleAxis, true} -> share__choice(set_ar!ar -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; update_value::enter -> SKIP)))
				 [] dbisim((true)&(acc_l__!NID_wait_al.in?al:{al|al <- TripleAxis, true} -> share__choice(set_al!al -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; update_value::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_update_value -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_al?al -> share__choice(get_turn_angle?turn_angle -> true&(share__choice(angle.out!(Mult(get_sign(TripleAxis_Y(al)), floor(turn_angle), core_int)) -> SKIP))));SHARE_WAIT(const_AngularSpeedSM_t) ; wait_input::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					wait_input::enter,
					wait_ar::enter,
					wait_al::enter,
					update_value::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,acc_l__.NID_wait_input.in,acc_r__.NID_wait_input.in,acc_r__.NID_wait_ar.in,acc_l__.NID_wait_al.in,internal__.NID_update_value|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__,
						   		    const_AngularSpeedSM_t,
						   		    const_AngularSpeedSM_acc_distance)
						   [| { share__, terminate } |] (
						   wait_input::D__(id__,
						   		    const_AngularSpeedSM_t,
						   		    const_AngularSpeedSM_acc_distance)
						   [| { share__, terminate } |] (
						   wait_ar::D__(id__,
						   		    const_AngularSpeedSM_t,
						   		    const_AngularSpeedSM_acc_distance)
						   [| { share__, terminate } |] (
						   wait_al::D__(id__,
						   		    const_AngularSpeedSM_t,
						   		    const_AngularSpeedSM_acc_distance)
						   [| { share__, terminate } |] (
						   update_value::D__(id__,
						   		    const_AngularSpeedSM_t,
						   		    const_AngularSpeedSM_acc_distance)
						   )
						   )
						   )
						   )
						 )
						 [[wait_input::interrupt <- x__ | x__ <- {|interrupt,acc_l__.NID_wait_input.in,acc_r__.NID_wait_input.in|}]]
						 [[wait_ar::interrupt <- x__ | x__ <- {|interrupt,acc_r__.NID_wait_ar.in|}]]
						 [[wait_al::interrupt <- x__ | x__ <- {|interrupt,acc_l__.NID_wait_al.in|}]]
						 [[update_value::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_update_value|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_al,setR_ar |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setR_al
						 			 			,setR_ar
						 			|}) |]
						 ((i0::enter -> Transitions(id__,
						 		    const_AngularSpeedSM_t,
						 		    const_AngularSpeedSM_acc_distance))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						  [[set_al <- setR_al,set_ar <- setR_ar]]
						 )
						)
						 [[setR_al <- set_al,setR_ar <- set_ar]]
						)
					)
					 \ hideSet)
					[[
						acc_l__.x____ <- acc_l,
						acc_r__.x____ <- acc_r,
						angle__.x____ <- angle
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_AngularSpeedSM_t,
				 		          const_AngularSpeedSM_acc_distance)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_input,wait_input::entered,get_CLID_update_value,update_value::entered,get_CLID_wait_al,wait_al::entered,get_CLID_wait_ar,wait_ar::entered|}
			 within
				(MachineBody(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_input,wait_input::entered,get_CLID_update_value,update_value::entered,get_CLID_wait_al,wait_al::entered,get_CLID_wait_ar,wait_ar::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												MachineBody(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
												[| {|get_CLID_wait_ar,wait_ar::entered,terminate|} |]
												dbisim(Clock_CLID_wait_ar(id__,0,
														          const_AngularSpeedSM_t,
														          const_AngularSpeedSM_acc_distance))
											)\{|get_CLID_wait_ar|}
										)
										[| {|get_CLID_wait_al,wait_al::entered,terminate|} |]
										dbisim(Clock_CLID_wait_al(id__,0,
												          const_AngularSpeedSM_t,
												          const_AngularSpeedSM_acc_distance))
									)\{|get_CLID_wait_al|}
								)
								[| {|get_CLID_update_value,update_value::entered,terminate|} |]
								dbisim(Clock_CLID_update_value(id__,0,
										          const_AngularSpeedSM_t,
										          const_AngularSpeedSM_acc_distance))
							)\{|get_CLID_update_value|}
						)
						[| {|get_CLID_wait_input,wait_input::entered,terminate|} |]
						dbisim(Clock_CLID_wait_input(id__,0,
								          const_AngularSpeedSM_t,
								          const_AngularSpeedSM_acc_distance))
					)\{|get_CLID_wait_input|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = 
			((let
				getsetLocalChannels = {|get_speed,set_speed,
				get_turn_angle,set_turn_angle,
				get_direction,set_direction,
				get_al,set_al,
				get_ar,set_ar|}
				clockSync = {||}
			within
				(Behaviour(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_AngularSpeedSM_t,
				 		    const_AngularSpeedSM_acc_distance) [| {terminate} |] Clocks(id__,
				 		          const_AngularSpeedSM_t,
				 		          const_AngularSpeedSM_acc_distance))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													IteratedBehaviour(id__,
															    const_AngularSpeedSM_t,
															    const_AngularSpeedSM_acc_distance)
													[| {|get_ar,set_ar,terminate|} |]
													Memory_ar((0,0,0))
												)\{|get_ar,set_ar|}
											)
											[| {|get_al,set_al,terminate|} |]
											Memory_al((0,0,0))
										)\{|get_al,set_al|}
									)
									[| {|get_direction,set_direction,terminate|} |]
									Memory_direction(Direction_left)
								)\{|get_direction,set_direction|}
							)
							[| {|get_turn_angle,set_turn_angle,terminate|} |]
							Memory_turn_angle(0)
						)\{|get_turn_angle,set_turn_angle|}
					)
					[| {|get_speed,set_speed,terminate|} |]
					Memory_speed(0)
				)\{|get_speed,set_speed|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					wait_input::enter,
					wait_ar::enter,
					wait_al::enter,
					update_value::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,acc_l__.NID_wait_input.in,acc_r__.NID_wait_input.in,acc_r__.NID_wait_ar.in,acc_l__.NID_wait_al.in,internal__.NID_update_value|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__,
						   		    const_AngularSpeedSM_t,
						   		    const_AngularSpeedSM_acc_distance)
						   [| { share__, terminate } |] (
						   wait_input::VS_O__(id__,
						   		    const_AngularSpeedSM_t,
						   		    const_AngularSpeedSM_acc_distance)
						   [| { share__, terminate } |] (
						   wait_ar::VS_O__(id__,
						   		    const_AngularSpeedSM_t,
						   		    const_AngularSpeedSM_acc_distance)
						   [| { share__, terminate } |] (
						   wait_al::VS_O__(id__,
						   		    const_AngularSpeedSM_t,
						   		    const_AngularSpeedSM_acc_distance)
						   [| { share__, terminate } |] (
						   update_value::VS_O__(id__,
						   		    const_AngularSpeedSM_t,
						   		    const_AngularSpeedSM_acc_distance)
						   )
						   )
						   )
						   )
						 )
						 [[wait_input::interrupt <- x__ | x__ <- {|interrupt,acc_l__.NID_wait_input.in,acc_r__.NID_wait_input.in|}]]
						 [[wait_ar::interrupt <- x__ | x__ <- {|interrupt,acc_r__.NID_wait_ar.in|}]]
						 [[wait_al::interrupt <- x__ | x__ <- {|interrupt,acc_l__.NID_wait_al.in|}]]
						 [[update_value::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_update_value|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_al,setR_ar |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setR_al
						 			 			,setR_ar
						 			|}) |]
						 ((i0::enter -> Transitions(id__,
						 		    const_AngularSpeedSM_t,
						 		    const_AngularSpeedSM_acc_distance))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						  [[set_al <- setR_al,set_ar <- setR_ar]]
						 )
						)
						 [[setR_al <- set_al,setR_ar <- set_ar]]
						)
					)
					 \ hideSet)
					[[
						acc_l__.x____ <- acc_l,
						acc_r__.x____ <- acc_r,
						angle__.x____ <- angle
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_AngularSpeedSM_t,
				 		          const_AngularSpeedSM_acc_distance)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_input,wait_input::entered,get_CLID_update_value,update_value::entered,get_CLID_wait_al,wait_al::entered,get_CLID_wait_ar,wait_ar::entered|}
			 within
				(MachineBody_VS_O(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_input,wait_input::entered,get_CLID_update_value,update_value::entered,get_CLID_wait_al,wait_al::entered,get_CLID_wait_ar,wait_ar::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												MachineBody_VS_O(id__,
														    const_AngularSpeedSM_t,
														    const_AngularSpeedSM_acc_distance)
												[| {|get_CLID_wait_ar,wait_ar::entered,terminate|} |]
												dbisim(Clock_CLID_wait_ar(id__,0,
														          const_AngularSpeedSM_t,
														          const_AngularSpeedSM_acc_distance))
											)\{|get_CLID_wait_ar|}
										)
										[| {|get_CLID_wait_al,wait_al::entered,terminate|} |]
										dbisim(Clock_CLID_wait_al(id__,0,
												          const_AngularSpeedSM_t,
												          const_AngularSpeedSM_acc_distance))
									)\{|get_CLID_wait_al|}
								)
								[| {|get_CLID_update_value,update_value::entered,terminate|} |]
								dbisim(Clock_CLID_update_value(id__,0,
										          const_AngularSpeedSM_t,
										          const_AngularSpeedSM_acc_distance))
							)\{|get_CLID_update_value|}
						)
						[| {|get_CLID_wait_input,wait_input::entered,terminate|} |]
						dbisim(Clock_CLID_wait_input(id__,0,
								          const_AngularSpeedSM_t,
								          const_AngularSpeedSM_acc_distance))
					)\{|get_CLID_wait_input|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = 
			dbisim((let
				getsetLocalChannels = {|get_speed,set_speed,
				get_turn_angle,set_turn_angle,
				get_direction,set_direction,
				get_al,set_al,
				get_ar,set_ar|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
						    const_AngularSpeedSM_t,
						    const_AngularSpeedSM_acc_distance) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_AngularSpeedSM_t,
				 		    const_AngularSpeedSM_acc_distance) [| {terminate} |] Clocks(id__,
				 		          const_AngularSpeedSM_t,
				 		          const_AngularSpeedSM_acc_distance))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													IteratedBehaviour_VS_O(id__,
															    const_AngularSpeedSM_t,
															    const_AngularSpeedSM_acc_distance)
													[| {|get_ar,set_ar,terminate|} |]
													Memory_ar((0,0,0))
												)\{|get_ar,set_ar|}
											)
											[| {|get_al,set_al,terminate|} |]
											Memory_al((0,0,0))
										)\{|get_al,set_al|}
									)
									[| {|get_direction,set_direction,terminate|} |]
									Memory_direction(Direction_left)
								)\{|get_direction,set_direction|}
							)
							[| {|get_turn_angle,set_turn_angle,terminate|} |]
							Memory_turn_angle(0)
						)\{|get_turn_angle,set_turn_angle|}
					)
					[| {|get_speed,set_speed,terminate|} |]
					Memory_speed(0)
				)\{|get_speed,set_speed|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_speed(speed) =
			get_speed!speed -> Memory_speed(speed)
			[]
			set_speed?x__ -> Memory_speed(x__)
			[]
			terminate -> SKIP
		Memory_turn_angle(turn_angle) =
			get_turn_angle!turn_angle -> Memory_turn_angle(turn_angle)
			[]
			set_turn_angle?x__ -> Memory_turn_angle(x__)
			[]
			terminate -> SKIP
		Memory_direction(direction) =
			get_direction!direction -> Memory_direction(direction)
			[]
			set_direction?x__ -> Memory_direction(x__)
			[]
			terminate -> SKIP
		Memory_al(al) =
			get_al!al -> Memory_al(al)
			[]
			set_al?x__ -> Memory_al(x__)
			[]
			terminate -> SKIP
		Memory_ar(ar) =
			get_ar!ar -> Memory_ar(ar)
			[]
			set_ar?x__ -> Memory_ar(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = Memory_speed(0)
		[| { terminate } |] (
		Memory_turn_angle(0)
		[| { terminate } |] (
		Memory_direction(Direction_left)
		[| { terminate } |] (
		Memory_al((0,0,0))
		[| { terminate } |] (
		Memory_ar((0,0,0))
		)
		)
		)
		)
		
		getsetLocalChannels = {|get_speed,set_speed,get_turn_angle,set_turn_angle,get_direction,set_direction,get_al,set_al,get_ar,set_ar|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = STM_VS_O(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) \ localClockResets
		D__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = timed_priority(STM(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) \ union(internal_events,localClockResets))
		O__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = dbisim(D__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance))
		VS__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = FVS__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance)
		VS_O__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = dbisim(FVS__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance))
		HEXT__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = O__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) [|shared_variable_events|] SKIP
		FVS_C__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = dbisim(timed_priority(STM(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) \ internal_events))
		HUP__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = timed_priority(O__(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__,
				          const_AngularSpeedSM_t,
				          const_AngularSpeedSM_acc_distance) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_wait_input(id__,x__,
				          const_AngularSpeedSM_t,
				          const_AngularSpeedSM_acc_distance) = 
			TimeOut_1(
				wait_input::entered -> Clock_CLID_wait_input(id__,0,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)
				[]
				get_CLID_wait_input!x__ -> Clock_CLID_wait_input(id__,x__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)
				[]
				terminate -> SKIP,Clock_CLID_wait_input(id__,clock_type_plus(x__,1,CLID_wait_input_clock_type(id__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)),
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance))
		Clock_CLID_update_value(id__,x__,
				          const_AngularSpeedSM_t,
				          const_AngularSpeedSM_acc_distance) = 
			TimeOut_1(
				update_value::entered -> Clock_CLID_update_value(id__,0,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)
				[]
				get_CLID_update_value!x__ -> Clock_CLID_update_value(id__,x__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)
				[]
				terminate -> SKIP,Clock_CLID_update_value(id__,clock_type_plus(x__,1,CLID_update_value_clock_type(id__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)),
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance))
		Clock_CLID_wait_al(id__,x__,
				          const_AngularSpeedSM_t,
				          const_AngularSpeedSM_acc_distance) = 
			TimeOut_1(
				wait_al::entered -> Clock_CLID_wait_al(id__,0,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)
				[]
				get_CLID_wait_al!x__ -> Clock_CLID_wait_al(id__,x__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)
				[]
				terminate -> SKIP,Clock_CLID_wait_al(id__,clock_type_plus(x__,1,CLID_wait_al_clock_type(id__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)),
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance))
		Clock_CLID_wait_ar(id__,x__,
				          const_AngularSpeedSM_t,
				          const_AngularSpeedSM_acc_distance) = 
			TimeOut_1(
				wait_ar::entered -> Clock_CLID_wait_ar(id__,0,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)
				[]
				get_CLID_wait_ar!x__ -> Clock_CLID_wait_ar(id__,x__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)
				[]
				terminate -> SKIP,Clock_CLID_wait_ar(id__,clock_type_plus(x__,1,CLID_wait_ar_clock_type(id__,
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance)),
						          const_AngularSpeedSM_t,
						          const_AngularSpeedSM_acc_distance))
		
		StateClocks(id__,
				          const_AngularSpeedSM_t,
				          const_AngularSpeedSM_acc_distance) = dbisim(Clock_CLID_wait_input(id__,0,
				          const_AngularSpeedSM_t,
				          const_AngularSpeedSM_acc_distance))
		[| { terminate } |] (
		dbisim(Clock_CLID_update_value(id__,0,
				          const_AngularSpeedSM_t,
				          const_AngularSpeedSM_acc_distance))
		[| { terminate } |] (
		dbisim(Clock_CLID_wait_al(id__,0,
				          const_AngularSpeedSM_t,
				          const_AngularSpeedSM_acc_distance))
		[| { terminate } |] (
		dbisim(Clock_CLID_wait_ar(id__,0,
				          const_AngularSpeedSM_t,
				          const_AngularSpeedSM_acc_distance))
		)
		)
		)
		
		stateClockSync = {|get_CLID_wait_input,wait_input::entered,get_CLID_update_value,update_value::entered,get_CLID_wait_al,wait_al::entered,get_CLID_wait_ar,wait_ar::entered|}
		
		-- Shared memory
		-- Shared memory variables
		
		-- sharedVarMemory process
		sharedVarMemory(id__,
				    const_AngularSpeedSM_t,
				    const_AngularSpeedSM_acc_distance) = terminate -> SKIP
		
		sharedVarSync = {||}
		
		sharedVarHide = {||}
		}
endmodule


