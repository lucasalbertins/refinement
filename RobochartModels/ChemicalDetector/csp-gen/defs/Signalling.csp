module Signalling
exports
	-- flow channels
	channel internal__ : TIDS
	channel enteredV, enterV, exitV, exitedV : SIDS
	channel enter, entered: SIDS.SIDS
	channel exit,exited: SIDS.SIDS
	channel terminate
	
	-- variable channels
	channel get_c, set_c: Chemical
			
	-- shared variable channels
	
	-- local variable channels for defined operations that are required by the state machine
	
	-- declaring state machine events
	channel detect__: TIDS.InOut.Chemical
	channel detect: InOut.Chemical
	channel light__: TIDS.InOut.Color
	channel light: InOut.Color
	channel siren__: TIDS.InOut
	channel siren: InOut
	channel flag__: TIDS.InOut
	channel flag: InOut
	
	-- declaring call and ret events for undefined operations
	
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machien module.
	
	
	-- definition of functions used to expose flow channels
	ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
					   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
					   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
					   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
						 
	ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	
	-- declaring identifiers of state and final states
	datatype SIDS = SID_Signalling
	              | SID_Signalling_Waiting
	              | SID_Signalling_AnomalousGas
	              | SID_Signalling_DangerousGas
	
	-- declaring identifiers of transitions
	datatype TIDS = NULLTRANSITION__
	              | TID_Signalling_t1
	              | TID_Signalling_t3
	              | TID_Signalling_t4a
	              | TID_Signalling_t4
	              | TID_Signalling_t5
	              | TID_Signalling_t6
	              | TID_Signalling_t7
	              | TID_Signalling_t0
	              | TID_Signalling_t2
	              | TID_Signalling_t8
	
	-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
	
	ITIDS = {
		TID_Signalling_t3,	TID_Signalling_t4a,	TID_Signalling_t4,	TID_Signalling_t5,	TID_Signalling_t6,	TID_Signalling_t7,	TID_Signalling_t0,	TID_Signalling_t2,	TID_Signalling_t8
	}
	
	int_int = {|
		detect__.TID_Signalling_t3,
		light__.TID_Signalling_t3,
		siren__.TID_Signalling_t3,
		flag__.TID_Signalling_t3,
		internal__.TID_Signalling_t3,
		detect__.TID_Signalling_t4a,
		light__.TID_Signalling_t4a,
		siren__.TID_Signalling_t4a,
		flag__.TID_Signalling_t4a,
		internal__.TID_Signalling_t4a,
		detect__.TID_Signalling_t4,
		light__.TID_Signalling_t4,
		siren__.TID_Signalling_t4,
		flag__.TID_Signalling_t4,
		internal__.TID_Signalling_t4,
		detect__.TID_Signalling_t5,
		light__.TID_Signalling_t5,
		siren__.TID_Signalling_t5,
		flag__.TID_Signalling_t5,
		internal__.TID_Signalling_t5,
		detect__.TID_Signalling_t6,
		light__.TID_Signalling_t6,
		siren__.TID_Signalling_t6,
		flag__.TID_Signalling_t6,
		internal__.TID_Signalling_t6,
		detect__.TID_Signalling_t7,
		light__.TID_Signalling_t7,
		siren__.TID_Signalling_t7,
		flag__.TID_Signalling_t7,
		internal__.TID_Signalling_t7,
		detect__.TID_Signalling_t0,
		light__.TID_Signalling_t0,
		siren__.TID_Signalling_t0,
		flag__.TID_Signalling_t0,
		internal__.TID_Signalling_t0,
		detect__.TID_Signalling_t2,
		light__.TID_Signalling_t2,
		siren__.TID_Signalling_t2,
		flag__.TID_Signalling_t2,
		internal__.TID_Signalling_t2,
		detect__.TID_Signalling_t8,
		light__.TID_Signalling_t8,
		siren__.TID_Signalling_t8,
		flag__.TID_Signalling_t8,
		internal__.TID_Signalling_t8
	|}
		
	
	internal_events = {|enter,entered,exit,exited|}
	shared_variable_events = {|
	|}
			
	
	-- declaring all states
	CS_Signalling_Waiting_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_Signalling_Waiting,SID_Signalling_AnomalousGas,SID_Signalling_DangerousGas},
		y____ <- {SID_Signalling_Waiting}
	|}
	
	
	Signalling_Waiting_triggers = {|
		detect__.TID_Signalling_t3,
		detect__.TID_Signalling_t4a,
		detect__.TID_Signalling_t5,
		detect__.TID_Signalling_t2,
		detect__.TID_Signalling_t8,
		detect__.TID_Signalling_t7,
		detect__.TID_Signalling_t4,
		detect__.TID_Signalling_t0,
		detect__.TID_Signalling_t6
	|}
	
	State_Signalling_Waiting(id__,
			    const_Signalling_flagTime) = let
		T_Signalling_t3(id__,
				    const_Signalling_flagTime) = detect__!TID_Signalling_t3.in?c -> set_c!c ->  (exit.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
							SKIP;exited.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
							enter!SID_Signalling_Waiting!SID_Signalling_AnomalousGas -> entered!SID_Signalling_Waiting!SID_Signalling_AnomalousGas ->
							State_Signalling_Waiting(id__,
									    const_Signalling_flagTime)
		)
		T_Signalling_t4(id__,
				    const_Signalling_flagTime) = detect__!TID_Signalling_t4.in?c -> set_c!c ->  (exit.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
							SKIP;exited.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
							enter!SID_Signalling_Waiting!SID_Signalling_DangerousGas -> entered!SID_Signalling_Waiting!SID_Signalling_DangerousGas ->
							State_Signalling_Waiting(id__,
									    const_Signalling_flagTime)
		)
		T_Signalling_t0(id__,
				    const_Signalling_flagTime) = detect__!TID_Signalling_t0.in?c -> set_c!c ->  (exit.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
							SKIP;exited.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
							enter!SID_Signalling_Waiting!SID_Signalling_Waiting -> State_Signalling_Waiting_execute(id__,SID_Signalling_Waiting)
		)
		State_Signalling_Waiting_execute(id__,o____) = true&(light.out!Color_green -> SKIP); 
			entered!o____!SID_Signalling_Waiting ->
			(SKIP; STOP /\ (
				T_Signalling_t3(id__,
						    const_Signalling_flagTime)[]
				T_Signalling_t4(id__,
						    const_Signalling_flagTime)[]
				T_Signalling_t0(id__,
						    const_Signalling_flagTime)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6}) -> exit?y____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (
						SKIP;
						exited!y____!SID_Signalling_Waiting -> SKIP);
						State_Signalling_Waiting(id__,
								    const_Signalling_flagTime)
				[] detect__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (
						SKIP;
						exited!y____!SID_Signalling_Waiting -> SKIP);
						State_Signalling_Waiting(id__,
								    const_Signalling_flagTime)
				[] light__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (
						SKIP;
						exited!y____!SID_Signalling_Waiting -> SKIP);
						State_Signalling_Waiting(id__,
								    const_Signalling_flagTime)
				[] siren__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (
						SKIP;
						exited!y____!SID_Signalling_Waiting -> SKIP);
						State_Signalling_Waiting(id__,
								    const_Signalling_flagTime)
				[] flag__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (
						SKIP;
						exited!y____!SID_Signalling_Waiting -> SKIP);
						State_Signalling_Waiting(id__,
								    const_Signalling_flagTime)
			))
	within
		enter?x____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (State_Signalling_Waiting_execute(id__,x____))
	
	CS_Signalling_AnomalousGas_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_Signalling_Waiting,SID_Signalling_AnomalousGas,SID_Signalling_DangerousGas},
		y____ <- {SID_Signalling_AnomalousGas}
	|}
	
	
	Signalling_AnomalousGas_triggers = {|
		detect__.TID_Signalling_t3,
		detect__.TID_Signalling_t4a,
		detect__.TID_Signalling_t5,
		detect__.TID_Signalling_t2,
		detect__.TID_Signalling_t8,
		detect__.TID_Signalling_t7,
		detect__.TID_Signalling_t4,
		detect__.TID_Signalling_t0,
		detect__.TID_Signalling_t6
	|}
	
	State_Signalling_AnomalousGas(id__,
			    const_Signalling_flagTime) = let
		T_Signalling_t4a(id__,
				    const_Signalling_flagTime) = detect__!TID_Signalling_t4a.in?c -> set_c!c ->  (exit.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
							SKIP;exited.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
							enter!SID_Signalling_AnomalousGas!SID_Signalling_Waiting -> entered!SID_Signalling_AnomalousGas!SID_Signalling_Waiting ->
							State_Signalling_AnomalousGas(id__,
									    const_Signalling_flagTime)
		)
		T_Signalling_t7(id__,
				    const_Signalling_flagTime) = detect__!TID_Signalling_t7.in?c -> set_c!c ->  (exit.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
							SKIP;exited.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
							enter!SID_Signalling_AnomalousGas!SID_Signalling_DangerousGas -> entered!SID_Signalling_AnomalousGas!SID_Signalling_DangerousGas ->
							State_Signalling_AnomalousGas(id__,
									    const_Signalling_flagTime)
		)
		T_Signalling_t2(id__,
				    const_Signalling_flagTime) = detect__!TID_Signalling_t2.in?c -> set_c!c ->  (exit.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
							SKIP;exited.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
							enter!SID_Signalling_AnomalousGas!SID_Signalling_AnomalousGas -> State_Signalling_AnomalousGas_execute(id__,SID_Signalling_AnomalousGas)
		)
		State_Signalling_AnomalousGas_execute(id__,o____) = true&(light.out.Color_amber -> SKIP); 
			entered!o____!SID_Signalling_AnomalousGas ->
			(SKIP; STOP /\ (
				T_Signalling_t4a(id__,
						    const_Signalling_flagTime)[]
				T_Signalling_t7(id__,
						    const_Signalling_flagTime)[]
				T_Signalling_t2(id__,
						    const_Signalling_flagTime)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6}) -> exit?y____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (
						SKIP;
						exited!y____!SID_Signalling_AnomalousGas -> SKIP);
						State_Signalling_AnomalousGas(id__,
								    const_Signalling_flagTime)
				[] detect__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (
						SKIP;
						exited!y____!SID_Signalling_AnomalousGas -> SKIP);
						State_Signalling_AnomalousGas(id__,
								    const_Signalling_flagTime)
				[] light__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (
						SKIP;
						exited!y____!SID_Signalling_AnomalousGas -> SKIP);
						State_Signalling_AnomalousGas(id__,
								    const_Signalling_flagTime)
				[] siren__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (
						SKIP;
						exited!y____!SID_Signalling_AnomalousGas -> SKIP);
						State_Signalling_AnomalousGas(id__,
								    const_Signalling_flagTime)
				[] flag__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (
						SKIP;
						exited!y____!SID_Signalling_AnomalousGas -> SKIP);
						State_Signalling_AnomalousGas(id__,
								    const_Signalling_flagTime)
			))
	within
		enter?x____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (State_Signalling_AnomalousGas_execute(id__,x____))
	
	CS_Signalling_DangerousGas_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_Signalling_Waiting,SID_Signalling_AnomalousGas,SID_Signalling_DangerousGas},
		y____ <- {SID_Signalling_DangerousGas}
	|}
	
	
	Signalling_DangerousGas_triggers = {|
		detect__.TID_Signalling_t3,
		detect__.TID_Signalling_t4a,
		detect__.TID_Signalling_t5,
		detect__.TID_Signalling_t8,
		detect__.TID_Signalling_t2,
		detect__.TID_Signalling_t7,
		detect__.TID_Signalling_t4,
		detect__.TID_Signalling_t0,
		detect__.TID_Signalling_t6
	|}
	
	State_Signalling_DangerousGas(id__,
			    const_Signalling_flagTime) = let
		T_Signalling_t5(id__,
				    const_Signalling_flagTime) = detect__!TID_Signalling_t5.in?c -> set_c!c ->  (exit.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
							SKIP;exited.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
							enter!SID_Signalling_DangerousGas!SID_Signalling_AnomalousGas -> entered!SID_Signalling_DangerousGas!SID_Signalling_AnomalousGas ->
							State_Signalling_DangerousGas(id__,
									    const_Signalling_flagTime)
		)
		T_Signalling_t6(id__,
				    const_Signalling_flagTime) = detect__!TID_Signalling_t6.in?c -> set_c!c ->  (exit.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
							SKIP;exited.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
							enter!SID_Signalling_DangerousGas!SID_Signalling_Waiting -> entered!SID_Signalling_DangerousGas!SID_Signalling_Waiting ->
							State_Signalling_DangerousGas(id__,
									    const_Signalling_flagTime)
		)
		T_Signalling_t8(id__,
				    const_Signalling_flagTime) = detect__!TID_Signalling_t8.in?c -> set_c!c ->  (exit.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
							SKIP;exited.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
							enter!SID_Signalling_DangerousGas!SID_Signalling_DangerousGas -> State_Signalling_DangerousGas_execute(id__,SID_Signalling_DangerousGas)
		)
		State_Signalling_DangerousGas_execute(id__,o____) = true&(light.out!Color_red -> SKIP);true&(siren.out -> SKIP);SKIP;true&(flag.out -> SKIP); 
			entered!o____!SID_Signalling_DangerousGas ->
			(SKIP; STOP /\ (
				T_Signalling_t5(id__,
						    const_Signalling_flagTime)[]
				T_Signalling_t6(id__,
						    const_Signalling_flagTime)[]
				T_Signalling_t8(id__,
						    const_Signalling_flagTime)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t8,TID_Signalling_t2,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6}) -> exit?y____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (
						SKIP;
						exited!y____!SID_Signalling_DangerousGas -> SKIP);
						State_Signalling_DangerousGas(id__,
								    const_Signalling_flagTime)
				[] detect__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t8,TID_Signalling_t2,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (
						SKIP;
						exited!y____!SID_Signalling_DangerousGas -> SKIP);
						State_Signalling_DangerousGas(id__,
								    const_Signalling_flagTime)
				[] light__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t8,TID_Signalling_t2,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (
						SKIP;
						exited!y____!SID_Signalling_DangerousGas -> SKIP);
						State_Signalling_DangerousGas(id__,
								    const_Signalling_flagTime)
				[] siren__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t8,TID_Signalling_t2,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (
						SKIP;
						exited!y____!SID_Signalling_DangerousGas -> SKIP);
						State_Signalling_DangerousGas(id__,
								    const_Signalling_flagTime)
				[] flag__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t8,TID_Signalling_t2,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (
						SKIP;
						exited!y____!SID_Signalling_DangerousGas -> SKIP);
						State_Signalling_DangerousGas(id__,
								    const_Signalling_flagTime)
			))
	within
		enter?x____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (State_Signalling_DangerousGas_execute(id__,x____))
	
	
	I_Signalling_i1(id__,
			    const_Signalling_flagTime) = let
		T_Signalling_t1(id__,
				    const_Signalling_flagTime) = internal__!TID_Signalling_t1 -> enter!SID_Signalling!SID_Signalling_Waiting -> entered!SID_Signalling!SID_Signalling_Waiting ->
		SKIP
	within
		T_Signalling_t1(id__,
				    const_Signalling_flagTime)
	
	
	State_Signalling_Waiting_R(id__,
			    const_Signalling_flagTime) = 
		State_Signalling_Waiting(id__,
				    const_Signalling_flagTime)
			[|diff(int_int,Signalling_Waiting_triggers)|]
		SKIP
			 		
	State_Signalling_AnomalousGas_R(id__,
			    const_Signalling_flagTime) = 
		State_Signalling_AnomalousGas(id__,
				    const_Signalling_flagTime)
			[|diff(int_int,Signalling_AnomalousGas_triggers)|]
		SKIP
			 		
	State_Signalling_DangerousGas_R(id__,
			    const_Signalling_flagTime) = 
		State_Signalling_DangerousGas(id__,
				    const_Signalling_flagTime)
			[|diff(int_int,Signalling_DangerousGas_triggers)|]
		SKIP
			 		
		
	STM(id__,
			    const_Signalling_flagTime) = (
		I_Signalling_i1(id__,
				    const_Signalling_flagTime)
			[|
				{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
					x____ <- diff(SIDS,{SID_Signalling_Waiting,SID_Signalling_AnomalousGas,SID_Signalling_DangerousGas}),
					y____ <- {SID_Signalling_Waiting,SID_Signalling_AnomalousGas,SID_Signalling_DangerousGas}
			|}|]
		(
			State_Signalling_Waiting_R(id__,
					    const_Signalling_flagTime)
				[|inter(CS_Signalling_Waiting_sync,union(CS_Signalling_AnomalousGas_sync,CS_Signalling_DangerousGas_sync))|]
			(
				State_Signalling_AnomalousGas_R(id__,
						    const_Signalling_flagTime)
					[|inter(CS_Signalling_AnomalousGas_sync,CS_Signalling_DangerousGas_sync)|]
				State_Signalling_DangerousGas_R(id__,
						    const_Signalling_flagTime)
			)
		)
	)
	
	-- optimized memory process
	channel getV_c: Chemical
	
	-- individual memory processes
	Memory_c(c) = (
		get_c!c -> Memory_c(c)
		[]
		getV_c!c -> Memory_c(c)
		[]
		set_c?x__ -> Memory_c(x__)
		[]
		detect__!TID_Signalling_t3.in?c -> Memory_c(c)
		[]
		detect__!TID_Signalling_t4a.in?c -> Memory_c(c)
		[]
		detect__!TID_Signalling_t4.in?c -> Memory_c(c)
		[]
		detect__!TID_Signalling_t5.in?c -> Memory_c(c)
		[]
		detect__!TID_Signalling_t6.in?c -> Memory_c(c)
		[]
		detect__!TID_Signalling_t7.in?c -> Memory_c(c)
		[]
		detect__!TID_Signalling_t0.in?c -> Memory_c(c)
		[]
		detect__!TID_Signalling_t2.in?c -> Memory_c(c)
		[]
		detect__!TID_Signalling_t8.in?c -> Memory_c(c)
	)
	
	-- processes that read variables and offer transitions
	MemoryTransitions(id__, c
				,
			    const_Signalling_flagTime) = 		
	(internal__!TID_Signalling_t1 -> SKIP
	[]
	detect__!TID_Signalling_t3.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> SKIP
	[]
	detect__!TID_Signalling_t4a.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> SKIP
	[]
	detect__!TID_Signalling_t4.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> SKIP
	[]
	detect__!TID_Signalling_t5.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> SKIP
	[]
	detect__!TID_Signalling_t6.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> SKIP
	[]
	detect__!TID_Signalling_t7.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> SKIP
	[]
	detect__!TID_Signalling_t0.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> SKIP
	[]
	detect__!TID_Signalling_t2.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> SKIP
	[]
	detect__!TID_Signalling_t8.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> SKIP[]
	set_c?x__ -> SKIP)
	
	MemoryTransitions_Signalling(id__, const_Signalling_flagTime) = (getV_c?c ->
	MemoryTransitions(id__, c
				,
			    const_Signalling_flagTime); MemoryTransitions_Signalling(id__, const_Signalling_flagTime))			
	
	-- synchronisation, hiding and process sets 
	MemoryVariablesProcesses_Signalling = Union(
		{
			{
				(Memory_c(Chemical_anomaly),{|get_c,detect__.TID_Signalling_t4a,set_c,detect__.TID_Signalling_t7,detect__.TID_Signalling_t6,detect__.TID_Signalling_t8,detect__.TID_Signalling_t3,detect__.TID_Signalling_t2,detect__.TID_Signalling_t5,detect__.TID_Signalling_t4,getV_c,detect__.TID_Signalling_t0|})
			}
		}
	)
	
	MemoryVariablesSyncSet = Union({
		{|
			detect__.TID_Signalling_t4a,
			set_c,
			detect__.TID_Signalling_t7,
			detect__.TID_Signalling_t6,
			detect__.TID_Signalling_t8,
			detect__.TID_Signalling_t3,
			detect__.TID_Signalling_t2,
			detect__.TID_Signalling_t5,
			detect__.TID_Signalling_t4,
			getV_c,
			detect__.TID_Signalling_t0
		|}	
	})
	
	MemoryVariablesHideSet = Union({
		{|
			getV_c
		|}
	})
	
	-- combined individual memory processes
	MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_Signalling @ P
	
	-- complete memory process	
	MemoryN(id__, const_Signalling_flagTime) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_Signalling(id__, const_Signalling_flagTime)))) \ MemoryVariablesHideSet))
	
	-- optimised memory
	-- Sets of named elements identified according to transition conditions:
	-- {}
	-- Summary of all identified named elements:
	-- {
	-- c
	-- }
	
	-- Allocation plan:
	-- 0:{}
	--	=> {
	--		TID_Signalling_t3,
	--		TID_Signalling_t4a,
	--		TID_Signalling_t1,
	--		TID_Signalling_t5,
	--		TID_Signalling_t2,
	--		TID_Signalling_t8,
	--		TID_Signalling_t7,
	--		TID_Signalling_t4,
	--		TID_Signalling_t0,
	--		TID_Signalling_t6}
	
	-- Memory transition processes
	MemoryTransitions_opt_0(id__) =
	(
		let
			Update = Current(id__)
			Current(id__)
			 	   = 
			 	   detect__!TID_Signalling_t3.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> Update
			 	   []
			 	   detect__!TID_Signalling_t4a.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> Update
			 	   []
			 	   internal__!TID_Signalling_t1 -> Update
			 	   []
			 	   detect__!TID_Signalling_t5.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> Update
			 	   []
			 	   detect__!TID_Signalling_t2.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> Update
			 	   []
			 	   detect__!TID_Signalling_t8.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> Update
			 	   []
			 	   detect__!TID_Signalling_t7.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> Update
			 	   []
			 	   detect__!TID_Signalling_t4.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> Update
			 	   []
			 	   detect__!TID_Signalling_t0.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> Update
			 	   []
			 	   detect__!TID_Signalling_t6.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> Update
		within
			Update
	)
	
	-- Memory cell processes
	Memory_opt_c(x__) = ( 
		get_c!x__ -> Memory_opt_c(x__)
		[]
		set_c?x__ -> Memory_opt_c(x__)
	)
	
	-- Composition of memory, StateMachine and Memory transition processes
	
	MemorySTM_opt(id__,
			    const_Signalling_flagTime) =
		sbisim(	
		  dbisim(
		    sbisim(dbisim(sbisim(Memory_opt_c(Chemical_anomaly)
		          	[| {|get_c,set_c|} |] 
		          	STM_core(id__,
		          			    const_Signalling_flagTime)
		          	)\ {|get_c,set_c|}
		          )
		      	  [| {|detect__.TID_Signalling_t4a,internal__.TID_Signalling_t1,detect__.TID_Signalling_t7,detect__.TID_Signalling_t6,detect__.TID_Signalling_t8,detect__.TID_Signalling_t3,detect__.TID_Signalling_t2,detect__.TID_Signalling_t5,detect__.TID_Signalling_t4,detect__.TID_Signalling_t0|} |]
		      	  MemoryTransitions_opt_0(id__)
		      	  )\{|internal__.TID_Signalling_t1|})
		      )
	
	-- main process
	
	MachineMemorySyncSet = Union({
		union(
			union(
				{|get_c,set_c|},
				{||}
			)
				
			,
			{|internal__.TID_Signalling_t1,
			detect__.TID_Signalling_t3,
			detect__.TID_Signalling_t4a,
			detect__.TID_Signalling_t4,
			detect__.TID_Signalling_t5,
			detect__.TID_Signalling_t6,
			detect__.TID_Signalling_t7,
			detect__.TID_Signalling_t0,
			detect__.TID_Signalling_t2,
			detect__.TID_Signalling_t8|}
		)
	})
	
	MachineMemoryHidingSet = Union({
		union(
			{|get_c,set_c|},
			{||}
		)
	})
	
	MachineInternalEvents = {|
		internal__
	|}
	
	AUX(id__,
			    const_Signalling_flagTime) = (
		(
			STM(id__,
					    const_Signalling_flagTime)
				[|MachineMemorySyncSet|]
			sbisim(diamond(MemoryN(id__, const_Signalling_flagTime)))
		)[[
			detect__.x____ <- detect,
			light__.x____ <- light,
			siren__.x____ <- siren,
			flag__.x____ <- flag
			| x____ <- TIDS
		]]
		\MachineMemoryHidingSet
	)
	[|{|terminate|}|>SKIP\MachineInternalEvents
	
	
	STM_core(id__,
			    const_Signalling_flagTime) = 
		sbisim(diamond(STM(id__,
				    const_Signalling_flagTime)))
		
	AUX_opt(id__,
			    const_Signalling_flagTime) = 
		(MemorySTM_opt(id__,
				    const_Signalling_flagTime)
		)[[
			detect__.x____ <- detect,
			light__.x____ <- light,
			siren__.x____ <- siren,
			flag__.x____ <- flag
			| x____ <- TIDS
		]]
		[|{|terminate|}|>SKIP\MachineInternalEvents

	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
			
	FVS__(id__,
			    const_Signalling_flagTime) = AUX_opt(id__,
			    const_Signalling_flagTime)
	Dunopt__(id__,
			    const_Signalling_flagTime) = AUX(id__,
			    const_Signalling_flagTime) \ internal_events
	D__(id__,
			    const_Signalling_flagTime) = AUX_opt(id__,
			    const_Signalling_flagTime) \ internal_events
	O__(id__,
			    const_Signalling_flagTime) = sbisim(diamond(D__(id__,
			    const_Signalling_flagTime)))
	VS__(id__,
			    const_Signalling_flagTime) = ShowV(FVS__(id__,
			    const_Signalling_flagTime))
	VS_O__(id__,
			    const_Signalling_flagTime) = sbisim(diamond(VS__(id__,
			    const_Signalling_flagTime)))
	HEXT__(id__,
			    const_Signalling_flagTime) = O__(id__,
			    const_Signalling_flagTime) [|shared_variable_events|] SKIP	
endmodule
