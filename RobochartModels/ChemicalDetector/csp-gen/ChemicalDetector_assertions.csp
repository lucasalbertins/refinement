-- a1 - non deterministic
assert not let 
	id__ = 0
	
	
	
within
	Detecting::O__(id__) :[deterministic]

-- a2 - deadlock free
assert OnlyCommands :[deadlock free]

-- a3 - deadlock free
assert OnlyGasAndLight :[deadlock free]

-- a4 - refinement
assert Spec1 [FD= Impl1

-- a5 - deadlock free
assert let 
	id__ = 0
	
	
	
	const_Microcontroller_stm_ref0_flagTime = const_Signalling_flagTime
		
within
	ChemicalDetectorSoftware::O__(id__,
			    const_Microcontroller_stm_ref0_flagTime) :[deadlock free]

-- a6 - divergence free
assert let 
	id__ = 0
	
	
	
	const_Microcontroller_stm_ref0_flagTime = const_Signalling_flagTime
		
within
	ChemicalDetectorSoftware::O__(id__,
			    const_Microcontroller_stm_ref0_flagTime) :[divergence free]

include "defs/file_Detect_defs.csp"
include "defs/file_Move_defs.csp"
include "defs/robochart_defs.csp"
include "defs/core_defs.csp"
include "defs/Detecting.csp"
include "defs/ChemicalDetectorSoftware.csp"
include "defs/file_MainComputer_defs.csp"
include "defs/file_Microcontroller_defs.csp"
include "defs/file_System_defs.csp"
include "defs/file_Signal_defs.csp"

channel r__

nametype real = { -90..180}
nametype nat = {0..2}
Signalling_flagTime = 0
nametype boolean = Bool
nametype string = LSeq(Char,2)
nametype int = { -2..2}
incr_BOUND = 2
decr_BOUND = 2

Plus(e1,e2,T) = if member(e1+e2,T) then e1+e2 else e1
Div(e1,e2,T) = if member(e1/e2,T) then e1/e2 else e1
Neg(e1,T) = if member(-e1,T) then -e1 else e1
Mult(e1,e2,T) = if member(e1*e2,T) then e1*e2 else e1
Modulus(e1,e2,T) = if member(e1%e2,T) then e1%e2 else e1
Minus(e1,e2,T) = if member(e1-e2,T) then e1-e2 else e1

OnlyCommands = ChemicalDetectorSoftware_O(0) [|{|ChemicalDetectorSoftware_gas,ChemicalDetectorSoftware_light|}|] STOP

OnlyGasAndLight = ChemicalDetectorSoftware_O(0) [|{|ChemicalDetectorSoftware_cd|}|] STOP

Commands = ChemicalDetectorSoftware_cd.in?x -> (|~|e: {|ChemicalDetectorSoftware_turn.out,incrCall,decrCall|} @ e -> Commands)
Init = ChemicalDetectorSoftware_light.out.Color_green -> SKIP ||| ChemicalDetectorSoftware_gas.in -> SKIP
GasLight = let
  T = (
    ChemicalDetectorSoftware_gas.in -> SKIP
    |||
    (
      ChemicalDetectorSoftware_light.out.Color_red -> ChemicalDetectorSoftware_siren.out -> ChemicalDetectorSoftware_flag.out -> SKIP
      |~|
      ChemicalDetectorSoftware_light.out.Color_green -> SKIP
      |~|
      ChemicalDetectorSoftware_light.out.Color_amber -> SKIP
    )
  ); T
within
  Init; T
Spec1 = Commands ||| GasLight

Impl1 = ChemicalDetectorSoftware_O(0)\{|incrRet,decrRet|}
