
--
-- RoboChart generator version 3.0.0.202112100958
-- Automatically generated on 04-03-2022 17:58:28
--
-- Iterated compression status: true
-- Assertions compression status: true
--

	module MainComputer
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel gas: InOut
		channel turn: InOut.core_real
		channel command: InOut.Command
		channel detect: InOut.Chemical
		
		
		
		-- declaring call and ret events for undefined operations
		channel decrCall
		channel incrCall
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	gas,
			turn,
			command,
			detect
		,	decrCall,
			incrCall
		|}
		
		-- set of visible memory events
		visibleMemoryEvents = {||}

		-- defined operations
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i1|
			              NID_Waiting
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_c, set_c, setL_c, setR_c: Command
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel cd__: NIDS.InOut.Command
			channel cd: InOut.Command
			channel turn__: NIDS.InOut.core_real
			channel turn: InOut.core_real
			
			-- Declaring call and ret events for undefined operations
			channel decrCall
			channel incrCall
			
			enterSS = {|
			i1::enter,
			Waiting::enter
			|}
			
			enteredSS = 	{|
			Waiting::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	cd,
				turn
			,	decrCall,
				incrCall
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_Waiting : core_clock_type 
			--channel increment__
			
			CLID_Waiting_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			{}
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i1
				module i1
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Waiting
				module Waiting
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks(id__) = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__decr(id__) = EDeadline(decrCall,0)
				CALL__incr(id__) = EDeadline(incrCall,0)
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_c?c -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SKIP ; Waiting::enter -> SKIP))))
						 [] dbisim((cd__!NID_Waiting.in?c:{c|c <- Command, (c==Command_left)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(turn.out!(Neg(90, core_int)) -> SKIP)) ; Waiting::enter -> SKIP)))
						 [] dbisim((cd__!NID_Waiting.in?c:{c|c <- Command, (c==Command_right)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(turn.out.90 -> SKIP)) ; Waiting::enter -> SKIP)))
						 [] dbisim((cd__!NID_Waiting.in?c:{c|c <- Command, (c==Command_back)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(turn.out.180 -> SKIP)) ; Waiting::enter -> SKIP)))
						 [] dbisim((cd__!NID_Waiting.in?c:{c|c <- Command, (c==Command_faster)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__incr(
						 			id__
						 		) ; Waiting::enter -> SKIP)))
						 [] dbisim((cd__!NID_Waiting.in?c:{c|c <- Command, (c==Command_slower)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__decr(
						 			id__
						 		) ; Waiting::enter -> SKIP)))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
					)
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i1::enter,
							Waiting::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i1,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i1::D__(id__)
								   [| { share__, terminate } |] (
								   Waiting::D__(id__)
								   )
								 )
								 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in|}]]
								 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_c |} ]] 
								  [[set_c <- setL_c]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_c
								 			,setR_c
								 			|}) |]
								 ((i1::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_c |} ]]
								  [[set_c <- setR_c]]
								 )
								)[[setL_c <- set_c]]
								 [[setR_c <- set_c]]
								)
							)
							 \ hideSet)
							[[
								cd__.x____ <- cd,
								turn__.x____ <- turn
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
					 within
						(dbisim(
							sbisim(
								MachineBody(id__)
								[| {|get_CLID_Waiting,Waiting::entered,terminate|} |]
								dbisim(Clock_CLID_Waiting(id__,0))
							)\{|get_CLID_Waiting|}
						)
						) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {|get_c,set_c|}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							IteratedBehaviour(id__)
							[| {|get_c,set_c,terminate|} |]
							Memory_c(Command_faster)
						)\{|get_c,set_c|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i1::enter,
							Waiting::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i1,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i1::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Waiting::VS_O__(id__)
								   )
								 )
								 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in|}]]
								 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_c |} ]] 
								  [[set_c <- setL_c]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_c
								 			,setR_c
								 			|}) |]
								 ((i1::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_c |} ]]
								  [[set_c <- setR_c]]
								 )
								)[[setL_c <- set_c]]
								 [[setR_c <- set_c]]
								)
							)
							 \ hideSet)
							[[
								cd__.x____ <- cd,
								turn__.x____ <- turn
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
					 within
						(dbisim(
							sbisim(
								MachineBody_VS_O(id__)
								[| {|get_CLID_Waiting,Waiting::entered,terminate|} |]
								dbisim(Clock_CLID_Waiting(id__,0))
							)\{|get_CLID_Waiting|}
						)
						) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_c,set_c|}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							IteratedBehaviour_VS_O(id__)
							[| {|get_c,set_c,terminate|} |]
							Memory_c(Command_faster)
						)\{|get_c,set_c|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_c(c) =
					get_c!c -> Memory_c(c)
					[]
					set_c?x__ -> Memory_c(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_c(Command_faster)
				
				getsetLocalChannels = {|get_c,set_c|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_Waiting(id__,x__) = 
					TimeOut_1(
						Waiting::entered -> Clock_CLID_Waiting(id__,0)
						[]
						get_CLID_Waiting!x__ -> Clock_CLID_Waiting(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_Waiting(id__,clock_type_plus(x__,1,CLID_Waiting_clock_type(id__))))
				
				StateClocks(id__) = dbisim(Clock_CLID_Waiting(id__,0))
				
				stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		module stm_ref1
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i1|
			              NID_CleanAir|
			              NID_GasPresent
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel gas__: NIDS.InOut
			channel gas: InOut
			channel detect__: NIDS.InOut.Chemical
			channel detect: InOut.Chemical
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i1::enter,
			CleanAir::enter,
			GasPresent::enter
			|}
			
			enteredSS = 	{|
			CleanAir::entered,
			GasPresent::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	gas,
				detect
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_CleanAir : core_clock_type 
			channel get_CLID_GasPresent : core_clock_type 
			--channel increment__
			
			CLID_CleanAir_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_GasPresent_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i1
				module i1
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: CleanAir
				module CleanAir
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks(id__) = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: GasPresent
				module GasPresent
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks(id__) = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SKIP ; CleanAir::enter -> SKIP))))
						 [] dbisim((true)&(gas__!NID_CleanAir.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; GasPresent::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_GasPresent -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(detect.out.Chemical_innocuous -> SKIP)) ; CleanAir::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_GasPresent -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(detect.out.Chemical_anomaly -> SKIP)) ; CleanAir::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_GasPresent -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(true&(share__choice(detect.out.Chemical_danger -> SKIP)),1);Deadline(true&(share__choice(detect.out.Chemical_danger -> SKIP)),2) ; CleanAir::enter -> SKIP)))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i1::enter,
							CleanAir::enter,
							GasPresent::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i1,gas__.NID_CleanAir.in,internal__.NID_GasPresent,internal__.NID_GasPresent,internal__.NID_GasPresent|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i1::D__(id__)
								   [| { share__, terminate } |] (
								   CleanAir::D__(id__)
								   [| { share__, terminate } |] (
								   GasPresent::D__(id__)
								   )
								   )
								 )
								 [[CleanAir::interrupt <- x__ | x__ <- {|interrupt,gas__.NID_CleanAir.in|}]]
								 [[GasPresent::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GasPresent,internal__.NID_GasPresent,internal__.NID_GasPresent|}]]
								 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i1::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								gas__.x____ <- gas,
								detect__.x____ <- detect
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_CleanAir,CleanAir::entered,get_CLID_GasPresent,GasPresent::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_CleanAir,CleanAir::entered,get_CLID_GasPresent,GasPresent::entered|}
					 within
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody(id__)
										[| {|get_CLID_GasPresent,GasPresent::entered,terminate|} |]
										dbisim(Clock_CLID_GasPresent(id__,0))
									)\{|get_CLID_GasPresent|}
								)
								[| {|get_CLID_CleanAir,CleanAir::entered,terminate|} |]
								dbisim(Clock_CLID_CleanAir(id__,0))
							)\{|get_CLID_CleanAir|}
						)
						) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful(id__) =
					(IteratedBehaviour(id__))
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i1::enter,
							CleanAir::enter,
							GasPresent::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i1,gas__.NID_CleanAir.in,internal__.NID_GasPresent,internal__.NID_GasPresent,internal__.NID_GasPresent|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i1::VS_O__(id__)
								   [| { share__, terminate } |] (
								   CleanAir::VS_O__(id__)
								   [| { share__, terminate } |] (
								   GasPresent::VS_O__(id__)
								   )
								   )
								 )
								 [[CleanAir::interrupt <- x__ | x__ <- {|interrupt,gas__.NID_CleanAir.in|}]]
								 [[GasPresent::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GasPresent,internal__.NID_GasPresent,internal__.NID_GasPresent|}]]
								 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i1::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								gas__.x____ <- gas,
								detect__.x____ <- detect
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_CleanAir,CleanAir::entered,get_CLID_GasPresent,GasPresent::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_CleanAir,CleanAir::entered,get_CLID_GasPresent,GasPresent::entered|}
					 within
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody_VS_O(id__)
										[| {|get_CLID_GasPresent,GasPresent::entered,terminate|} |]
										dbisim(Clock_CLID_GasPresent(id__,0))
									)\{|get_CLID_GasPresent|}
								)
								[| {|get_CLID_CleanAir,CleanAir::entered,terminate|} |]
								dbisim(Clock_CLID_CleanAir(id__,0))
							)\{|get_CLID_CleanAir|}
						)
						) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(IteratedBehaviour_VS_O(id__))
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_CleanAir(id__,x__) = 
					TimeOut_1(
						CleanAir::entered -> Clock_CLID_CleanAir(id__,0)
						[]
						get_CLID_CleanAir!x__ -> Clock_CLID_CleanAir(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_CleanAir(id__,clock_type_plus(x__,1,CLID_CleanAir_clock_type(id__))))
				Clock_CLID_GasPresent(id__,x__) = 
					TimeOut_1(
						GasPresent::entered -> Clock_CLID_GasPresent(id__,0)
						[]
						get_CLID_GasPresent!x__ -> Clock_CLID_GasPresent(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_GasPresent(id__,clock_type_plus(x__,1,CLID_GasPresent_clock_type(id__))))
				
				StateClocks(id__) = dbisim(Clock_CLID_CleanAir(id__,0))
				[| { terminate } |] (
				dbisim(Clock_CLID_GasPresent(id__,0))
				)
				
				stateClockSync = {|get_CLID_CleanAir,CleanAir::entered,get_CLID_GasPresent,GasPresent::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				CALL__decr(id__) 	= decrCall -> SKIP
				CALL__incr(id__) 	= incrCall -> SKIP
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = prioritise(	((
						(
							stm_ref0::D__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::cd <- command,
								stm_ref0::turn <- turn,
								stm_ref0::decrCall <- decrCall,
								stm_ref0::incrCall <- incrCall
							]]
						)
							[|{|terminate|}|]
						(
							stm_ref1::D__(id__)[[
								stm_ref1::terminate <- terminate,
								stm_ref1::gas <- gas,
								stm_ref1::detect <- detect
							]]
						)
					)
					\diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	((
						(
							stm_ref0::VS__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::cd <- command,
								stm_ref0::turn <- turn,
								stm_ref0::decrCall <- decrCall,
								stm_ref0::incrCall <- incrCall
							]]
						)
							[|{|terminate|}|]
						(
							stm_ref1::VS__(id__)[[
								stm_ref1::terminate <- terminate,
								stm_ref1::gas <- gas,
								stm_ref1::detect <- detect
							]]
						)
					)
					\diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	((
						(
							stm_ref0::O__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::cd <- command,
								stm_ref0::turn <- turn,
								stm_ref0::decrCall <- decrCall,
								stm_ref0::incrCall <- incrCall
							]]
						)
							[|{|terminate|}|]
						(
							stm_ref1::O__(id__)[[
								stm_ref1::terminate <- terminate,
								stm_ref1::gas <- gas,
								stm_ref1::detect <- detect
							]]
						)
					)
					\diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	((
						(
							stm_ref0::VS_O__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::cd <- command,
								stm_ref0::turn <- turn,
								stm_ref0::decrCall <- decrCall,
								stm_ref0::incrCall <- incrCall
							]]
						)
							[|{|terminate|}|]
						(
							stm_ref1::VS_O__(id__)[[
								stm_ref1::terminate <- terminate,
								stm_ref1::gas <- gas,
								stm_ref1::detect <- detect
							]]
						)
					)
					\diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule
