
--
-- RoboChart generator version 3.0.0.202112100958
-- Automatically generated on 04-03-2022 17:58:29
--
-- Iterated compression status: true
-- Assertions compression status: true
--

module ChemicalDetectorSoftware
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel gas: InOut
	channel turn: InOut.core_real
	channel flag: InOut
	channel siren: InOut
	channel cd: InOut.Command
	channel light: InOut.Color
	
	channel incrCall
	channel decrCall
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		gas,
		turn,
		flag,
		siren,
		cd,
		light
	,	incrCall,
		decrCall
	|}
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel gas: InOut
			channel turn: InOut.core_real
			channel command: InOut.Command
			channel detect: InOut.Chemical
			
			
			
			-- declaring call and ret events for undefined operations
			channel decrCall
			channel incrCall
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	gas,
				turn,
				command,
				detect
			,	decrCall,
				incrCall
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i1|
				              NID_Waiting
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_c, set_c, setL_c, setR_c: Command
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel cd__: NIDS.InOut.Command
				channel cd: InOut.Command
				channel turn__: NIDS.InOut.core_real
				channel turn: InOut.core_real
				
				-- Declaring call and ret events for undefined operations
				channel decrCall
				channel incrCall
				
				enterSS = {|
				i1::enter,
				Waiting::enter
				|}
				
				enteredSS = 	{|
				Waiting::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	cd,
					turn
				,	decrCall,
					incrCall
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_Waiting : core_clock_type 
				--channel increment__
				
				CLID_Waiting_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i1
					module i1
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Waiting
					module Waiting
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					CALL__decr(id__) = EDeadline(decrCall,0)
					CALL__incr(id__) = EDeadline(incrCall,0)
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = share__choice(get_c?c -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SKIP ; Waiting::enter -> SKIP))))
							 [] dbisim((cd__!NID_Waiting.in?c:{c|c <- Command, (c==Command_left)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(turn.out!(Neg(90, core_int)) -> SKIP)) ; Waiting::enter -> SKIP)))
							 [] dbisim((cd__!NID_Waiting.in?c:{c|c <- Command, (c==Command_right)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(turn.out.90 -> SKIP)) ; Waiting::enter -> SKIP)))
							 [] dbisim((cd__!NID_Waiting.in?c:{c|c <- Command, (c==Command_back)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(turn.out.180 -> SKIP)) ; Waiting::enter -> SKIP)))
							 [] dbisim((cd__!NID_Waiting.in?c:{c|c <- Command, (c==Command_faster)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__incr(
							 			id__
							 		) ; Waiting::enter -> SKIP)))
							 [] dbisim((cd__!NID_Waiting.in?c:{c|c <- Command, (c==Command_slower)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__decr(
							 			id__
							 		) ; Waiting::enter -> SKIP)))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
						)
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i1::enter,
								Waiting::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i1,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i1::D__(id__)
									   [| { share__, terminate } |] (
									   Waiting::D__(id__)
									   )
									 )
									 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in|}]]
									 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_c |} ]] 
									  [[set_c <- setL_c]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_c
									 			,setR_c
									 			|}) |]
									 ((i1::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_c |} ]]
									  [[set_c <- setR_c]]
									 )
									)[[setL_c <- set_c]]
									 [[setR_c <- set_c]]
									)
								)
								 \ hideSet)
								[[
									cd__.x____ <- cd,
									turn__.x____ <- turn
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
						 within
							(dbisim(
								sbisim(
									MachineBody(id__)
									[| {|get_CLID_Waiting,Waiting::entered,terminate|} |]
									dbisim(Clock_CLID_Waiting(id__,0))
								)\{|get_CLID_Waiting|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						((let
							getsetLocalChannels = {|get_c,set_c|}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__) =
						(dbisim(
							sbisim(
								IteratedBehaviour(id__)
								[| {|get_c,set_c,terminate|} |]
								Memory_c(Command_faster)
							)\{|get_c,set_c|}
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i1::enter,
								Waiting::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i1,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i1::VS_O__(id__)
									   [| { share__, terminate } |] (
									   Waiting::VS_O__(id__)
									   )
									 )
									 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in,cd__.NID_Waiting.in|}]]
									 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_c |} ]] 
									  [[set_c <- setL_c]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_c
									 			,setR_c
									 			|}) |]
									 ((i1::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_c |} ]]
									  [[set_c <- setR_c]]
									 )
									)[[setL_c <- set_c]]
									 [[setR_c <- set_c]]
									)
								)
								 \ hideSet)
								[[
									cd__.x____ <- cd,
									turn__.x____ <- turn
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
						 within
							(dbisim(
								sbisim(
									MachineBody_VS_O(id__)
									[| {|get_CLID_Waiting,Waiting::entered,terminate|} |]
									dbisim(Clock_CLID_Waiting(id__,0))
								)\{|get_CLID_Waiting|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {|get_c,set_c|}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__) =
						(dbisim(
							sbisim(
								IteratedBehaviour_VS_O(id__)
								[| {|get_c,set_c,terminate|} |]
								Memory_c(Command_faster)
							)\{|get_c,set_c|}
						)
						)
					
					-- END
					
					-- Memory
					-- Memory variables
					Memory_c(c) =
						get_c!c -> Memory_c(c)
						[]
						set_c?x__ -> Memory_c(x__)
						[]
						terminate -> SKIP
					
					-- varMemory process
					varMemory(id__) = Memory_c(Command_faster)
					
					getsetLocalChannels = {|get_c,set_c|}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__) = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_Waiting(id__,x__) = 
						TimeOut_1(
							Waiting::entered -> Clock_CLID_Waiting(id__,0)
							[]
							get_CLID_Waiting!x__ -> Clock_CLID_Waiting(id__,x__)
							[]
							terminate -> SKIP,Clock_CLID_Waiting(id__,clock_type_plus(x__,1,CLID_Waiting_clock_type(id__))))
					
					StateClocks(id__) = dbisim(Clock_CLID_Waiting(id__,0))
					
					stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			module stm_ref1
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i1|
				              NID_CleanAir|
				              NID_GasPresent
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel gas__: NIDS.InOut
				channel gas: InOut
				channel detect__: NIDS.InOut.Chemical
				channel detect: InOut.Chemical
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i1::enter,
				CleanAir::enter,
				GasPresent::enter
				|}
				
				enteredSS = 	{|
				CleanAir::entered,
				GasPresent::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	gas,
					detect
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_CleanAir : core_clock_type 
				channel get_CLID_GasPresent : core_clock_type 
				--channel increment__
				
				CLID_CleanAir_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_GasPresent_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i1
					module i1
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: CleanAir
					module CleanAir
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: GasPresent
					module GasPresent
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SKIP ; CleanAir::enter -> SKIP))))
							 [] dbisim((true)&(gas__!NID_CleanAir.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; GasPresent::enter -> SKIP)))
							 [] dbisim((true)&(internal__!NID_GasPresent -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(detect.out.Chemical_innocuous -> SKIP)) ; CleanAir::enter -> SKIP)))
							 [] dbisim((true)&(internal__!NID_GasPresent -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(detect.out.Chemical_anomaly -> SKIP)) ; CleanAir::enter -> SKIP)))
							 [] dbisim((true)&(internal__!NID_GasPresent -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(true&(share__choice(detect.out.Chemical_danger -> SKIP)),1);Deadline(true&(share__choice(detect.out.Chemical_danger -> SKIP)),2) ; CleanAir::enter -> SKIP)))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i1::enter,
								CleanAir::enter,
								GasPresent::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i1,gas__.NID_CleanAir.in,internal__.NID_GasPresent,internal__.NID_GasPresent,internal__.NID_GasPresent|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i1::D__(id__)
									   [| { share__, terminate } |] (
									   CleanAir::D__(id__)
									   [| { share__, terminate } |] (
									   GasPresent::D__(id__)
									   )
									   )
									 )
									 [[CleanAir::interrupt <- x__ | x__ <- {|interrupt,gas__.NID_CleanAir.in|}]]
									 [[GasPresent::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GasPresent,internal__.NID_GasPresent,internal__.NID_GasPresent|}]]
									 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i1::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									gas__.x____ <- gas,
									detect__.x____ <- detect
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_CleanAir,CleanAir::entered,get_CLID_GasPresent,GasPresent::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_CleanAir,CleanAir::entered,get_CLID_GasPresent,GasPresent::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody(id__)
											[| {|get_CLID_GasPresent,GasPresent::entered,terminate|} |]
											dbisim(Clock_CLID_GasPresent(id__,0))
										)\{|get_CLID_GasPresent|}
									)
									[| {|get_CLID_CleanAir,CleanAir::entered,terminate|} |]
									dbisim(Clock_CLID_CleanAir(id__,0))
								)\{|get_CLID_CleanAir|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__) =
						(IteratedBehaviour(id__))
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i1::enter,
								CleanAir::enter,
								GasPresent::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i1,gas__.NID_CleanAir.in,internal__.NID_GasPresent,internal__.NID_GasPresent,internal__.NID_GasPresent|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i1::VS_O__(id__)
									   [| { share__, terminate } |] (
									   CleanAir::VS_O__(id__)
									   [| { share__, terminate } |] (
									   GasPresent::VS_O__(id__)
									   )
									   )
									 )
									 [[CleanAir::interrupt <- x__ | x__ <- {|interrupt,gas__.NID_CleanAir.in|}]]
									 [[GasPresent::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GasPresent,internal__.NID_GasPresent,internal__.NID_GasPresent|}]]
									 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i1::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									gas__.x____ <- gas,
									detect__.x____ <- detect
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_CleanAir,CleanAir::entered,get_CLID_GasPresent,GasPresent::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_CleanAir,CleanAir::entered,get_CLID_GasPresent,GasPresent::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody_VS_O(id__)
											[| {|get_CLID_GasPresent,GasPresent::entered,terminate|} |]
											dbisim(Clock_CLID_GasPresent(id__,0))
										)\{|get_CLID_GasPresent|}
									)
									[| {|get_CLID_CleanAir,CleanAir::entered,terminate|} |]
									dbisim(Clock_CLID_CleanAir(id__,0))
								)\{|get_CLID_CleanAir|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__) =
						(IteratedBehaviour_VS_O(id__))
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__) = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_CleanAir(id__,x__) = 
						TimeOut_1(
							CleanAir::entered -> Clock_CLID_CleanAir(id__,0)
							[]
							get_CLID_CleanAir!x__ -> Clock_CLID_CleanAir(id__,x__)
							[]
							terminate -> SKIP,Clock_CLID_CleanAir(id__,clock_type_plus(x__,1,CLID_CleanAir_clock_type(id__))))
					Clock_CLID_GasPresent(id__,x__) = 
						TimeOut_1(
							GasPresent::entered -> Clock_CLID_GasPresent(id__,0)
							[]
							get_CLID_GasPresent!x__ -> Clock_CLID_GasPresent(id__,x__)
							[]
							terminate -> SKIP,Clock_CLID_GasPresent(id__,clock_type_plus(x__,1,CLID_GasPresent_clock_type(id__))))
					
					StateClocks(id__) = dbisim(Clock_CLID_CleanAir(id__,0))
					[| { terminate } |] (
					dbisim(Clock_CLID_GasPresent(id__,0))
					)
					
					stateClockSync = {|get_CLID_CleanAir,CleanAir::entered,get_CLID_GasPresent,GasPresent::entered|}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					CALL__decr(id__) 	= decrCall -> SKIP
					CALL__incr(id__) 	= incrCall -> SKIP
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__) = prioritise(	((
							(
								stm_ref0::D__(id__)[[
									stm_ref0::terminate <- terminate,
									stm_ref0::cd <- command,
									stm_ref0::turn <- turn,
									stm_ref0::decrCall <- decrCall,
									stm_ref0::incrCall <- incrCall
								]]
							)
								[|{|terminate|}|]
							(
								stm_ref1::D__(id__)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::gas <- gas,
									stm_ref1::detect <- detect
								]]
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__) = prioritise(	((
							(
								stm_ref0::VS__(id__)[[
									stm_ref0::terminate <- terminate,
									stm_ref0::cd <- command,
									stm_ref0::turn <- turn,
									stm_ref0::decrCall <- decrCall,
									stm_ref0::incrCall <- incrCall
								]]
							)
								[|{|terminate|}|]
							(
								stm_ref1::VS__(id__)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::gas <- gas,
									stm_ref1::detect <- detect
								]]
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__) = dbisim(prioritise(	((
							(
								stm_ref0::O__(id__)[[
									stm_ref0::terminate <- terminate,
									stm_ref0::cd <- command,
									stm_ref0::turn <- turn,
									stm_ref0::decrCall <- decrCall,
									stm_ref0::incrCall <- incrCall
								]]
							)
								[|{|terminate|}|]
							(
								stm_ref1::O__(id__)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::gas <- gas,
									stm_ref1::detect <- detect
								]]
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__) = dbisim(prioritise(	((
							(
								stm_ref0::VS_O__(id__)[[
									stm_ref0::terminate <- terminate,
									stm_ref0::cd <- command,
									stm_ref0::turn <- turn,
									stm_ref0::decrCall <- decrCall,
									stm_ref0::incrCall <- incrCall
								]]
							)
								[|{|terminate|}|]
							(
								stm_ref1::VS_O__(id__)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::gas <- gas,
									stm_ref1::detect <- detect
								]]
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
			}
	
		endmodule
		module ctrl_ref1
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel flag: InOut
			channel siren: InOut
			channel lights: InOut.Color
			channel alarm: InOut.Chemical
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	flag,
				siren,
				lights,
				alarm
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i1|
				              NID_Waiting|
				              NID_AnomalousGas|
				              NID_DangerousGas
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_c, set_c, setL_c, setR_c: Chemical
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel detect__: NIDS.InOut.Chemical
				channel detect: InOut.Chemical
				channel light__: NIDS.InOut.Color
				channel light: InOut.Color
				channel siren__: NIDS.InOut
				channel siren: InOut
				channel flag__: NIDS.InOut
				channel flag: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i1::enter,
				Waiting::enter,
				AnomalousGas::enter,
				DangerousGas::enter
				|}
				
				enteredSS = 	{|
				Waiting::entered,
				AnomalousGas::entered,
				DangerousGas::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	detect,
					light,
					siren,
					flag
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_DangerousGas : core_clock_type 
				channel get_CLID_AnomalousGas : core_clock_type 
				channel get_CLID_Waiting : core_clock_type 
				--channel increment__
				
				CLID_DangerousGas_clock_type(id__,
						          const_Signalling_flagTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_AnomalousGas_clock_type(id__,
						          const_Signalling_flagTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_Waiting_clock_type(id__,
						          const_Signalling_flagTime) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i1
					module i1
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_Signalling_flagTime) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_Signalling_flagTime) = D__(id__,
									    const_Signalling_flagTime)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Waiting
					module Waiting
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_Signalling_flagTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(light.out!Color_green -> SKIP)) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_Signalling_flagTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(light.out!Color_green -> SKIP)) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_Signalling_flagTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: AnomalousGas
					module AnomalousGas
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_Signalling_flagTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(light.out.Color_amber -> SKIP)) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_Signalling_flagTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(light.out.Color_amber -> SKIP)) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_Signalling_flagTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: DangerousGas
					module DangerousGas
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_Signalling_flagTime) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(light.out!Color_red -> SKIP));true&(share__choice(siren.out -> SKIP));SHARE_WAIT(const_Signalling_flagTime);true&(share__choice(flag.out -> SKIP)) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_Signalling_flagTime) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(light.out!Color_red -> SKIP));true&(share__choice(siren.out -> SKIP));SHARE_WAIT(const_Signalling_flagTime);true&(share__choice(flag.out -> SKIP)) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_Signalling_flagTime) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_Signalling_flagTime) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__,
										    const_Signalling_flagTime) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_Signalling_flagTime))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__,
							    const_Signalling_flagTime) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__,
										    const_Signalling_flagTime) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_Signalling_flagTime))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__,
							    const_Signalling_flagTime) = ((let
						Trans = share__choice(get_c?c -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SKIP ; Waiting::enter -> SKIP))))
							 [] dbisim((detect__!NID_Waiting.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; AnomalousGas::enter -> SKIP)))
							 [] dbisim((detect__!NID_AnomalousGas.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
							 [] dbisim((detect__!NID_Waiting.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; DangerousGas::enter -> SKIP)))
							 [] dbisim((detect__!NID_DangerousGas.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; AnomalousGas::enter -> SKIP)))
							 [] dbisim((detect__!NID_DangerousGas.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
							 [] dbisim((detect__!NID_AnomalousGas.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; DangerousGas::enter -> SKIP)))
							 [] dbisim((detect__!NID_Waiting.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
							 [] dbisim((detect__!NID_AnomalousGas.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; AnomalousGas::enter -> SKIP)))
							 [] dbisim((detect__!NID_DangerousGas.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> share__choice(set_c!c -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; DangerousGas::enter -> SKIP)))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
						)
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_Signalling_flagTime) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i1::enter,
								Waiting::enter,
								AnomalousGas::enter,
								DangerousGas::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i1,detect__.NID_Waiting.in,detect__.NID_AnomalousGas.in,detect__.NID_Waiting.in,detect__.NID_DangerousGas.in,detect__.NID_DangerousGas.in,detect__.NID_AnomalousGas.in,detect__.NID_Waiting.in,detect__.NID_AnomalousGas.in,detect__.NID_DangerousGas.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i1::D__(id__,
									   		    const_Signalling_flagTime)
									   [| { share__, terminate } |] (
									   Waiting::D__(id__,
									   		    const_Signalling_flagTime)
									   [| { share__, terminate } |] (
									   AnomalousGas::D__(id__,
									   		    const_Signalling_flagTime)
									   [| { share__, terminate } |] (
									   DangerousGas::D__(id__,
									   		    const_Signalling_flagTime)
									   )
									   )
									   )
									 )
									 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,detect__.NID_Waiting.in,detect__.NID_Waiting.in,detect__.NID_Waiting.in|}]]
									 [[AnomalousGas::interrupt <- x__ | x__ <- {|interrupt,detect__.NID_AnomalousGas.in,detect__.NID_AnomalousGas.in,detect__.NID_AnomalousGas.in|}]]
									 [[DangerousGas::interrupt <- x__ | x__ <- {|interrupt,detect__.NID_DangerousGas.in,detect__.NID_DangerousGas.in,detect__.NID_DangerousGas.in|}]]
									 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_c |} ]] 
									  [[set_c <- setL_c]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_c
									 			,setR_c
									 			|}) |]
									 ((i1::enter -> Transitions(id__,
									 		    const_Signalling_flagTime))
									  [[ share__ <- x__ | x__ <- {| share__,setL_c |} ]]
									  [[set_c <- setR_c]]
									 )
									)[[setL_c <- set_c]]
									 [[setR_c <- set_c]]
									)
								)
								 \ hideSet)
								[[
									detect__.x____ <- detect,
									light__.x____ <- light,
									siren__.x____ <- siren,
									flag__.x____ <- flag
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_Signalling_flagTime)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_Signalling_flagTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_DangerousGas,DangerousGas::entered,get_CLID_AnomalousGas,AnomalousGas::entered,get_CLID_Waiting,Waiting::entered|}
						 within
							(MachineBody(id__,
									    const_Signalling_flagTime) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_Signalling_flagTime)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__,
							    const_Signalling_flagTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_DangerousGas,DangerousGas::entered,get_CLID_AnomalousGas,AnomalousGas::entered,get_CLID_Waiting,Waiting::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													MachineBody(id__,
															    const_Signalling_flagTime)
													[| {|get_CLID_Waiting,Waiting::entered,terminate|} |]
													dbisim(Clock_CLID_Waiting(id__,0,
															          const_Signalling_flagTime))
												)\{|get_CLID_Waiting|}
											)
											[| {|get_CLID_AnomalousGas,AnomalousGas::entered,terminate|} |]
											dbisim(Clock_CLID_AnomalousGas(id__,0,
													          const_Signalling_flagTime))
										)\{|get_CLID_AnomalousGas|}
									)
									[| {|get_CLID_DangerousGas,DangerousGas::entered,terminate|} |]
									dbisim(Clock_CLID_DangerousGas(id__,0,
											          const_Signalling_flagTime))
								)\{|get_CLID_DangerousGas|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
							    const_Signalling_flagTime) = 
						((let
							getsetLocalChannels = {|get_c,set_c|}
							clockSync = {||}
						within
							(Behaviour(id__,
									    const_Signalling_flagTime) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_Signalling_flagTime) [| {terminate} |] Clocks(id__,
							 		          const_Signalling_flagTime))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__,
							    const_Signalling_flagTime) =
						(dbisim(
							sbisim(
								IteratedBehaviour(id__,
										    const_Signalling_flagTime)
								[| {|get_c,set_c,terminate|} |]
								Memory_c(Chemical_anomaly)
							)\{|get_c,set_c|}
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_Signalling_flagTime) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i1::enter,
								Waiting::enter,
								AnomalousGas::enter,
								DangerousGas::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i1,detect__.NID_Waiting.in,detect__.NID_AnomalousGas.in,detect__.NID_Waiting.in,detect__.NID_DangerousGas.in,detect__.NID_DangerousGas.in,detect__.NID_AnomalousGas.in,detect__.NID_Waiting.in,detect__.NID_AnomalousGas.in,detect__.NID_DangerousGas.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i1::VS_O__(id__,
									   		    const_Signalling_flagTime)
									   [| { share__, terminate } |] (
									   Waiting::VS_O__(id__,
									   		    const_Signalling_flagTime)
									   [| { share__, terminate } |] (
									   AnomalousGas::VS_O__(id__,
									   		    const_Signalling_flagTime)
									   [| { share__, terminate } |] (
									   DangerousGas::VS_O__(id__,
									   		    const_Signalling_flagTime)
									   )
									   )
									   )
									 )
									 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,detect__.NID_Waiting.in,detect__.NID_Waiting.in,detect__.NID_Waiting.in|}]]
									 [[AnomalousGas::interrupt <- x__ | x__ <- {|interrupt,detect__.NID_AnomalousGas.in,detect__.NID_AnomalousGas.in,detect__.NID_AnomalousGas.in|}]]
									 [[DangerousGas::interrupt <- x__ | x__ <- {|interrupt,detect__.NID_DangerousGas.in,detect__.NID_DangerousGas.in,detect__.NID_DangerousGas.in|}]]
									 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_c |} ]] 
									  [[set_c <- setL_c]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_c
									 			,setR_c
									 			|}) |]
									 ((i1::enter -> Transitions(id__,
									 		    const_Signalling_flagTime))
									  [[ share__ <- x__ | x__ <- {| share__,setL_c |} ]]
									  [[set_c <- setR_c]]
									 )
									)[[setL_c <- set_c]]
									 [[setR_c <- set_c]]
									)
								)
								 \ hideSet)
								[[
									detect__.x____ <- detect,
									light__.x____ <- light,
									siren__.x____ <- siren,
									flag__.x____ <- flag
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_Signalling_flagTime)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_Signalling_flagTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_DangerousGas,DangerousGas::entered,get_CLID_AnomalousGas,AnomalousGas::entered,get_CLID_Waiting,Waiting::entered|}
						 within
							(MachineBody_VS_O(id__,
									    const_Signalling_flagTime) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_Signalling_flagTime)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__,
							    const_Signalling_flagTime) = 
						dbisim((let
							stateClockSync = {|get_CLID_DangerousGas,DangerousGas::entered,get_CLID_AnomalousGas,AnomalousGas::entered,get_CLID_Waiting,Waiting::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													MachineBody_VS_O(id__,
															    const_Signalling_flagTime)
													[| {|get_CLID_Waiting,Waiting::entered,terminate|} |]
													dbisim(Clock_CLID_Waiting(id__,0,
															          const_Signalling_flagTime))
												)\{|get_CLID_Waiting|}
											)
											[| {|get_CLID_AnomalousGas,AnomalousGas::entered,terminate|} |]
											dbisim(Clock_CLID_AnomalousGas(id__,0,
													          const_Signalling_flagTime))
										)\{|get_CLID_AnomalousGas|}
									)
									[| {|get_CLID_DangerousGas,DangerousGas::entered,terminate|} |]
									dbisim(Clock_CLID_DangerousGas(id__,0,
											          const_Signalling_flagTime))
								)\{|get_CLID_DangerousGas|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
							    const_Signalling_flagTime) = 
						dbisim((let
							getsetLocalChannels = {|get_c,set_c|}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
									    const_Signalling_flagTime) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_Signalling_flagTime) [| {terminate} |] Clocks(id__,
							 		          const_Signalling_flagTime))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__,
							    const_Signalling_flagTime) =
						(dbisim(
							sbisim(
								IteratedBehaviour_VS_O(id__,
										    const_Signalling_flagTime)
								[| {|get_c,set_c,terminate|} |]
								Memory_c(Chemical_anomaly)
							)\{|get_c,set_c|}
						)
						)
					
					-- END
					
					-- Memory
					-- Memory variables
					Memory_c(c) =
						get_c!c -> Memory_c(c)
						[]
						set_c?x__ -> Memory_c(x__)
						[]
						terminate -> SKIP
					
					-- varMemory process
					varMemory(id__,
							    const_Signalling_flagTime) = Memory_c(Chemical_anomaly)
					
					getsetLocalChannels = {|get_c,set_c|}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_Signalling_flagTime) = STM_VS_O(id__,
							    const_Signalling_flagTime) \ localClockResets
					D__(id__,
							    const_Signalling_flagTime) = timed_priority(STM(id__,
							    const_Signalling_flagTime) \ union(internal_events,localClockResets))
					O__(id__,
							    const_Signalling_flagTime) = dbisim(D__(id__,
							    const_Signalling_flagTime))
					VS__(id__,
							    const_Signalling_flagTime) = FVS__(id__,
							    const_Signalling_flagTime)
					VS_O__(id__,
							    const_Signalling_flagTime) = dbisim(FVS__(id__,
							    const_Signalling_flagTime))
					HEXT__(id__,
							    const_Signalling_flagTime) = O__(id__,
							    const_Signalling_flagTime) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_Signalling_flagTime) = dbisim(timed_priority(STM(id__,
							    const_Signalling_flagTime) \ internal_events))
					HUP__(id__,
							    const_Signalling_flagTime) = timed_priority(O__(id__,
							    const_Signalling_flagTime) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__,
							          const_Signalling_flagTime) = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_DangerousGas(id__,x__,
							          const_Signalling_flagTime) = 
						TimeOut_1(
							DangerousGas::entered -> Clock_CLID_DangerousGas(id__,0,
									          const_Signalling_flagTime)
							[]
							get_CLID_DangerousGas!x__ -> Clock_CLID_DangerousGas(id__,x__,
									          const_Signalling_flagTime)
							[]
							terminate -> SKIP,Clock_CLID_DangerousGas(id__,clock_type_plus(x__,1,CLID_DangerousGas_clock_type(id__,
									          const_Signalling_flagTime)),
									          const_Signalling_flagTime))
					Clock_CLID_AnomalousGas(id__,x__,
							          const_Signalling_flagTime) = 
						TimeOut_1(
							AnomalousGas::entered -> Clock_CLID_AnomalousGas(id__,0,
									          const_Signalling_flagTime)
							[]
							get_CLID_AnomalousGas!x__ -> Clock_CLID_AnomalousGas(id__,x__,
									          const_Signalling_flagTime)
							[]
							terminate -> SKIP,Clock_CLID_AnomalousGas(id__,clock_type_plus(x__,1,CLID_AnomalousGas_clock_type(id__,
									          const_Signalling_flagTime)),
									          const_Signalling_flagTime))
					Clock_CLID_Waiting(id__,x__,
							          const_Signalling_flagTime) = 
						TimeOut_1(
							Waiting::entered -> Clock_CLID_Waiting(id__,0,
									          const_Signalling_flagTime)
							[]
							get_CLID_Waiting!x__ -> Clock_CLID_Waiting(id__,x__,
									          const_Signalling_flagTime)
							[]
							terminate -> SKIP,Clock_CLID_Waiting(id__,clock_type_plus(x__,1,CLID_Waiting_clock_type(id__,
									          const_Signalling_flagTime)),
									          const_Signalling_flagTime))
					
					StateClocks(id__,
							          const_Signalling_flagTime) = dbisim(Clock_CLID_DangerousGas(id__,0,
							          const_Signalling_flagTime))
					[| { terminate } |] (
					dbisim(Clock_CLID_AnomalousGas(id__,0,
							          const_Signalling_flagTime))
					[| { terminate } |] (
					dbisim(Clock_CLID_Waiting(id__,0,
							          const_Signalling_flagTime))
					)
					)
					
					stateClockSync = {|get_CLID_DangerousGas,DangerousGas::entered,get_CLID_AnomalousGas,AnomalousGas::entered,get_CLID_Waiting,Waiting::entered|}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__,
							    const_Signalling_flagTime) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__,
							    const_Microcontroller_stm_ref0_flagTime) = prioritise(	((
							let
								const_Signalling_flagTime = const_Microcontroller_stm_ref0_flagTime
							within 
							stm_ref0::D__(id__,
									    const_Signalling_flagTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::detect <- alarm,
								stm_ref0::flag <- flag,
								stm_ref0::siren <- siren,
								stm_ref0::light <- lights
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__,
							    const_Microcontroller_stm_ref0_flagTime) = prioritise(	((
							let
								const_Signalling_flagTime = const_Microcontroller_stm_ref0_flagTime
							within 
							stm_ref0::VS__(id__,
									    const_Signalling_flagTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::detect <- alarm,
								stm_ref0::flag <- flag,
								stm_ref0::siren <- siren,
								stm_ref0::light <- lights
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__,
							    const_Microcontroller_stm_ref0_flagTime) = dbisim(prioritise(	((
							let
								const_Signalling_flagTime = const_Microcontroller_stm_ref0_flagTime
							within 
							stm_ref0::O__(id__,
									    const_Signalling_flagTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::detect <- alarm,
								stm_ref0::flag <- flag,
								stm_ref0::siren <- siren,
								stm_ref0::light <- lights
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__,
							    const_Microcontroller_stm_ref0_flagTime) = dbisim(prioritise(	((
							let
								const_Signalling_flagTime = const_Microcontroller_stm_ref0_flagTime
							within 
							stm_ref0::VS_O__(id__,
									    const_Signalling_flagTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::detect <- alarm,
								stm_ref0::flag <- flag,
								stm_ref0::siren <- siren,
								stm_ref0::light <- lights
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__,
							    const_Microcontroller_stm_ref0_flagTime) = O__(id__,
							    const_Microcontroller_stm_ref0_flagTime) [|shared_variable_events|] SKIP			
			}
	
		endmodule
	
	Timed(OneStep) {
		visibleMemoryEvents = {||}
		
		-- declaring module memory
		Memory(id__) = SKIP
		
		D__(id__,
				    const_Microcontroller_stm_ref0_flagTime) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::D__(id__)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::turn <- turn,
									ctrl_ref0::gas <- gas,
									ctrl_ref0::command <- cd,
									ctrl_ref0::decrCall <- decrCall,
									ctrl_ref0::incrCall <- incrCall
								]]
							)
								[|{|terminate, ctrl_ref0::detect|}|]
							(
								ctrl_ref1::D__(id__,
										    const_Microcontroller_stm_ref0_flagTime)[[
									ctrl_ref1::terminate <- terminate,
									ctrl_ref1::alarm.in <- ctrl_ref0::detect.out,
									ctrl_ref1::alarm.out <- ctrl_ref0::detect.in,
									ctrl_ref1::flag <- flag,
									ctrl_ref1::siren <- siren,
									ctrl_ref1::lights <- light
								]]
							)
						)
						\
						diff(
							{|terminate, ctrl_ref0::detect|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- visible state equivalent
		
		VS__(id__,
				    const_Microcontroller_stm_ref0_flagTime) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::VS__(id__)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::turn <- turn,
									ctrl_ref0::gas <- gas,
									ctrl_ref0::command <- cd,
									ctrl_ref0::decrCall <- decrCall,
									ctrl_ref0::incrCall <- incrCall
								]]
							)
								[|{|terminate, ctrl_ref0::detect|}|]
							(
								ctrl_ref1::VS__(id__,
										    const_Microcontroller_stm_ref0_flagTime)[[
									ctrl_ref1::terminate <- terminate,
									ctrl_ref1::alarm.in <- ctrl_ref0::detect.out,
									ctrl_ref1::alarm.out <- ctrl_ref0::detect.in,
									ctrl_ref1::flag <- flag,
									ctrl_ref1::siren <- siren,
									ctrl_ref1::lights <- light
								]]
							)
						)
						\
						diff(
							{|terminate, ctrl_ref0::detect|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- O version (optimised)
		
		O__(id__,
				    const_Microcontroller_stm_ref0_flagTime) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::O__(id__)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::turn <- turn,
									ctrl_ref0::gas <- gas,
									ctrl_ref0::command <- cd,
									ctrl_ref0::decrCall <- decrCall,
									ctrl_ref0::incrCall <- incrCall
								]]
							)
								[|{|terminate, ctrl_ref0::detect|}|]
							(
								ctrl_ref1::O__(id__,
										    const_Microcontroller_stm_ref0_flagTime)[[
									ctrl_ref1::terminate <- terminate,
									ctrl_ref1::alarm.in <- ctrl_ref0::detect.out,
									ctrl_ref1::alarm.out <- ctrl_ref0::detect.in,
									ctrl_ref1::flag <- flag,
									ctrl_ref1::siren <- siren,
									ctrl_ref1::lights <- light
								]]
							)
						)
						\
						diff(
							{|terminate, ctrl_ref0::detect|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- visible state optimised equivalent
		
		VS_O__(id__,
				    const_Microcontroller_stm_ref0_flagTime) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::VS_O__(id__)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::turn <- turn,
									ctrl_ref0::gas <- gas,
									ctrl_ref0::command <- cd,
									ctrl_ref0::decrCall <- decrCall,
									ctrl_ref0::incrCall <- incrCall
								]]
							)
								[|{|terminate, ctrl_ref0::detect|}|]
							(
								ctrl_ref1::VS_O__(id__,
										    const_Microcontroller_stm_ref0_flagTime)[[
									ctrl_ref1::terminate <- terminate,
									ctrl_ref1::alarm.in <- ctrl_ref0::detect.out,
									ctrl_ref1::alarm.out <- ctrl_ref0::detect.in,
									ctrl_ref1::flag <- flag,
									ctrl_ref1::siren <- siren,
									ctrl_ref1::lights <- light
								]]
							)
						)
						\
						diff(
							{|terminate, ctrl_ref0::detect|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- O version (optimised) with visible assignments
		
		AS_O__(id__,
				    const_Microcontroller_stm_ref0_flagTime) = dbisim(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::O__(id__)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::turn <- turn,
									ctrl_ref0::gas <- gas,
									ctrl_ref0::command <- cd,
									ctrl_ref0::decrCall <- decrCall,
									ctrl_ref0::incrCall <- incrCall
								]]
							)
								[|{|terminate, ctrl_ref0::detect|}|]
							(
								ctrl_ref1::O__(id__,
										    const_Microcontroller_stm_ref0_flagTime)[[
									ctrl_ref1::terminate <- terminate,
									ctrl_ref1::alarm.in <- ctrl_ref0::detect.out,
									ctrl_ref1::alarm.out <- ctrl_ref0::detect.in,
									ctrl_ref1::flag <- flag,
									ctrl_ref1::siren <- siren,
									ctrl_ref1::lights <- light
								]]
							)
						)
						\
						diff(
							{|terminate, ctrl_ref0::detect|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		)
	}
	
endmodule
