transparent normal
include "file_System_coreassertions.csp"
ID_P_Spec1 = {1..1}
ID_P_GasLight = {1..1}
ID_P_Init = {1..1}
ID_P_Commands = {1..1}
datatype alphabet_P_Spec1 = P_Commands_P_Spec1_t_alphabet | InitialNode0_P_Spec1_t_alphabet| P_GasLight_P_Spec1_t_alphabet| ForkNode2_P_Spec1_t_alphabet
robochart_P_Spec1 = "file_System_coreassertions.csp"
robochart_alphabet_P_Spec1 = {|ChemicalDetectorSoftware::light.out.Color_green,ChemicalDetectorSoftware::gas.in|}
countCe_P_Spec1 = {1..3}
countUpdate_P_Spec1 = {1..2}
countClear_P_Spec1 = {1..0}
limiteUpdate_P_Spec1 = {(1)..(1)}
channel startActivity_P_Spec1: ID_P_Spec1
channel endActivity_P_Spec1: ID_P_Spec1
channel ce_P_Spec1: ID_P_Spec1.countCe_P_Spec1
channel clear_P_Spec1: ID_P_Spec1.countClear_P_Spec1
channel update_P_Spec1: ID_P_Spec1.countUpdate_P_Spec1.limiteUpdate_P_Spec1
channel endDiagram_P_Spec1: ID_P_Spec1
channel dc

alphabet_Astah_P_Spec1 = {| startActivity_P_Spec1, endActivity_P_Spec1, ce_P_Spec1, clear_P_Spec1, update_P_Spec1, endDiagram_P_Spec1, dc |}

MAIN = normal(P_Spec1(1))
END_DIAGRAM_P_Spec1(id) = endDiagram_P_Spec1.id -> SKIP
P_Spec1(ID_P_Spec1) = (Internal_P_Spec1(ID_P_Spec1) [|{|update_P_Spec1,clear_P_Spec1,endDiagram_P_Spec1|}|] TokenManager_P_Spec1_t(ID_P_Spec1,0,0))
Internal_P_Spec1(id) = StartActivity_P_Spec1(id); Node_P_Spec1(id); EndActivity_P_Spec1(id)
StartActivity_P_Spec1(id) = startActivity_P_Spec1.id -> SKIP
EndActivity_P_Spec1(id) = endActivity_P_Spec1.id -> SKIP
AlphabetDiagram_P_Spec1(id,P_Commands_P_Spec1_t_alphabet) = {|ce_P_Spec1.id.2,endDiagram_P_Spec1.id|}
AlphabetDiagram_P_Spec1(id,InitialNode0_P_Spec1_t_alphabet) = {|ce_P_Spec1.id.1,endDiagram_P_Spec1.id|}
AlphabetDiagram_P_Spec1(id,P_GasLight_P_Spec1_t_alphabet) = {|ce_P_Spec1.id.3,endDiagram_P_Spec1.id|}
AlphabetDiagram_P_Spec1(id,ForkNode2_P_Spec1_t_alphabet) = {|ce_P_Spec1.id.1,ce_P_Spec1.id.2,ce_P_Spec1.id.3,endDiagram_P_Spec1.id|}
AlphabetDiagram_P_Spec1_t(id) = union(union(union(AlphabetDiagram_P_Spec1(id,P_Commands_P_Spec1_t_alphabet),AlphabetDiagram_P_Spec1(id,InitialNode0_P_Spec1_t_alphabet)),AlphabetDiagram_P_Spec1(id,P_GasLight_P_Spec1_t_alphabet)),AlphabetDiagram_P_Spec1(id,ForkNode2_P_Spec1_t_alphabet))

ProcessDiagram_P_Spec1(id,P_Commands_P_Spec1_t_alphabet) = normal(P_Commands_P_Spec1_t(id))
ProcessDiagram_P_Spec1(id,InitialNode0_P_Spec1_t_alphabet) = normal(InitialNode0_P_Spec1_t(id))
ProcessDiagram_P_Spec1(id,P_GasLight_P_Spec1_t_alphabet) = normal(P_GasLight_P_Spec1_t(id))
ProcessDiagram_P_Spec1(id,ForkNode2_P_Spec1_t_alphabet) = normal(ForkNode2_P_Spec1_t(id))
InitialNode0_P_Spec1(id) = update_P_Spec1.id.1!(1-0) -> ((ce_P_Spec1.id.1 -> SKIP))
InitialNode0_P_Spec1_t(id) = InitialNode0_P_Spec1(id) /\ END_DIAGRAM_P_Spec1(id)
ForkNode2_P_Spec1(id) = ce_P_Spec1.id.1 -> update_P_Spec1.id.2!(2-1) -> ((ce_P_Spec1.id.2 -> SKIP) ||| (ce_P_Spec1.id.3 -> SKIP)); ForkNode2_P_Spec1(id)
ForkNode2_P_Spec1_t(id) = ForkNode2_P_Spec1(id) /\ END_DIAGRAM_P_Spec1(id)
P_Commands_P_Spec1(id) = ((ce_P_Spec1.id.2 -> SKIP)); normal(P_Commands(1));P_Commands_P_Spec1(id)
P_Commands_P_Spec1_t(id) = P_Commands_P_Spec1(id) /\ END_DIAGRAM_P_Spec1(id)
P_GasLight_P_Spec1(id) = ((ce_P_Spec1.id.3 -> SKIP)); normal(P_GasLight(1));P_GasLight_P_Spec1(id)
P_GasLight_P_Spec1_t(id) = P_GasLight_P_Spec1(id) /\ END_DIAGRAM_P_Spec1(id)
AlphabetMemP_GasLight_P_Spec1(id) = {|endDiagram_P_Spec1.id|}
AlphabetMemP_Commands_P_Spec1(id) = {|endDiagram_P_Spec1.id|}

TokenManager_P_Spec1(id,x,init) = update_P_Spec1.id?c?y:limiteUpdate_P_Spec1 -> x+y < 10 & x+y > -10 & TokenManager_P_Spec1(id,x+y,1) [] clear_P_Spec1.id?c -> endDiagram_P_Spec1.id -> SKIP [] x == 0 & init == 1 & endDiagram_P_Spec1.id -> SKIP
TokenManager_P_Spec1_t(id,x,init) = TokenManager_P_Spec1(id,x,init)

datatype alphabet_P_Commands = InitialNode0_P_Commands_t_alphabet | accept_cd_1_P_Commands_t_alphabet| decrCall_1_P_Commands_t_alphabet| DecisionNode_MergeNode0_P_Commands_t_alphabet| incrCall_1_P_Commands_t_alphabet| signal_turn_1_P_Commands_t_alphabet| DecisionNode_MergeNode2_P_Commands_t_alphabet| DecisionNode_MergeNode3_P_Commands_t_alphabet
core_int_P_Commands = {(-2)..2}
robochart_P_Commands = "file_System.csp"
robochart_alphabet_P_Commands = {|ChemicalDetectorSoftware::cd.in,ChemicalDetectorSoftware::turn.out,ChemicalDetectorSoftware::incrCall,ChemicalDetectorSoftware::decrCall|}
cmd_P_Commands = {Command_faster,Command_slower,Command_left,Command_right,Command_back}
countCe_P_Commands = {1..10}
countUpdate_P_Commands = {1..1}
countClear_P_Commands = {1..0}
limiteUpdate_P_Commands = {(1)..(1)}
channel startActivity_P_Commands: ID_P_Commands
channel endActivity_P_Commands: ID_P_Commands
channel ce_P_Commands: ID_P_Commands.countCe_P_Commands
channel clear_P_Commands: ID_P_Commands.countClear_P_Commands
channel update_P_Commands: ID_P_Commands.countUpdate_P_Commands.limiteUpdate_P_Commands
channel endDiagram_P_Commands: ID_P_Commands

alphabet_Astah_P_Commands = {| startActivity_P_Commands, endActivity_P_Commands, ce_P_Commands, clear_P_Commands, update_P_Commands, endDiagram_P_Commands |}

END_DIAGRAM_P_Commands(id) = endDiagram_P_Commands.id -> SKIP
P_Commands(ID_P_Commands) = (Internal_P_Commands(ID_P_Commands) [|{|update_P_Commands,clear_P_Commands,endDiagram_P_Commands|}|] TokenManager_P_Commands_t(ID_P_Commands,0,0))
Internal_P_Commands(id) = StartActivity_P_Commands(id); Node_P_Commands(id); EndActivity_P_Commands(id)
StartActivity_P_Commands(id) = startActivity_P_Commands.id -> SKIP
EndActivity_P_Commands(id) = endActivity_P_Commands.id -> SKIP
AlphabetDiagram_P_Commands(id,InitialNode0_P_Commands_t_alphabet) = {|ce_P_Commands.id.1,endDiagram_P_Commands.id|}
AlphabetDiagram_P_Commands(id,accept_cd_1_P_Commands_t_alphabet) = {|ce_P_Commands.id.3,ce_P_Commands.id.4,endDiagram_P_Commands.id|}
AlphabetDiagram_P_Commands(id,decrCall_1_P_Commands_t_alphabet) = {|ce_P_Commands.id.7,ce_P_Commands.id.10,endDiagram_P_Commands.id|}
AlphabetDiagram_P_Commands(id,DecisionNode_MergeNode0_P_Commands_t_alphabet) = {|ce_P_Commands.id.1,ce_P_Commands.id.2,ce_P_Commands.id.3,endDiagram_P_Commands.id|}
AlphabetDiagram_P_Commands(id,incrCall_1_P_Commands_t_alphabet) = {|ce_P_Commands.id.5,ce_P_Commands.id.9,endDiagram_P_Commands.id|}
AlphabetDiagram_P_Commands(id,signal_turn_1_P_Commands_t_alphabet) = {|ce_P_Commands.id.6,ce_P_Commands.id.8,endDiagram_P_Commands.id|}
AlphabetDiagram_P_Commands(id,DecisionNode_MergeNode2_P_Commands_t_alphabet) = {|ce_P_Commands.id.4,dc,ce_P_Commands.id.5,ce_P_Commands.id.6,ce_P_Commands.id.7,endDiagram_P_Commands.id|}
AlphabetDiagram_P_Commands(id,DecisionNode_MergeNode3_P_Commands_t_alphabet) = {|ce_P_Commands.id.9,ce_P_Commands.id.8,ce_P_Commands.id.10,ce_P_Commands.id.2,endDiagram_P_Commands.id|}
AlphabetDiagram_P_Commands_t(id) = union(union(union(union(union(union(union(AlphabetDiagram_P_Commands(id,InitialNode0_P_Commands_t_alphabet),AlphabetDiagram_P_Commands(id,accept_cd_1_P_Commands_t_alphabet)),AlphabetDiagram_P_Commands(id,decrCall_1_P_Commands_t_alphabet)),AlphabetDiagram_P_Commands(id,DecisionNode_MergeNode0_P_Commands_t_alphabet)),AlphabetDiagram_P_Commands(id,incrCall_1_P_Commands_t_alphabet)),AlphabetDiagram_P_Commands(id,signal_turn_1_P_Commands_t_alphabet)),AlphabetDiagram_P_Commands(id,DecisionNode_MergeNode2_P_Commands_t_alphabet)),AlphabetDiagram_P_Commands(id,DecisionNode_MergeNode3_P_Commands_t_alphabet))

ProcessDiagram_P_Commands(id,InitialNode0_P_Commands_t_alphabet) = normal(InitialNode0_P_Commands_t(id))
ProcessDiagram_P_Commands(id,accept_cd_1_P_Commands_t_alphabet) = normal(accept_cd_1_P_Commands_t(id))
ProcessDiagram_P_Commands(id,decrCall_1_P_Commands_t_alphabet) = normal(decrCall_1_P_Commands_t(id))
ProcessDiagram_P_Commands(id,DecisionNode_MergeNode0_P_Commands_t_alphabet) = normal(DecisionNode_MergeNode0_P_Commands_t(id))
ProcessDiagram_P_Commands(id,incrCall_1_P_Commands_t_alphabet) = normal(incrCall_1_P_Commands_t(id))
ProcessDiagram_P_Commands(id,signal_turn_1_P_Commands_t_alphabet) = normal(signal_turn_1_P_Commands_t(id))
ProcessDiagram_P_Commands(id,DecisionNode_MergeNode2_P_Commands_t_alphabet) = normal(DecisionNode_MergeNode2_P_Commands_t(id))
ProcessDiagram_P_Commands(id,DecisionNode_MergeNode3_P_Commands_t_alphabet) = normal(DecisionNode_MergeNode3_P_Commands_t(id))
InitialNode0_P_Commands(id) = update_P_Commands.id.1!(1-0) -> ((ce_P_Commands.id.1 -> SKIP))
InitialNode0_P_Commands_t(id) = InitialNode0_P_Commands(id) /\ END_DIAGRAM_P_Commands(id)
DecisionNode_MergeNode0_P_Commands(id) = ((ce_P_Commands.id.1 -> SKIP) [] (ce_P_Commands.id.2 -> SKIP)); ce_P_Commands.id.3 -> DecisionNode_MergeNode0_P_Commands(id)
DecisionNode_MergeNode0_P_Commands_t(id) = DecisionNode_MergeNode0_P_Commands(id) /\ END_DIAGRAM_P_Commands(id)
accept_cd_1_P_Commands(id) = ((ce_P_Commands.id.3 -> SKIP)); ChemicalDetectorSoftware::cd.in?x -> ((ce_P_Commands.id.4 -> SKIP)); accept_cd_1_P_Commands(id)
accept_cd_1_P_Commands_t(id) = accept_cd_1_P_Commands(id) /\ END_DIAGRAM_P_Commands(id)
DecisionNode_MergeNode2_P_Commands(id) = ce_P_Commands.id.4 -> ((dc -> ce_P_Commands.id.5 -> SKIP) [] (dc -> ce_P_Commands.id.6 -> SKIP) [] (dc -> ce_P_Commands.id.7 -> SKIP)); DecisionNode_MergeNode2_P_Commands(id)
DecisionNode_MergeNode2_P_Commands_t(id) = DecisionNode_MergeNode2_P_Commands(id) /\ END_DIAGRAM_P_Commands(id) \{|dc|}
signal_turn_1_P_Commands(id) = ((ce_P_Commands.id.6 -> SKIP)); ChemicalDetectorSoftware::turn.out?d -> ((ce_P_Commands.id.8 -> SKIP)); signal_turn_1_P_Commands(id)
signal_turn_1_P_Commands_t(id) = signal_turn_1_P_Commands(id) /\ END_DIAGRAM_P_Commands(id)
incrCall_1_P_Commands(id) = ((ce_P_Commands.id.5 -> SKIP)); ChemicalDetectorSoftware::incrCall -> ((ce_P_Commands.id.9 -> SKIP)); incrCall_1_P_Commands(id)
incrCall_1_P_Commands_t(id) = incrCall_1_P_Commands(id) /\ END_DIAGRAM_P_Commands(id)
decrCall_1_P_Commands(id) = ((ce_P_Commands.id.7 -> SKIP)); ChemicalDetectorSoftware::decrCall -> ((ce_P_Commands.id.10 -> SKIP)); decrCall_1_P_Commands(id)
decrCall_1_P_Commands_t(id) = decrCall_1_P_Commands(id) /\ END_DIAGRAM_P_Commands(id)
DecisionNode_MergeNode3_P_Commands(id) = ((ce_P_Commands.id.9 -> SKIP) [] (ce_P_Commands.id.8 -> SKIP) [] (ce_P_Commands.id.10 -> SKIP)); ce_P_Commands.id.2 -> DecisionNode_MergeNode3_P_Commands(id)
DecisionNode_MergeNode3_P_Commands_t(id) = DecisionNode_MergeNode3_P_Commands(id) /\ END_DIAGRAM_P_Commands(id)

TokenManager_P_Commands(id,x,init) = update_P_Commands.id?c?y:limiteUpdate_P_Commands -> x+y < 10 & x+y > -10 & TokenManager_P_Commands(id,x+y,1) [] clear_P_Commands.id?c -> endDiagram_P_Commands.id -> SKIP [] x == 0 & init == 1 & endDiagram_P_Commands.id -> SKIP
TokenManager_P_Commands_t(id,x,init) = TokenManager_P_Commands(id,x,init)

datatype alphabet_P_GasLight = DecisionNode_MergeNode0_P_GasLight_t_alphabet | P_Init_P_GasLight_t_alphabet| signal_light_Color_amber__1_P_GasLight_t_alphabet| InitialNode0_P_GasLight_t_alphabet| signal_light_Color_green__1_P_GasLight_t_alphabet| JoinNode2_P_GasLight_t_alphabet| ForkNode2_P_GasLight_t_alphabet| signal_siren_1_P_GasLight_t_alphabet| DecisionNode_MergeNode1_P_GasLight_t_alphabet| DecisionNode_MergeNode2_P_GasLight_t_alphabet| accept_gas_1_P_GasLight_t_alphabet| signal_light_Color_red__1_P_GasLight_t_alphabet| signal_flag_1_P_GasLight_t_alphabet
robochart_P_GasLight = "file_System_coreassertions.csp"
robochart_alphabet_P_GasLight = {|ChemicalDetectorSoftware::light.out.Color_red,ChemicalDetectorSoftware::light.out.Color_green,ChemicalDetectorSoftware::light.out.Color_amber,ChemicalDetectorSoftware::siren.out,ChemicalDetectorSoftware::flag.out,ChemicalDetectorSoftware::gas.in|}
countCe_P_GasLight = {1..16}
countUpdate_P_GasLight = {1..3}
countClear_P_GasLight = {1..0}
limiteUpdate_P_GasLight = {(-1)..(1)}
channel startActivity_P_GasLight: ID_P_GasLight
channel endActivity_P_GasLight: ID_P_GasLight
channel ce_P_GasLight: ID_P_GasLight.countCe_P_GasLight
channel clear_P_GasLight: ID_P_GasLight.countClear_P_GasLight
channel update_P_GasLight: ID_P_GasLight.countUpdate_P_GasLight.limiteUpdate_P_GasLight
channel endDiagram_P_GasLight: ID_P_GasLight

alphabet_Astah_P_GasLight = {| startActivity_P_GasLight, endActivity_P_GasLight, ce_P_GasLight, clear_P_GasLight, update_P_GasLight, endDiagram_P_GasLight |}

END_DIAGRAM_P_GasLight(id) = endDiagram_P_GasLight.id -> SKIP
P_GasLight(ID_P_GasLight) = (Internal_P_GasLight(ID_P_GasLight) [|{|update_P_GasLight,clear_P_GasLight,endDiagram_P_GasLight|}|] TokenManager_P_GasLight_t(ID_P_GasLight,0,0))
Internal_P_GasLight(id) = StartActivity_P_GasLight(id); Node_P_GasLight(id); EndActivity_P_GasLight(id)
StartActivity_P_GasLight(id) = startActivity_P_GasLight.id -> SKIP
EndActivity_P_GasLight(id) = endActivity_P_GasLight.id -> SKIP
AlphabetDiagram_P_GasLight(id,DecisionNode_MergeNode0_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.3,ce_P_GasLight.id.16,ce_P_GasLight.id.8,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,P_Init_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.4,ce_P_GasLight.id.16,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,signal_light_Color_amber__1_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.12,ce_P_GasLight.id.13,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,InitialNode0_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.4,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,signal_light_Color_green__1_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.6,ce_P_GasLight.id.7,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,JoinNode2_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.1,ce_P_GasLight.id.2,ce_P_GasLight.id.3,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,ForkNode2_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.8,ce_P_GasLight.id.9,ce_P_GasLight.id.5,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,signal_siren_1_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.11,ce_P_GasLight.id.15,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,DecisionNode_MergeNode1_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.9,dc,ce_P_GasLight.id.10,ce_P_GasLight.id.6,ce_P_GasLight.id.12,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,DecisionNode_MergeNode2_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.7,ce_P_GasLight.id.13,ce_P_GasLight.id.14,ce_P_GasLight.id.1,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,accept_gas_1_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.5,ce_P_GasLight.id.2,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,signal_light_Color_red__1_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.10,ce_P_GasLight.id.11,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight(id,signal_flag_1_P_GasLight_t_alphabet) = {|ce_P_GasLight.id.15,ce_P_GasLight.id.14,endDiagram_P_GasLight.id|}
AlphabetDiagram_P_GasLight_t(id) = union(union(union(union(union(union(union(union(union(union(union(union(AlphabetDiagram_P_GasLight(id,DecisionNode_MergeNode0_P_GasLight_t_alphabet),AlphabetDiagram_P_GasLight(id,P_Init_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,signal_light_Color_amber__1_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,InitialNode0_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,signal_light_Color_green__1_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,JoinNode2_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,ForkNode2_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,signal_siren_1_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,DecisionNode_MergeNode1_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,DecisionNode_MergeNode2_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,accept_gas_1_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,signal_light_Color_red__1_P_GasLight_t_alphabet)),AlphabetDiagram_P_GasLight(id,signal_flag_1_P_GasLight_t_alphabet))

ProcessDiagram_P_GasLight(id,DecisionNode_MergeNode0_P_GasLight_t_alphabet) = normal(DecisionNode_MergeNode0_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,P_Init_P_GasLight_t_alphabet) = normal(P_Init_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,signal_light_Color_amber__1_P_GasLight_t_alphabet) = normal(signal_light_Color_amber__1_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,InitialNode0_P_GasLight_t_alphabet) = normal(InitialNode0_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,signal_light_Color_green__1_P_GasLight_t_alphabet) = normal(signal_light_Color_green__1_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,JoinNode2_P_GasLight_t_alphabet) = normal(JoinNode2_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,ForkNode2_P_GasLight_t_alphabet) = normal(ForkNode2_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,signal_siren_1_P_GasLight_t_alphabet) = normal(signal_siren_1_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,DecisionNode_MergeNode1_P_GasLight_t_alphabet) = normal(DecisionNode_MergeNode1_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,DecisionNode_MergeNode2_P_GasLight_t_alphabet) = normal(DecisionNode_MergeNode2_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,accept_gas_1_P_GasLight_t_alphabet) = normal(accept_gas_1_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,signal_light_Color_red__1_P_GasLight_t_alphabet) = normal(signal_light_Color_red__1_P_GasLight_t(id))
ProcessDiagram_P_GasLight(id,signal_flag_1_P_GasLight_t_alphabet) = normal(signal_flag_1_P_GasLight_t(id))
JoinNode2_P_GasLight(id) = ((ce_P_GasLight.id.1 -> SKIP) ||| (ce_P_GasLight.id.2 -> SKIP)); update_P_GasLight.id.1!(1-2) -> ((ce_P_GasLight.id.3 -> SKIP)); JoinNode2_P_GasLight(id)
JoinNode2_P_GasLight_t(id) = (JoinNode2_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id))
InitialNode0_P_GasLight(id) = update_P_GasLight.id.2!(1-0) -> ((ce_P_GasLight.id.4 -> SKIP))
InitialNode0_P_GasLight_t(id) = InitialNode0_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
accept_gas_1_P_GasLight(id) = ((ce_P_GasLight.id.5 -> SKIP)); ChemicalDetectorSoftware::gas.in -> ((ce_P_GasLight.id.2 -> SKIP)); accept_gas_1_P_GasLight(id)
accept_gas_1_P_GasLight_t(id) = accept_gas_1_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
signal_light_Color_green__1_P_GasLight(id) = ((ce_P_GasLight.id.6 -> SKIP)); ChemicalDetectorSoftware::light.out.Color_green -> ((ce_P_GasLight.id.7 -> SKIP)); signal_light_Color_green__1_P_GasLight(id)
signal_light_Color_green__1_P_GasLight_t(id) = signal_light_Color_green__1_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
ForkNode2_P_GasLight(id) = ce_P_GasLight.id.8 -> update_P_GasLight.id.3!(2-1) -> ((ce_P_GasLight.id.9 -> SKIP) ||| (ce_P_GasLight.id.5 -> SKIP)); ForkNode2_P_GasLight(id)
ForkNode2_P_GasLight_t(id) = ForkNode2_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
signal_light_Color_red__1_P_GasLight(id) = ((ce_P_GasLight.id.10 -> SKIP)); ChemicalDetectorSoftware::light.out.Color_red -> ((ce_P_GasLight.id.11 -> SKIP)); signal_light_Color_red__1_P_GasLight(id)
signal_light_Color_red__1_P_GasLight_t(id) = signal_light_Color_red__1_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
signal_light_Color_amber__1_P_GasLight(id) = ((ce_P_GasLight.id.12 -> SKIP)); ChemicalDetectorSoftware::light.out.Color_amber -> ((ce_P_GasLight.id.13 -> SKIP)); signal_light_Color_amber__1_P_GasLight(id)
signal_light_Color_amber__1_P_GasLight_t(id) = signal_light_Color_amber__1_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
DecisionNode_MergeNode1_P_GasLight(id) = ce_P_GasLight.id.9 -> ((dc -> ce_P_GasLight.id.10 -> SKIP) [] (dc -> ce_P_GasLight.id.6 -> SKIP) [] (dc -> ce_P_GasLight.id.12 -> SKIP)); DecisionNode_MergeNode1_P_GasLight(id)
DecisionNode_MergeNode1_P_GasLight_t(id) = DecisionNode_MergeNode1_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id) \{|dc|}
DecisionNode_MergeNode2_P_GasLight(id) = ((ce_P_GasLight.id.7 -> SKIP) [] (ce_P_GasLight.id.13 -> SKIP) [] (ce_P_GasLight.id.14 -> SKIP)); ce_P_GasLight.id.1 -> DecisionNode_MergeNode2_P_GasLight(id)
DecisionNode_MergeNode2_P_GasLight_t(id) = DecisionNode_MergeNode2_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
signal_siren_1_P_GasLight(id) = ((ce_P_GasLight.id.11 -> SKIP)); ChemicalDetectorSoftware::siren.out -> ((ce_P_GasLight.id.15 -> SKIP)); signal_siren_1_P_GasLight(id)
signal_siren_1_P_GasLight_t(id) = signal_siren_1_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
signal_flag_1_P_GasLight(id) = ((ce_P_GasLight.id.15 -> SKIP)); ChemicalDetectorSoftware::flag.out -> ((ce_P_GasLight.id.14 -> SKIP)); signal_flag_1_P_GasLight(id)
signal_flag_1_P_GasLight_t(id) = signal_flag_1_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
DecisionNode_MergeNode0_P_GasLight(id) = ((ce_P_GasLight.id.3 -> SKIP) [] (ce_P_GasLight.id.16 -> SKIP)); ce_P_GasLight.id.8 -> DecisionNode_MergeNode0_P_GasLight(id)
DecisionNode_MergeNode0_P_GasLight_t(id) = DecisionNode_MergeNode0_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
P_Init_P_GasLight(id) = ((ce_P_GasLight.id.4 -> SKIP)); normal(P_Init(1));((ce_P_GasLight.id.16 -> SKIP)); P_Init_P_GasLight(id)
P_Init_P_GasLight_t(id) = P_Init_P_GasLight(id) /\ END_DIAGRAM_P_GasLight(id)
AlphabetMemP_Init_P_GasLight(id) = {|endDiagram_P_GasLight.id|}

TokenManager_P_GasLight(id,x,init) = update_P_GasLight.id?c?y:limiteUpdate_P_GasLight -> x+y < 10 & x+y > -10 & TokenManager_P_GasLight(id,x+y,1) [] clear_P_GasLight.id?c -> endDiagram_P_GasLight.id -> SKIP [] x == 0 & init == 1 & endDiagram_P_GasLight.id -> SKIP
TokenManager_P_GasLight_t(id,x,init) = TokenManager_P_GasLight(id,x,init)

datatype alphabet_P_Init = ActivityFinal0_P_Init_t_alphabet | JoinNode2_P_Init_t_alphabet| ForkNode2_P_Init_t_alphabet| accept_gas_2_P_Init_t_alphabet| signal_light_Color_green__2_P_Init_t_alphabet| InitialNode0_P_Init_t_alphabet
robochart_P_Init = "file_System_coreassertions.csp"
robochart_alphabet_P_Init = {|ChemicalDetectorSoftware::light.out.Color_green,ChemicalDetectorSoftware::gas.in|}
countCe_P_Init = {1..6}
countUpdate_P_Init = {1..3}
countClear_P_Init = {1..1}
limiteUpdate_P_Init = {(-1)..(1)}
channel startActivity_P_Init: ID_P_Init
channel endActivity_P_Init: ID_P_Init
channel ce_P_Init: ID_P_Init.countCe_P_Init
channel clear_P_Init: ID_P_Init.countClear_P_Init
channel update_P_Init: ID_P_Init.countUpdate_P_Init.limiteUpdate_P_Init
channel endDiagram_P_Init: ID_P_Init

alphabet_Astah_P_Init = {| startActivity_P_Init, endActivity_P_Init, ce_P_Init, clear_P_Init, update_P_Init, endDiagram_P_Init |}

END_DIAGRAM_P_Init(id) = endDiagram_P_Init.id -> SKIP
P_Init(ID_P_Init) = (Internal_P_Init(ID_P_Init) [|{|update_P_Init,clear_P_Init,endDiagram_P_Init|}|] TokenManager_P_Init_t(ID_P_Init,0,0))
Internal_P_Init(id) = StartActivity_P_Init(id); Node_P_Init(id); EndActivity_P_Init(id)
StartActivity_P_Init(id) = startActivity_P_Init.id -> SKIP
EndActivity_P_Init(id) = endActivity_P_Init.id -> SKIP
AlphabetDiagram_P_Init(id,ActivityFinal0_P_Init_t_alphabet) = {|ce_P_Init.id.3,endDiagram_P_Init.id|}
AlphabetDiagram_P_Init(id,JoinNode2_P_Init_t_alphabet) = {|ce_P_Init.id.1,ce_P_Init.id.2,ce_P_Init.id.3,endDiagram_P_Init.id|}
AlphabetDiagram_P_Init(id,ForkNode2_P_Init_t_alphabet) = {|ce_P_Init.id.4,ce_P_Init.id.6,ce_P_Init.id.5,endDiagram_P_Init.id|}
AlphabetDiagram_P_Init(id,accept_gas_2_P_Init_t_alphabet) = {|ce_P_Init.id.5,ce_P_Init.id.2,endDiagram_P_Init.id|}
AlphabetDiagram_P_Init(id,signal_light_Color_green__2_P_Init_t_alphabet) = {|ce_P_Init.id.6,ce_P_Init.id.1,endDiagram_P_Init.id|}
AlphabetDiagram_P_Init(id,InitialNode0_P_Init_t_alphabet) = {|ce_P_Init.id.4,endDiagram_P_Init.id|}
AlphabetDiagram_P_Init_t(id) = union(union(union(union(union(AlphabetDiagram_P_Init(id,ActivityFinal0_P_Init_t_alphabet),AlphabetDiagram_P_Init(id,JoinNode2_P_Init_t_alphabet)),AlphabetDiagram_P_Init(id,ForkNode2_P_Init_t_alphabet)),AlphabetDiagram_P_Init(id,accept_gas_2_P_Init_t_alphabet)),AlphabetDiagram_P_Init(id,signal_light_Color_green__2_P_Init_t_alphabet)),AlphabetDiagram_P_Init(id,InitialNode0_P_Init_t_alphabet))

ProcessDiagram_P_Init(id,ActivityFinal0_P_Init_t_alphabet) = normal(ActivityFinal0_P_Init_t(id))
ProcessDiagram_P_Init(id,JoinNode2_P_Init_t_alphabet) = normal(JoinNode2_P_Init_t(id))
ProcessDiagram_P_Init(id,ForkNode2_P_Init_t_alphabet) = normal(ForkNode2_P_Init_t(id))
ProcessDiagram_P_Init(id,accept_gas_2_P_Init_t_alphabet) = normal(accept_gas_2_P_Init_t(id))
ProcessDiagram_P_Init(id,signal_light_Color_green__2_P_Init_t_alphabet) = normal(signal_light_Color_green__2_P_Init_t(id))
ProcessDiagram_P_Init(id,InitialNode0_P_Init_t_alphabet) = normal(InitialNode0_P_Init_t(id))
JoinNode2_P_Init(id) = ((ce_P_Init.id.1 -> SKIP) ||| (ce_P_Init.id.2 -> SKIP)); update_P_Init.id.1!(1-2) -> ((ce_P_Init.id.3 -> SKIP)); JoinNode2_P_Init(id)
JoinNode2_P_Init_t(id) = (JoinNode2_P_Init(id) /\ END_DIAGRAM_P_Init(id))
InitialNode0_P_Init(id) = update_P_Init.id.2!(1-0) -> ((ce_P_Init.id.4 -> SKIP))
InitialNode0_P_Init_t(id) = InitialNode0_P_Init(id) /\ END_DIAGRAM_P_Init(id)
accept_gas_2_P_Init(id) = ((ce_P_Init.id.5 -> SKIP)); ChemicalDetectorSoftware::gas.in -> ((ce_P_Init.id.2 -> SKIP)); accept_gas_2_P_Init(id)
accept_gas_2_P_Init_t(id) = accept_gas_2_P_Init(id) /\ END_DIAGRAM_P_Init(id)
signal_light_Color_green__2_P_Init(id) = ((ce_P_Init.id.6 -> SKIP)); ChemicalDetectorSoftware::light.out.Color_green -> ((ce_P_Init.id.1 -> SKIP)); signal_light_Color_green__2_P_Init(id)
signal_light_Color_green__2_P_Init_t(id) = signal_light_Color_green__2_P_Init(id) /\ END_DIAGRAM_P_Init(id)
ForkNode2_P_Init(id) = ce_P_Init.id.4 -> update_P_Init.id.3!(2-1) -> ((ce_P_Init.id.6 -> SKIP) ||| (ce_P_Init.id.5 -> SKIP)); ForkNode2_P_Init(id)
ForkNode2_P_Init_t(id) = ForkNode2_P_Init(id) /\ END_DIAGRAM_P_Init(id)
ActivityFinal0_P_Init(id) = ((ce_P_Init.id.3 -> SKIP)); clear_P_Init.id.1 -> SKIP
ActivityFinal0_P_Init_t(id) = ActivityFinal0_P_Init(id) /\ END_DIAGRAM_P_Init(id)

TokenManager_P_Init(id,x,init) = update_P_Init.id?c?y:limiteUpdate_P_Init -> x+y < 10 & x+y > -10 & TokenManager_P_Init(id,x+y,1) [] clear_P_Init.id?c -> endDiagram_P_Init.id -> SKIP [] x == 0 & init == 1 & endDiagram_P_Init.id -> SKIP
TokenManager_P_Init_t(id,x,init) = TokenManager_P_Init(id,x,init)


WAIT_PROCCESSES_P_Init(processes) = ( ||| CONTROL : processes @ CONTROL )  /\ endDiagram_P_Init?id -> SKIP

Prop_P_Init = PROP_P_Init(Wait_control_processes_P_Init) \ alphabet_Astah_P_Init 

alphabet_robochart_P_Init = {| ChemicalDetectorSoftware::gas.in, ChemicalDetectorSoftware::turn.out.90, ChemicalDetectorSoftware::turn.out.180, ChemicalDetectorSoftware::cd.in.Command_faster, ChemicalDetectorSoftware::cd.in.Command_left, ChemicalDetectorSoftware::cd.in.Command_right, ChemicalDetectorSoftware::cd.in.Command_back, ChemicalDetectorSoftware::cd.in.Command_slower, ChemicalDetectorSoftware::incrCall, ChemicalDetectorSoftware::decrCall, ChemicalDetectorSoftware::flag.out, ChemicalDetectorSoftware::siren.out, ChemicalDetectorSoftware::light.out.Color_green, ChemicalDetectorSoftware::light.out.Color_amber, ChemicalDetectorSoftware::light.out.Color_red |}

PROP_P_Init(processes) = (MAIN)

Wait_control_processes_P_Init = {}

Node_P_Init(id) = composeNodes_P_Init(id)

composeNodes_P_Init(id) = 
	let
	    alphabet_P_Init_s = seq(alphabet_P_Init)
		composeNodes_(id,<ev>,_) = ProcessDiagram_P_Init(id,ev)
		composeNodes_(id,<ev>^tail,past) = 
			ProcessDiagram_P_Init(id,ev) 
				[|union(diff(AlphabetDiagram_P_Init(id,ev),past),{endDiagram_P_Init.id})|] 
			( composeNodes_(id,tail,union(past,AlphabetDiagram_P_Init(id,ev))) )
	within 
		composeNodes_(id,alphabet_P_Init_s,{})



WAIT_PROCCESSES_P_GasLight(processes) = ( ||| CONTROL : processes @ CONTROL )  /\ endDiagram_P_GasLight?id -> SKIP

Prop_P_GasLight = PROP_P_GasLight(Wait_control_processes_P_GasLight) \ alphabet_Astah_P_GasLight 

alphabet_robochart_P_GasLight = {| ChemicalDetectorSoftware::gas.in, ChemicalDetectorSoftware::turn.out.90, ChemicalDetectorSoftware::turn.out.180, ChemicalDetectorSoftware::cd.in.Command_faster, ChemicalDetectorSoftware::cd.in.Command_left, ChemicalDetectorSoftware::cd.in.Command_right, ChemicalDetectorSoftware::cd.in.Command_back, ChemicalDetectorSoftware::cd.in.Command_slower, ChemicalDetectorSoftware::incrCall, ChemicalDetectorSoftware::decrCall, ChemicalDetectorSoftware::flag.out, ChemicalDetectorSoftware::siren.out, ChemicalDetectorSoftware::light.out.Color_green, ChemicalDetectorSoftware::light.out.Color_amber, ChemicalDetectorSoftware::light.out.Color_red |}

PROP_P_GasLight(processes) = (MAIN)

Wait_control_processes_P_GasLight = {}

Node_P_GasLight(id) = composeNodes_P_GasLight(id)

composeNodes_P_GasLight(id) = 
	let
	    alphabet_P_GasLight_s = seq(alphabet_P_GasLight)
		composeNodes_(id,<ev>,_) = ProcessDiagram_P_GasLight(id,ev)
		composeNodes_(id,<ev>^tail,past) = 
			ProcessDiagram_P_GasLight(id,ev) 
				[|union(diff(AlphabetDiagram_P_GasLight(id,ev),past),{endDiagram_P_GasLight.id})|] 
			( composeNodes_(id,tail,union(past,AlphabetDiagram_P_GasLight(id,ev))) )
	within 
		composeNodes_(id,alphabet_P_GasLight_s,{})



WAIT_PROCCESSES_P_Commands(processes) = ( ||| CONTROL : processes @ CONTROL )  /\ endDiagram_P_Commands?id -> SKIP

Prop_P_Commands = PROP_P_Commands(Wait_control_processes_P_Commands) \ alphabet_Astah_P_Commands 

alphabet_robochart_P_Commands = {| ChemicalDetectorSoftware::gas.in, ChemicalDetectorSoftware::turn.out.90, ChemicalDetectorSoftware::turn.out.180, ChemicalDetectorSoftware::cd.in.Command_faster, ChemicalDetectorSoftware::cd.in.Command_left, ChemicalDetectorSoftware::cd.in.Command_right, ChemicalDetectorSoftware::cd.in.Command_back, ChemicalDetectorSoftware::cd.in.Command_slower, ChemicalDetectorSoftware::incrCall, ChemicalDetectorSoftware::decrCall, ChemicalDetectorSoftware::flag.out, ChemicalDetectorSoftware::siren.out, ChemicalDetectorSoftware::light.out.Color_green, ChemicalDetectorSoftware::light.out.Color_amber, ChemicalDetectorSoftware::light.out.Color_red |}

PROP_P_Commands(processes) = (MAIN)

Wait_control_processes_P_Commands = {}

Node_P_Commands(id) = composeNodes_P_Commands(id)

composeNodes_P_Commands(id) = 
	let
	    alphabet_P_Commands_s = seq(alphabet_P_Commands)
		composeNodes_(id,<ev>,_) = ProcessDiagram_P_Commands(id,ev)
		composeNodes_(id,<ev>^tail,past) = 
			ProcessDiagram_P_Commands(id,ev) 
				[|union(diff(AlphabetDiagram_P_Commands(id,ev),past),{endDiagram_P_Commands.id})|] 
			( composeNodes_(id,tail,union(past,AlphabetDiagram_P_Commands(id,ev))) )
	within 
		composeNodes_(id,alphabet_P_Commands_s,{})


assert Prop_P_Spec1 [T= P_ChemicalDetectorSoftware

NRecurse(S, P) = |~| ev : S @ ev -> P

WAIT(alphabet,event) = 
	NRecurse(diff(alphabet, {event}), WAIT(alphabet,event))
	|~|
	event -> SKIP

WAIT_PROCCESSES_P_Spec1(processes) = ( ||| CONTROL : processes @ CONTROL )  /\ endDiagram_P_Spec1?id -> SKIP

Prop_P_Spec1 = PROP_P_Spec1(Wait_control_processes_P_Spec1) \ union(union(union(alphabet_Astah_P_Commands, alphabet_Astah_P_GasLight), alphabet_Astah_P_Init), alphabet_Astah_P_Spec1) 

alphabet_robochart_P_Spec1 = {| ChemicalDetectorSoftware::gas.in, ChemicalDetectorSoftware::turn.out.90, ChemicalDetectorSoftware::turn.out.180, ChemicalDetectorSoftware::cd.in.Command_faster, ChemicalDetectorSoftware::cd.in.Command_left, ChemicalDetectorSoftware::cd.in.Command_right, ChemicalDetectorSoftware::cd.in.Command_back, ChemicalDetectorSoftware::cd.in.Command_slower, ChemicalDetectorSoftware::incrCall, ChemicalDetectorSoftware::decrCall, ChemicalDetectorSoftware::flag.out, ChemicalDetectorSoftware::siren.out, ChemicalDetectorSoftware::light.out.Color_green, ChemicalDetectorSoftware::light.out.Color_amber, ChemicalDetectorSoftware::light.out.Color_red |}

PROP_P_Spec1(processes) = (MAIN)

Wait_control_processes_P_Spec1 = {}

Node_P_Spec1(id) = composeNodes_P_Spec1(id)

composeNodes_P_Spec1(id) = 
	let
	    alphabet_P_Spec1_s = seq(alphabet_P_Spec1)
		composeNodes_(id,<ev>,_) = ProcessDiagram_P_Spec1(id,ev)
		composeNodes_(id,<ev>^tail,past) = 
			ProcessDiagram_P_Spec1(id,ev) 
				[|union(diff(AlphabetDiagram_P_Spec1(id,ev),past),{endDiagram_P_Spec1.id})|] 
			( composeNodes_(id,tail,union(past,AlphabetDiagram_P_Spec1(id,ev))) )
	within 
		composeNodes_(id,alphabet_P_Spec1_s,{})

