transparent normal
include "SMovement_coreassertions.csp"
ID_AD_divercence = {1..1}
datatype alphabet_AD_divercence = InitialNode0_AD_divercence_t_alphabet | move_0_2__1_AD_divercence_t_alphabet| accept_obstacle_1_AD_divercence_t_alphabet| ForkNode0_AD_divercence_t_alphabet| JoinNode0_AD_divercence_t_alphabet| ActivityFinal0_AD_divercence_t_alphabet
robochart_AD_divercence = "SMovement_coreassertions.csp"
robochart_alphabet_AD_divercence = {|SMovement::moveCall,SMovement::obstacle.in,SMovement::obstacle.out|}
countCe_AD_divercence = {1..6}
countUpdate_AD_divercence = {1..3}
countClear_AD_divercence = {1..1}
limiteUpdate_AD_divercence = {(-1)..(1)}
channel startActivity_AD_divercence: ID_AD_divercence
channel endActivity_AD_divercence: ID_AD_divercence
channel ce_AD_divercence: ID_AD_divercence.countCe_AD_divercence
channel clear_AD_divercence: ID_AD_divercence.countClear_AD_divercence
channel update_AD_divercence: ID_AD_divercence.countUpdate_AD_divercence.limiteUpdate_AD_divercence
channel endDiagram_AD_divercence: ID_AD_divercence
channel dc

alphabet_Astah_AD_divercence = {| startActivity_AD_divercence, endActivity_AD_divercence, ce_AD_divercence, clear_AD_divercence, update_AD_divercence, endDiagram_AD_divercence, dc |}

MAIN = normal(AD_divercence(1))
END_DIAGRAM_AD_divercence(id) = endDiagram_AD_divercence.id -> SKIP
AD_divercence(ID_AD_divercence) = (Internal_AD_divercence(ID_AD_divercence) [|{|update_AD_divercence,clear_AD_divercence,endDiagram_AD_divercence|}|] TokenManager_AD_divercence_t(ID_AD_divercence,0,0))
Internal_AD_divercence(id) = StartActivity_AD_divercence(id); Node_AD_divercence(id); EndActivity_AD_divercence(id)
StartActivity_AD_divercence(id) = startActivity_AD_divercence.id -> SKIP
EndActivity_AD_divercence(id) = endActivity_AD_divercence.id -> SKIP
AlphabetDiagram_AD_divercence(id,InitialNode0_AD_divercence_t_alphabet) = {|ce_AD_divercence.id.1,endDiagram_AD_divercence.id|}
AlphabetDiagram_AD_divercence(id,move_0_2__1_AD_divercence_t_alphabet) = {|ce_AD_divercence.id.2,ce_AD_divercence.id.3,endDiagram_AD_divercence.id|}
AlphabetDiagram_AD_divercence(id,accept_obstacle_1_AD_divercence_t_alphabet) = {|ce_AD_divercence.id.4,ce_AD_divercence.id.5,endDiagram_AD_divercence.id|}
AlphabetDiagram_AD_divercence(id,ForkNode0_AD_divercence_t_alphabet) = {|ce_AD_divercence.id.1,ce_AD_divercence.id.4,ce_AD_divercence.id.2,endDiagram_AD_divercence.id|}
AlphabetDiagram_AD_divercence(id,JoinNode0_AD_divercence_t_alphabet) = {|ce_AD_divercence.id.5,ce_AD_divercence.id.3,ce_AD_divercence.id.6,endDiagram_AD_divercence.id|}
AlphabetDiagram_AD_divercence(id,ActivityFinal0_AD_divercence_t_alphabet) = {|ce_AD_divercence.id.6,clear_AD_divercence.id.1,endDiagram_AD_divercence.id|}
AlphabetDiagram_AD_divercence_t(id) = union(union(union(union(union(AlphabetDiagram_AD_divercence(id,InitialNode0_AD_divercence_t_alphabet),AlphabetDiagram_AD_divercence(id,move_0_2__1_AD_divercence_t_alphabet)),AlphabetDiagram_AD_divercence(id,accept_obstacle_1_AD_divercence_t_alphabet)),AlphabetDiagram_AD_divercence(id,ForkNode0_AD_divercence_t_alphabet)),AlphabetDiagram_AD_divercence(id,JoinNode0_AD_divercence_t_alphabet)),AlphabetDiagram_AD_divercence(id,ActivityFinal0_AD_divercence_t_alphabet))

ProcessDiagram_AD_divercence(id,InitialNode0_AD_divercence_t_alphabet) = normal(InitialNode0_AD_divercence_t(id))
ProcessDiagram_AD_divercence(id,move_0_2__1_AD_divercence_t_alphabet) = normal(move_0_2__1_AD_divercence_t(id))
ProcessDiagram_AD_divercence(id,accept_obstacle_1_AD_divercence_t_alphabet) = normal(accept_obstacle_1_AD_divercence_t(id))
ProcessDiagram_AD_divercence(id,ForkNode0_AD_divercence_t_alphabet) = normal(ForkNode0_AD_divercence_t(id))
ProcessDiagram_AD_divercence(id,JoinNode0_AD_divercence_t_alphabet) = normal(JoinNode0_AD_divercence_t(id))
ProcessDiagram_AD_divercence(id,ActivityFinal0_AD_divercence_t_alphabet) = normal(ActivityFinal0_AD_divercence_t(id))
InitialNode0_AD_divercence(id) = update_AD_divercence.id.1!(1-0) -> ((ce_AD_divercence.id.1 -> SKIP))
InitialNode0_AD_divercence_t(id) = InitialNode0_AD_divercence(id) /\ END_DIAGRAM_AD_divercence(id)
move_0_2__1_AD_divercence(id) = ((ce_AD_divercence.id.2 -> SKIP)); SMovement::moveCall.0.2 -> ((ce_AD_divercence.id.3 -> SKIP)); move_0_2__1_AD_divercence(id)
move_0_2__1_AD_divercence_t(id) = move_0_2__1_AD_divercence(id) /\ END_DIAGRAM_AD_divercence(id)
accept_obstacle_1_AD_divercence(id) = ((ce_AD_divercence.id.4 -> SKIP)); SMovement::obstacle.in -> ((ce_AD_divercence.id.5 -> SKIP)); accept_obstacle_1_AD_divercence(id)
accept_obstacle_1_AD_divercence_t(id) = accept_obstacle_1_AD_divercence(id) /\ END_DIAGRAM_AD_divercence(id)
ActivityFinal0_AD_divercence(id) = ((ce_AD_divercence.id.6 -> SKIP)); clear_AD_divercence.id.1 -> SKIP
ActivityFinal0_AD_divercence_t(id) = ActivityFinal0_AD_divercence(id) /\ END_DIAGRAM_AD_divercence(id)
ForkNode0_AD_divercence(id) = ce_AD_divercence.id.1 -> update_AD_divercence.id.2!(2-1) -> ((ce_AD_divercence.id.4 -> SKIP) ||| (ce_AD_divercence.id.2 -> SKIP)); ForkNode0_AD_divercence(id)
ForkNode0_AD_divercence_t(id) = ForkNode0_AD_divercence(id) /\ END_DIAGRAM_AD_divercence(id)
JoinNode0_AD_divercence(id) = ((ce_AD_divercence.id.5 -> SKIP) ||| (ce_AD_divercence.id.3 -> SKIP)); update_AD_divercence.id.3!(1-2) -> ((ce_AD_divercence.id.6 -> SKIP)); JoinNode0_AD_divercence(id)
JoinNode0_AD_divercence_t(id) = (JoinNode0_AD_divercence(id) /\ END_DIAGRAM_AD_divercence(id))

TokenManager_AD_divercence(id,x,init) = update_AD_divercence.id?c?y:limiteUpdate_AD_divercence -> x+y < 10 & x+y > -10 & TokenManager_AD_divercence(id,x+y,1) [] clear_AD_divercence.id?c -> endDiagram_AD_divercence.id -> SKIP [] x == 0 & init == 1 & endDiagram_AD_divercence.id -> SKIP
TokenManager_AD_divercence_t(id,x,init) = TokenManager_AD_divercence(id,x,init)

assert MAIN :[deadlock free]
assert MAIN :[divergence free]
assert MAIN :[deterministic]

NRecurse(S, P) = |~| ev : S @ ev -> P



WAIT(alphabet,event) = 
	NRecurse(diff(alphabet, {event}), WAIT(alphabet,event))
	|~|
	event -> SKIP

WAIT_PROCCESSES_AD_divercence(processes) = ( ||| CONTROL : processes @ CONTROL )  /\ endDiagram_AD_divercence?id -> SKIP

Prop_AD_divercence = PROP_AD_divercence(Wait_control_processes_AD_divercence) \ alphabet_Astah_AD_divercence 

alphabet_robochart_AD_divercence = {|SMovement::moveCall,SMovement::obstacle.in,SMovement::obstacle.out|}

PROP_AD_divercence(processes) = (MAIN)

Wait_control_processes_AD_divercence = {}

Node_AD_divercence(id) = composeNodes_AD_divercence(id)

composeNodes_AD_divercence(id) = 
	let
	    alphabet_AD_divercence_s = seq(alphabet_AD_divercence)
		composeNodes_(id,<ev>,_) = ProcessDiagram_AD_divercence(id,ev)
		composeNodes_(id,<ev>^tail,past) = 
			ProcessDiagram_AD_divercence(id,ev) 
				[|union(diff(AlphabetDiagram_AD_divercence(id,ev),past),{endDiagram_AD_divercence.id})|] 
			( composeNodes_(id,tail,union(past,AlphabetDiagram_AD_divercence(id,ev))) )
	within 
		composeNodes_(id,alphabet_AD_divercence_s,{})

