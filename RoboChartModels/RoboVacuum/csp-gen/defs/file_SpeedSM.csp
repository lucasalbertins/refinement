


module SpeedSM
exports
	-- flow channels
	channel internal__ : TIDS
	channel enteredV, enterV, exitV, exitedV : SIDS
	channel enter, entered: SIDS.SIDS
	channel exit,exited: SIDS.SIDS
	channel terminate
	
	-- variable channels
	channel get_acceleration, set_acceleration: TripleAxis
	channel get_speed, set_speed: TripleAxis
			
	-- shared variable channels
	
	-- local variable channels for defined operations that are required by the state machine
	
	-- declaring state machine events
	channel acc__: TIDS.InOut.TripleAxis
	channel acc: InOut.TripleAxis
	channel sp__: TIDS.InOut.TripleAxis
	channel sp: InOut.TripleAxis
	
	-- declaring call and ret events for undefined operations
	
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machien module.
	
	
	-- definition of functions used to expose flow channels
	ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
					   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
					   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
					   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
						 
	ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	
	-- declaring identifiers of state and final states
	datatype SIDS = SID_SpeedSM
	              | SID_SpeedSM_wait_input
	              | SID_SpeedSM_update_speed
	
	-- declaring identifiers of transitions
	datatype TIDS = NULLTRANSITION__
	              | TID_SpeedSM_t1
	              | TID_SpeedSM_t0
	              | TID_SpeedSM_t2
	
	-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
	
	ITIDS = {
		TID_SpeedSM_t1,	TID_SpeedSM_t2
	}
	
	int_int = {|
		acc__.TID_SpeedSM_t1,
		sp__.TID_SpeedSM_t1,
		internal__.TID_SpeedSM_t1,
		acc__.TID_SpeedSM_t2,
		sp__.TID_SpeedSM_t2,
		internal__.TID_SpeedSM_t2
	|}
		
	
	internal_events = {|enter,entered,exit,exited|}
	shared_variable_events = {|
	|}
			
	
	-- declaring all states
	CS_SpeedSM_wait_input_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_SpeedSM_wait_input,SID_SpeedSM_update_speed},
		y____ <- {SID_SpeedSM_wait_input}
	|}
	
	
	SpeedSM_wait_input_triggers = {|
		internal__.TID_SpeedSM_t2,
		acc__.TID_SpeedSM_t1
	|}
	
	State_SpeedSM_wait_input(id__,
			    const_SpeedSM_t) = let
		T_SpeedSM_t1(id__,
				    const_SpeedSM_t) = acc__!TID_SpeedSM_t1.in?acceleration -> set_acceleration!acceleration ->  (exit.SID_SpeedSM_wait_input.SID_SpeedSM_wait_input -> SKIP;
							SKIP;exited.SID_SpeedSM_wait_input.SID_SpeedSM_wait_input -> SKIP;
							enter!SID_SpeedSM_wait_input!SID_SpeedSM_update_speed -> entered!SID_SpeedSM_wait_input!SID_SpeedSM_update_speed ->
							State_SpeedSM_wait_input(id__,
									    const_SpeedSM_t)
		)
		State_SpeedSM_wait_input_execute(id__,o____) = SKIP; 
			entered!o____!SID_SpeedSM_wait_input ->
			(SKIP; STOP /\ (
				T_SpeedSM_t1(id__,
						    const_SpeedSM_t)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1}) -> exit?y____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (
						SKIP;
						exited!y____!SID_SpeedSM_wait_input -> SKIP);
						State_SpeedSM_wait_input(id__,
								    const_SpeedSM_t)
				[] acc__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (
						SKIP;
						exited!y____!SID_SpeedSM_wait_input -> SKIP);
						State_SpeedSM_wait_input(id__,
								    const_SpeedSM_t)
				[] sp__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (
						SKIP;
						exited!y____!SID_SpeedSM_wait_input -> SKIP);
						State_SpeedSM_wait_input(id__,
								    const_SpeedSM_t)
			))
	within
		enter?x____:diff(SIDS,{SID_SpeedSM_wait_input})!SID_SpeedSM_wait_input -> (State_SpeedSM_wait_input_execute(id__,x____))
	
	CS_SpeedSM_update_speed_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_SpeedSM_wait_input,SID_SpeedSM_update_speed},
		y____ <- {SID_SpeedSM_update_speed}
	|}
	
	
	SpeedSM_update_speed_triggers = {|
		internal__.TID_SpeedSM_t2,
		acc__.TID_SpeedSM_t1
	|}
	
	State_SpeedSM_update_speed(id__,
			    const_SpeedSM_t) = let
		T_SpeedSM_t2(id__,
				    const_SpeedSM_t) = internal__!TID_SpeedSM_t2 ->  exit.SID_SpeedSM_update_speed.SID_SpeedSM_update_speed -> SKIP;
							SKIP;exited.SID_SpeedSM_update_speed.SID_SpeedSM_update_speed -> SKIP;
							get_speed?speed -> true&(sp.out!speed -> SKIP);SKIP;enter!SID_SpeedSM_update_speed!SID_SpeedSM_wait_input -> entered!SID_SpeedSM_update_speed!SID_SpeedSM_wait_input ->
							State_SpeedSM_update_speed(id__,
									    const_SpeedSM_t)
		State_SpeedSM_update_speed_execute(id__,o____) = get_speed?speed -> get_acceleration?acceleration -> true & (set_speed!update_TripleAxis_X(speed,Plus(TripleAxis_X(speed), Mult(TripleAxis_X(acceleration), const_SpeedSM_t, core_int), core_int)) -> SKIP);get_speed?speed -> get_acceleration?acceleration -> true & (set_speed!update_TripleAxis_Y(speed,Plus(TripleAxis_Y(speed), Mult(TripleAxis_Y(acceleration), const_SpeedSM_t, core_int), core_int)) -> SKIP);get_speed?speed -> get_acceleration?acceleration -> true & (set_speed!update_TripleAxis_Z(speed,Plus(TripleAxis_Z(speed), Mult(TripleAxis_Z(acceleration), const_SpeedSM_t, core_int), core_int)) -> SKIP); 
			entered!o____!SID_SpeedSM_update_speed ->
			(SKIP; STOP /\ (
				T_SpeedSM_t2(id__,
						    const_SpeedSM_t)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1}) -> exit?y____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (
						SKIP;
						exited!y____!SID_SpeedSM_update_speed -> SKIP);
						State_SpeedSM_update_speed(id__,
								    const_SpeedSM_t)
				[] acc__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (
						SKIP;
						exited!y____!SID_SpeedSM_update_speed -> SKIP);
						State_SpeedSM_update_speed(id__,
								    const_SpeedSM_t)
				[] sp__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedSM_t2,TID_SpeedSM_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (
						SKIP;
						exited!y____!SID_SpeedSM_update_speed -> SKIP);
						State_SpeedSM_update_speed(id__,
								    const_SpeedSM_t)
			))
	within
		enter?x____:diff(SIDS,{SID_SpeedSM_update_speed})!SID_SpeedSM_update_speed -> (State_SpeedSM_update_speed_execute(id__,x____))
	
	
	I_SpeedSM_i0(id__,
			    const_SpeedSM_t) = let
		T_SpeedSM_t0(id__,
				    const_SpeedSM_t) = internal__!TID_SpeedSM_t0 -> get_speed?speed -> true & (set_speed!update_TripleAxis_X(speed,0) -> SKIP);get_speed?speed -> true & (set_speed!update_TripleAxis_Y(speed,0) -> SKIP);get_speed?speed -> true & (set_speed!update_TripleAxis_Z(speed,0) -> SKIP);enter!SID_SpeedSM!SID_SpeedSM_wait_input -> entered!SID_SpeedSM!SID_SpeedSM_wait_input ->
		SKIP
	within
		T_SpeedSM_t0(id__,
				    const_SpeedSM_t)
	
	
	State_SpeedSM_wait_input_R(id__,
			    const_SpeedSM_t) = 
		State_SpeedSM_wait_input(id__,
				    const_SpeedSM_t)
			[|diff(int_int,SpeedSM_wait_input_triggers)|]
		SKIP
			 		
	State_SpeedSM_update_speed_R(id__,
			    const_SpeedSM_t) = 
		State_SpeedSM_update_speed(id__,
				    const_SpeedSM_t)
			[|diff(int_int,SpeedSM_update_speed_triggers)|]
		SKIP
			 		
		
	STM(id__,
			    const_SpeedSM_t) = (
		I_SpeedSM_i0(id__,
				    const_SpeedSM_t)
			[|
				{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
					x____ <- diff(SIDS,{SID_SpeedSM_wait_input,SID_SpeedSM_update_speed}),
					y____ <- {SID_SpeedSM_wait_input,SID_SpeedSM_update_speed}
			|}|]
		(
			State_SpeedSM_wait_input_R(id__,
					    const_SpeedSM_t)
				[|inter(CS_SpeedSM_wait_input_sync,CS_SpeedSM_update_speed_sync)|]
			State_SpeedSM_update_speed_R(id__,
					    const_SpeedSM_t)
		)
	)
	
	-- optimized memory process
	channel getV_acceleration: TripleAxis
	channel getV_speed: TripleAxis
	
	-- individual memory processes
	Memory_acceleration(acceleration) = (
		get_acceleration!acceleration -> Memory_acceleration(acceleration)
		[]
		getV_acceleration!acceleration -> Memory_acceleration(acceleration)
		[]
		set_acceleration?x__ -> Memory_acceleration(x__)
		[]
		acc__!TID_SpeedSM_t1.in?acceleration -> Memory_acceleration(acceleration)
	)
	Memory_speed(speed) = (
		get_speed!speed -> Memory_speed(speed)
		[]
		getV_speed!speed -> Memory_speed(speed)
		[]
		set_speed?x__ -> Memory_speed(x__)
	)
	
	-- processes that read variables and offer transitions
	MemoryTransitions(id__, acceleration, speed) = 		
	(acc__!TID_SpeedSM_t1.in?acceleration -> SKIP
	[]
	internal__!TID_SpeedSM_t0 -> SKIP
	[]
	internal__!TID_SpeedSM_t2 -> SKIP[]
	set_acceleration?x__ -> SKIP[]
	set_speed?x__ -> SKIP)
	
	MemoryTransitions_SpeedSM(id__, const_SpeedSM_t) = (getV_acceleration?acceleration ->
	getV_speed?speed ->
	MemoryTransitions(id__, acceleration, speed)			
	); MemoryTransitions_SpeedSM(id__, const_SpeedSM_t)
			
	
	-- synchronisation, hiding and process sets 
	MemoryVariablesProcesses_SpeedSM = Union(
		{
			{
				(Memory_acceleration((0,0,0)),{|get_acceleration,acc__.TID_SpeedSM_t1,set_acceleration,getV_acceleration|}),
				(Memory_speed((0,0,0)),{|set_speed,get_speed,getV_speed|})
			}
		}
	)
	
	MemoryVariablesSyncSet = Union({
		{|
			set_speed,
			acc__.TID_SpeedSM_t1,
			getV_speed,
			set_acceleration,
			getV_acceleration
		|}	
	})
	
	MemoryVariablesHideSet = Union({
		{|
			getV_speed,
			getV_acceleration
		|}
	})
	
	-- combined individual memory processes
	MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_SpeedSM @ P
	
	-- complete memory process	
	MemoryN(id__, const_SpeedSM_t) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_SpeedSM(id__, const_SpeedSM_t)))) \ MemoryVariablesHideSet))
	
	-- optimised memory
	-- Sets of named elements identified according to transition conditions:
	-- {}
	-- Summary of all identified named elements:
	-- {
	-- speed
	-- acceleration
	-- }
	
	-- Allocation plan:
	-- 0:{}
	--	=> {
	--		TID_SpeedSM_t2,
	--		TID_SpeedSM_t1,
	--		TID_SpeedSM_t0}
	
	-- Memory transition processes
	MemoryTransitions_opt_0(id__) =
	(
		let
			Update = Current(id__)
			Current(id__)
			 	   = 
			 	   internal__!TID_SpeedSM_t2 -> Update
			 	   []
			 	   acc__!TID_SpeedSM_t1.in?acceleration -> Update
			 	   []
			 	   internal__!TID_SpeedSM_t0 -> Update
		within
			Update
	)
	
	-- Memory cell processes
	Memory_opt_speed(x__) = ( 
		get_speed!x__ -> Memory_opt_speed(x__)
		[]
		set_speed?x__ -> Memory_opt_speed(x__)
	)
	Memory_opt_acceleration(x__) = ( 
		get_acceleration!x__ -> Memory_opt_acceleration(x__)
		[]
		set_acceleration?x__ -> Memory_opt_acceleration(x__)
	)
	
	-- Composition of memory, StateMachine and Memory transition processes
	
	MemorySTM_opt(id__,
			    const_SpeedSM_t) =
		sbisim(	
		  dbisim(
		    sbisim(dbisim(sbisim(Memory_opt_speed((0,0,0))
		          	[| {|set_speed,get_speed|} |] 
		          	dbisim(sbisim(Memory_opt_acceleration((0,0,0))
		          	      	[| {|get_acceleration,set_acceleration|} |] 
		          	      	STM_core(id__,
		          	      			    const_SpeedSM_t)
		          	      	)\ {|get_acceleration,set_acceleration|}
		          	      )
		          	)\ {|set_speed,get_speed|}
		          )
		      	  [| {|internal__.TID_SpeedSM_t0,internal__.TID_SpeedSM_t2,acc__.TID_SpeedSM_t1|} |]
		      	  MemoryTransitions_opt_0(id__)
		      	  )\{||})
		      )
	
	-- main process
	
	MachineMemorySyncSet = Union({
		union(
			union(
				{|get_acceleration,set_acceleration,
				get_speed,set_speed|},
				{||}
			)
				
			,
			{|acc__.TID_SpeedSM_t1,
			internal__.TID_SpeedSM_t0,
			internal__.TID_SpeedSM_t2|}
		)
	})
	
	MachineMemoryHidingSet = Union({
		union(
			{|get_acceleration,set_acceleration,
			get_speed,set_speed|},
			{||}
		)
	})
	
	MachineInternalEvents = {|
		internal__
	|}
	
	AUX(id__,
			    const_SpeedSM_t) = (
		(
			STM(id__,
					    const_SpeedSM_t)
				[|MachineMemorySyncSet|]
			sbisim(diamond(MemoryN(id__, const_SpeedSM_t)))
		)[[
			acc__.x____ <- acc,
			sp__.x____ <- sp
			| x____ <- TIDS
		]]
		\MachineMemoryHidingSet
	)
	[|{|terminate|}|>SKIP\MachineInternalEvents
	
	
	STM_core(id__,
			    const_SpeedSM_t) = 
		sbisim(diamond(STM(id__,
				    const_SpeedSM_t)))
		
	AUX_opt(id__,
			    const_SpeedSM_t) = 
		(MemorySTM_opt(id__,
				    const_SpeedSM_t)
		)[[
			acc__.x____ <- acc,
			sp__.x____ <- sp
			| x____ <- TIDS
		]]
		[|{|terminate|}|>SKIP\MachineInternalEvents

	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
			
	FVS__(id__,
			    const_SpeedSM_t) = AUX_opt(id__,
			    const_SpeedSM_t)
	Dunopt__(id__,
			    const_SpeedSM_t) = AUX(id__,
			    const_SpeedSM_t) \ internal_events
	D__(id__,
			    const_SpeedSM_t) = AUX_opt(id__,
			    const_SpeedSM_t) \ internal_events
	O__(id__,
			    const_SpeedSM_t) = sbisim(diamond(D__(id__,
			    const_SpeedSM_t)))
	VS__(id__,
			    const_SpeedSM_t) = ShowV(FVS__(id__,
			    const_SpeedSM_t))
	VS_O__(id__,
			    const_SpeedSM_t) = sbisim(diamond(VS__(id__,
			    const_SpeedSM_t)))
	HEXT__(id__,
			    const_SpeedSM_t) = O__(id__,
			    const_SpeedSM_t) [|shared_variable_events|] SKIP	
endmodule


