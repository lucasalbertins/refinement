
module ChemicalDetectorSoftware			
	exports
	
	transparent diamond
	transparent sbisim
	transparent chase			
	
	-- declaring channels
	-- declaring robotic platform events
	channel gas: InOut
	channel turn: InOut.core_real
	channel flag: InOut
	channel siren: InOut
	channel cd: InOut.Command
	channel light: InOut.Color
	
	channel incrCall
	channel decrCall
	
	-- declaring module termination channel
	channel terminate
				
	-- declaring robotic platform variables
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
			|}		
			
		exports
			transparent diamond
			transparent sbisim
			transparent chase
	
		
			-- declaring call and ret events for undefined operations
			channel incrCall
			channel decrCall
		
			CALL__incr(id__) =  incrCall -> SKIP
			
			CALL__decr(id__) =  decrCall -> SKIP
			
		
		
			module stm_ref0
			exports
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_c, set_c: Command
						
				-- shared variable channels
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel cd__: TIDS.InOut.Command
				channel cd: InOut.Command
				channel turn__: TIDS.InOut.core_real
				channel turn: InOut.core_real
				
				-- declaring call and ret events for undefined operations
				channel incrCall
				channel decrCall
				
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machien module.
				CALL__incr(id__) =  incrCall -> SKIP
				
				CALL__decr(id__) =  decrCall -> SKIP
				
				
				
				-- definition of functions used to expose flow channels
				ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
								   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
								   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
								   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
									 
				ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_Moving
				              | SID_Moving_Waiting
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_Moving_t1
				              | TID_Moving_t2
				              | TID_Moving_t3
				              | TID_Moving_t4
				              | TID_Moving_t5
				              | TID_Moving_t6
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_Moving_t2,	TID_Moving_t3,	TID_Moving_t4,	TID_Moving_t5,	TID_Moving_t6
				}
				
				int_int = {|
					cd__.TID_Moving_t2,
					turn__.TID_Moving_t2,
					internal__.TID_Moving_t2,
					cd__.TID_Moving_t3,
					turn__.TID_Moving_t3,
					internal__.TID_Moving_t3,
					cd__.TID_Moving_t4,
					turn__.TID_Moving_t4,
					internal__.TID_Moving_t4,
					cd__.TID_Moving_t5,
					turn__.TID_Moving_t5,
					internal__.TID_Moving_t5,
					cd__.TID_Moving_t6,
					turn__.TID_Moving_t6,
					internal__.TID_Moving_t6
				|}
					
				
				internal_events = {|enter,entered,exit,exited|}
				shared_variable_events = {|
				|}
						
				
				-- declaring all states
				CS_Moving_Waiting_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_Moving_Waiting},
					y____ <- {SID_Moving_Waiting}
				|}
				
				
				Moving_Waiting_triggers = {|
					cd__.TID_Moving_t3,
					cd__.TID_Moving_t4,
					cd__.TID_Moving_t6,
					cd__.TID_Moving_t2,
					cd__.TID_Moving_t5
				|}
				
				State_Moving_Waiting(id__) = let
					T_Moving_t2(id__) = cd__!TID_Moving_t2.in?c -> set_c!c ->  (exit.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
										SKIP;exited.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
										true&(turn.out!(Neg(90, core_int)) -> SKIP);enter!SID_Moving_Waiting!SID_Moving_Waiting -> State_Moving_Waiting_execute(id__,SID_Moving_Waiting)
					)
					T_Moving_t3(id__) = cd__!TID_Moving_t3.in?c -> set_c!c ->  (exit.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
										SKIP;exited.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
										true&(turn.out.90 -> SKIP);enter!SID_Moving_Waiting!SID_Moving_Waiting -> State_Moving_Waiting_execute(id__,SID_Moving_Waiting)
					)
					T_Moving_t4(id__) = cd__!TID_Moving_t4.in?c -> set_c!c ->  (exit.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
										SKIP;exited.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
										true&(turn.out.180 -> SKIP);enter!SID_Moving_Waiting!SID_Moving_Waiting -> State_Moving_Waiting_execute(id__,SID_Moving_Waiting)
					)
					T_Moving_t5(id__) = cd__!TID_Moving_t5.in?c -> set_c!c ->  (exit.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
										SKIP;exited.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
										true&CALL__incr(
													id__
												);enter!SID_Moving_Waiting!SID_Moving_Waiting -> State_Moving_Waiting_execute(id__,SID_Moving_Waiting)
					)
					T_Moving_t6(id__) = cd__!TID_Moving_t6.in?c -> set_c!c ->  (exit.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
										SKIP;exited.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
										true&CALL__decr(
													id__
												);enter!SID_Moving_Waiting!SID_Moving_Waiting -> State_Moving_Waiting_execute(id__,SID_Moving_Waiting)
					)
					State_Moving_Waiting_execute(id__,o____) = SKIP; 
						entered!o____!SID_Moving_Waiting ->
						(SKIP; STOP /\ (
							T_Moving_t2(id__)[]
							T_Moving_t3(id__)[]
							T_Moving_t4(id__)[]
							T_Moving_t5(id__)[]
							T_Moving_t6(id__)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Moving_t3,TID_Moving_t4,TID_Moving_t6,TID_Moving_t2,TID_Moving_t5}) -> exit?y____:diff(SIDS,{SID_Moving_Waiting})!SID_Moving_Waiting -> (
									SKIP;
									exited!y____!SID_Moving_Waiting -> SKIP);
									State_Moving_Waiting(id__)
							[] cd__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Moving_t3,TID_Moving_t4,TID_Moving_t6,TID_Moving_t2,TID_Moving_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Moving_Waiting})!SID_Moving_Waiting -> (
									SKIP;
									exited!y____!SID_Moving_Waiting -> SKIP);
									State_Moving_Waiting(id__)
							[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Moving_t3,TID_Moving_t4,TID_Moving_t6,TID_Moving_t2,TID_Moving_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Moving_Waiting})!SID_Moving_Waiting -> (
									SKIP;
									exited!y____!SID_Moving_Waiting -> SKIP);
									State_Moving_Waiting(id__)
						))
				within
					enter?x____:diff(SIDS,{SID_Moving_Waiting})!SID_Moving_Waiting -> (State_Moving_Waiting_execute(id__,x____))
				
				
				I_Moving_i1(id__) = let
					T_Moving_t1(id__) = internal__!TID_Moving_t1 -> enter!SID_Moving!SID_Moving_Waiting -> entered!SID_Moving!SID_Moving_Waiting ->
					SKIP
				within
					T_Moving_t1(id__)
				
				
				State_Moving_Waiting_R(id__) = 
					State_Moving_Waiting(id__)
						[|diff(int_int,Moving_Waiting_triggers)|]
					SKIP
						 		
					
				STM(id__) = (
					I_Moving_i1(id__)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_Moving_Waiting}),
								y____ <- {SID_Moving_Waiting}
						|}|]
					State_Moving_Waiting_R(id__)
				)
				
				-- optimized memory process
				channel getV_c: Command
				
				-- individual memory processes
				Memory_c(c) = (
					get_c!c -> Memory_c(c)
					[]
					getV_c!c -> Memory_c(c)
					[]
					set_c?x__ -> Memory_c(x__)
					[]
					cd__!TID_Moving_t2.in?c -> Memory_c(c)
					[]
					cd__!TID_Moving_t3.in?c -> Memory_c(c)
					[]
					cd__!TID_Moving_t4.in?c -> Memory_c(c)
					[]
					cd__!TID_Moving_t5.in?c -> Memory_c(c)
					[]
					cd__!TID_Moving_t6.in?c -> Memory_c(c)
				)
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__, c
							) = 		
				(internal__!TID_Moving_t1 -> SKIP
				[]
				cd__!TID_Moving_t2.in?c:{c|c <- Command, (c==Command_left)} -> SKIP
				[]
				cd__!TID_Moving_t3.in?c:{c|c <- Command, (c==Command_right)} -> SKIP
				[]
				cd__!TID_Moving_t4.in?c:{c|c <- Command, (c==Command_back)} -> SKIP
				[]
				cd__!TID_Moving_t5.in?c:{c|c <- Command, (c==Command_faster)} -> SKIP
				[]
				cd__!TID_Moving_t6.in?c:{c|c <- Command, (c==Command_slower)} -> SKIP[]
				set_c?x__ -> SKIP)
				
				MemoryTransitions_Moving(id__) = (getV_c?c ->
				MemoryTransitions(id__, c
							); MemoryTransitions_Moving(id__))			
				
				-- synchronisation, hiding and process sets 
				MemoryVariablesProcesses_Moving = Union(
					{
						{
							(Memory_c(Command_faster),{|cd__.TID_Moving_t6,get_c,set_c,cd__.TID_Moving_t4,cd__.TID_Moving_t5,cd__.TID_Moving_t2,cd__.TID_Moving_t3,getV_c|})
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						cd__.TID_Moving_t6,
						set_c,
						cd__.TID_Moving_t4,
						cd__.TID_Moving_t5,
						cd__.TID_Moving_t2,
						cd__.TID_Moving_t3,
						getV_c
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getV_c
					|}
				})
				
				-- combined individual memory processes
				MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_Moving @ P
				
				-- complete memory process	
				MemoryN(id__) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_Moving(id__)))) \ MemoryVariablesHideSet))
				
				-- optimised memory
				-- Sets of named elements identified according to transition conditions:
				-- {}
				-- Summary of all identified named elements:
				-- {
				-- c
				-- }
				
				-- Allocation plan:
				-- 0:{}
				--	=> {
				--		TID_Moving_t1,
				--		TID_Moving_t3,
				--		TID_Moving_t4,
				--		TID_Moving_t6,
				--		TID_Moving_t2,
				--		TID_Moving_t5}
				
				-- Memory transition processes
				MemoryTransitions_opt_0(id__) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   internal__!TID_Moving_t1 -> Update
						 	   []
						 	   cd__!TID_Moving_t3.in?c:{c|c <- Command, (c==Command_right)} -> Update
						 	   []
						 	   cd__!TID_Moving_t4.in?c:{c|c <- Command, (c==Command_back)} -> Update
						 	   []
						 	   cd__!TID_Moving_t6.in?c:{c|c <- Command, (c==Command_slower)} -> Update
						 	   []
						 	   cd__!TID_Moving_t2.in?c:{c|c <- Command, (c==Command_left)} -> Update
						 	   []
						 	   cd__!TID_Moving_t5.in?c:{c|c <- Command, (c==Command_faster)} -> Update
					within
						Update
				)
				
				-- Memory cell processes
				Memory_opt_c(x__) = ( 
					get_c!x__ -> Memory_opt_c(x__)
					[]
					set_c?x__ -> Memory_opt_c(x__)
				)
				
				-- Composition of memory, StateMachine and Memory transition processes
				
				MemorySTM_opt(id__) =
					sbisim(	
					  dbisim(
					    sbisim(dbisim(sbisim(Memory_opt_c(Command_faster)
					          	[| {|get_c,set_c|} |] 
					          	STM_core(id__)
					          	)\ {|get_c,set_c|}
					          )
					      	  [| {|internal__.TID_Moving_t1,cd__.TID_Moving_t6,cd__.TID_Moving_t4,cd__.TID_Moving_t5,cd__.TID_Moving_t2,cd__.TID_Moving_t3|} |]
					      	  MemoryTransitions_opt_0(id__)
					      	  )\{|internal__.TID_Moving_t1|})
					      )
				
				-- main process
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_c,set_c|},
							{||}
						)
							
						,
						{|internal__.TID_Moving_t1,
						cd__.TID_Moving_t2,
						cd__.TID_Moving_t3,
						cd__.TID_Moving_t4,
						cd__.TID_Moving_t5,
						cd__.TID_Moving_t6|}
					)
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_c,set_c|},
						{||}
					)
				})
				
				MachineInternalEvents = {|
					internal__
				|}
				
				AUX(id__) = (
					(
						STM(id__)
							[|MachineMemorySyncSet|]
						sbisim(diamond(MemoryN(id__)))
					)[[
						cd__.x____ <- cd,
						turn__.x____ <- turn
						| x____ <- TIDS
					]]
					\MachineMemoryHidingSet
				)
				[|{|terminate|}|>SKIP\MachineInternalEvents
				
				
				STM_core(id__) = 
					sbisim(diamond(STM(id__)))
					
				AUX_opt(id__) = 
					(MemorySTM_opt(id__)
					)[[
						cd__.x____ <- cd,
						turn__.x____ <- turn
						| x____ <- TIDS
					]]
					[|{|terminate|}|>SKIP\MachineInternalEvents
			
				-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
						
				FVS__(id__) = AUX_opt(id__)
				Dunopt__(id__) = AUX(id__) \ internal_events
				D__(id__) = AUX_opt(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = ShowV(FVS__(id__))
				VS_O__(id__) = sbisim(diamond(VS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP	
			endmodule
			module stm_ref1
			exports
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
						
				-- shared variable channels
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel gas__: TIDS.InOut
				channel gas: InOut
				channel detect__: TIDS.InOut.Chemical
				channel detect: InOut.Chemical
				
				-- declaring call and ret events for undefined operations
				
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machien module.
				
				
				-- definition of functions used to expose flow channels
				ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
								   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
								   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
								   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
									 
				ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_Detecting
				              | SID_Detecting_CleanAir
				              | SID_Detecting_GasPresent
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_Detecting_t1
				              | TID_Detecting_t2
				              | TID_Detecting_t3
				              | TID_Detecting_t4
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_Detecting_t2,	TID_Detecting_t3,	TID_Detecting_t4
				}
				
				int_int = {|
					gas__.TID_Detecting_t2,
					detect__.TID_Detecting_t2,
					internal__.TID_Detecting_t2,
					gas__.TID_Detecting_t3,
					detect__.TID_Detecting_t3,
					internal__.TID_Detecting_t3,
					gas__.TID_Detecting_t4,
					detect__.TID_Detecting_t4,
					internal__.TID_Detecting_t4
				|}
					
				
				internal_events = {|enter,entered,exit,exited|}
				shared_variable_events = {|
				|}
						
				
				-- declaring all states
				CS_Detecting_CleanAir_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_Detecting_CleanAir,SID_Detecting_GasPresent},
					y____ <- {SID_Detecting_CleanAir}
				|}
				
				
				Detecting_CleanAir_triggers = {|
					gas__.TID_Detecting_t2,
					detect__.TID_Detecting_t4,
					detect__.TID_Detecting_t3
				|}
				
				State_Detecting_CleanAir(id__) = let
					T_Detecting_t2(id__) = gas__!TID_Detecting_t2.in ->  (exit.SID_Detecting_CleanAir.SID_Detecting_CleanAir -> SKIP;
										SKIP;exited.SID_Detecting_CleanAir.SID_Detecting_CleanAir -> SKIP;
										enter!SID_Detecting_CleanAir!SID_Detecting_GasPresent -> entered!SID_Detecting_CleanAir!SID_Detecting_GasPresent ->
										State_Detecting_CleanAir(id__)
					)
					State_Detecting_CleanAir_execute(id__,o____) = SKIP; 
						entered!o____!SID_Detecting_CleanAir ->
						(SKIP; STOP /\ (
							T_Detecting_t2(id__)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t2,TID_Detecting_t4,TID_Detecting_t3}) -> exit?y____:diff(SIDS,{SID_Detecting_CleanAir})!SID_Detecting_CleanAir -> (
									SKIP;
									exited!y____!SID_Detecting_CleanAir -> SKIP);
									State_Detecting_CleanAir(id__)
							[] gas__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t2,TID_Detecting_t4,TID_Detecting_t3})?d____ ->	exit?y____:diff(SIDS,{SID_Detecting_CleanAir})!SID_Detecting_CleanAir -> (
									SKIP;
									exited!y____!SID_Detecting_CleanAir -> SKIP);
									State_Detecting_CleanAir(id__)
							[] detect__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t2,TID_Detecting_t4,TID_Detecting_t3})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Detecting_CleanAir})!SID_Detecting_CleanAir -> (
									SKIP;
									exited!y____!SID_Detecting_CleanAir -> SKIP);
									State_Detecting_CleanAir(id__)
						))
				within
					enter?x____:diff(SIDS,{SID_Detecting_CleanAir})!SID_Detecting_CleanAir -> (State_Detecting_CleanAir_execute(id__,x____))
				
				CS_Detecting_GasPresent_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_Detecting_CleanAir,SID_Detecting_GasPresent},
					y____ <- {SID_Detecting_GasPresent}
				|}
				
				
				Detecting_GasPresent_triggers = {|
					detect__.TID_Detecting_t4,
					gas__.TID_Detecting_t2,
					detect__.TID_Detecting_t3
				|}
				
				State_Detecting_GasPresent(id__) = let
					T_Detecting_t3(id__) = detect__!TID_Detecting_t3.in?aux____ ->  (exit.SID_Detecting_GasPresent.SID_Detecting_GasPresent -> SKIP;
										SKIP;exited.SID_Detecting_GasPresent.SID_Detecting_GasPresent -> SKIP;
										enter!SID_Detecting_GasPresent!SID_Detecting_CleanAir -> entered!SID_Detecting_GasPresent!SID_Detecting_CleanAir ->
										State_Detecting_GasPresent(id__)
					)
					T_Detecting_t4(id__) = detect__!TID_Detecting_t4.in?aux____ ->  (exit.SID_Detecting_GasPresent.SID_Detecting_GasPresent -> SKIP;
										SKIP;exited.SID_Detecting_GasPresent.SID_Detecting_GasPresent -> SKIP;
										enter!SID_Detecting_GasPresent!SID_Detecting_CleanAir -> entered!SID_Detecting_GasPresent!SID_Detecting_CleanAir ->
										State_Detecting_GasPresent(id__)
					)
					State_Detecting_GasPresent_execute(id__,o____) = SKIP; 
						entered!o____!SID_Detecting_GasPresent ->
						(SKIP; STOP /\ (
							T_Detecting_t3(id__)[]
							T_Detecting_t4(id__)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t4,TID_Detecting_t2,TID_Detecting_t3}) -> exit?y____:diff(SIDS,{SID_Detecting_GasPresent})!SID_Detecting_GasPresent -> (
									SKIP;
									exited!y____!SID_Detecting_GasPresent -> SKIP);
									State_Detecting_GasPresent(id__)
							[] gas__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t4,TID_Detecting_t2,TID_Detecting_t3})?d____ ->	exit?y____:diff(SIDS,{SID_Detecting_GasPresent})!SID_Detecting_GasPresent -> (
									SKIP;
									exited!y____!SID_Detecting_GasPresent -> SKIP);
									State_Detecting_GasPresent(id__)
							[] detect__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t4,TID_Detecting_t2,TID_Detecting_t3})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Detecting_GasPresent})!SID_Detecting_GasPresent -> (
									SKIP;
									exited!y____!SID_Detecting_GasPresent -> SKIP);
									State_Detecting_GasPresent(id__)
						))
				within
					enter?x____:diff(SIDS,{SID_Detecting_GasPresent})!SID_Detecting_GasPresent -> (State_Detecting_GasPresent_execute(id__,x____))
				
				
				I_Detecting_i1(id__) = let
					T_Detecting_t1(id__) = internal__!TID_Detecting_t1 -> enter!SID_Detecting!SID_Detecting_CleanAir -> entered!SID_Detecting!SID_Detecting_CleanAir ->
					SKIP
				within
					T_Detecting_t1(id__)
				
				
				State_Detecting_CleanAir_R(id__) = 
					State_Detecting_CleanAir(id__)
						[|diff(int_int,Detecting_CleanAir_triggers)|]
					SKIP
						 		
				State_Detecting_GasPresent_R(id__) = 
					State_Detecting_GasPresent(id__)
						[|diff(int_int,Detecting_GasPresent_triggers)|]
					SKIP
						 		
					
				STM(id__) = (
					I_Detecting_i1(id__)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_Detecting_CleanAir,SID_Detecting_GasPresent}),
								y____ <- {SID_Detecting_CleanAir,SID_Detecting_GasPresent}
						|}|]
					(
						State_Detecting_CleanAir_R(id__)
							[|inter(CS_Detecting_CleanAir_sync,CS_Detecting_GasPresent_sync)|]
						State_Detecting_GasPresent_R(id__)
					)
				)
				
				-- optimized memory process
				
				-- individual memory processes
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__) = 		
				(internal__!TID_Detecting_t1 -> SKIP
				[]
				gas__!TID_Detecting_t2.in -> SKIP
				[]
				detect__!TID_Detecting_t3.in.Chemical_innocuous -> SKIP
				[]
				detect__!TID_Detecting_t4.in.Chemical_anomaly -> SKIP)
				
				MemoryTransitions_Detecting(id__) = (MemoryTransitions(id__); MemoryTransitions_Detecting(id__))			
				
				-- synchronisation, hiding and process sets 
				MemoryVariablesProcesses_Detecting = Union(
					{
						{
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
					|}
				})
				
				-- combined individual memory processes
				MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_Detecting @ P
				
				-- complete memory process	
				MemoryN(id__) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_Detecting(id__)))) \ MemoryVariablesHideSet))
				
				-- optimised memory
				-- Sets of named elements identified according to transition conditions:
				-- {}
				-- Summary of all identified named elements:
				-- {-- }
				
				-- Allocation plan:
				-- 0:{}
				--	=> {
				--		TID_Detecting_t1,
				--		TID_Detecting_t2,
				--		TID_Detecting_t4,
				--		TID_Detecting_t3}
				
				-- Memory transition processes
				MemoryTransitions_opt_0(id__) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   internal__!TID_Detecting_t1 -> Update
						 	   []
						 	   gas__!TID_Detecting_t2.in -> Update
						 	   []
						 	   detect__!TID_Detecting_t4.in.Chemical_anomaly -> Update
						 	   []
						 	   detect__!TID_Detecting_t3.in.Chemical_innocuous -> Update
					within
						Update
				)
				
				-- Memory cell processes
				
				-- Composition of memory, StateMachine and Memory transition processes
				
				MemorySTM_opt(id__) =
					sbisim(	
					  dbisim(
					    sbisim(STM_core(id__)
					      	  [| {|gas__.TID_Detecting_t2,internal__.TID_Detecting_t1,detect__.TID_Detecting_t4,detect__.TID_Detecting_t3|} |]
					      	  MemoryTransitions_opt_0(id__)
					      	  )\{|internal__.TID_Detecting_t1|})
					      )
				
				-- main process
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{||},
							{||}
						)
							
						,
						{|internal__.TID_Detecting_t1,
						gas__.TID_Detecting_t2,
						detect__.TID_Detecting_t3,
						detect__.TID_Detecting_t4|}
					)
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{||},
						{||}
					)
				})
				
				MachineInternalEvents = {|
					internal__
				|}
				
				AUX(id__) = (
					(
						STM(id__)
							[|MachineMemorySyncSet|]
						sbisim(diamond(MemoryN(id__)))
					)[[
						gas__.x____ <- gas,
						detect__.x____ <- detect
						| x____ <- TIDS
					]]
					\MachineMemoryHidingSet
				)
				[|{|terminate|}|>SKIP\MachineInternalEvents
				
				
				STM_core(id__) = 
					sbisim(diamond(STM(id__)))
					
				AUX_opt(id__) = 
					(MemorySTM_opt(id__)
					)[[
						gas__.x____ <- gas,
						detect__.x____ <- detect
						| x____ <- TIDS
					]]
					[|{|terminate|}|>SKIP\MachineInternalEvents
			
				-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
						
				FVS__(id__) = AUX_opt(id__)
				Dunopt__(id__) = AUX(id__) \ internal_events
				D__(id__) = AUX_opt(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = ShowV(FVS__(id__))
				VS_O__(id__) = sbisim(diamond(VS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP	
			endmodule
						
			-- declaring controller events
			channel gas: InOut
			channel turn: InOut.core_real
			channel command: InOut.Command
			channel detect: InOut.Chemical
							
	
		
			channel terminate
		
			-- declaring controller memory
			Memory(id__) = SKIP
			-- declaring controller termination channel
	
		
			D__(id__) = (
				(
					(
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::cd <- command,
							stm_ref0::turn <- turn,
							stm_ref0::incrCall <- incrCall,
							stm_ref0::decrCall <- decrCall
						]]
					)
						[|{|terminate|}|]
					(
						stm_ref1::D__(id__)[[
							stm_ref1::terminate <- terminate,
							stm_ref1::gas <- gas,
							stm_ref1::detect <- detect
						]]
					)
				)
				\diff(
					{|terminate|},
					{|terminate|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
						
			-- VS version
			VS__(id__) = (
				(
					(
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::cd <- command,
							stm_ref0::turn <- turn,
							stm_ref0::incrCall <- incrCall,
							stm_ref0::decrCall <- decrCall
						]]
					)
						[|{|terminate|}|]
					(
						stm_ref1::VS__(id__)[[
							stm_ref1::terminate <- terminate,
							stm_ref1::gas <- gas,
							stm_ref1::detect <- detect
						]]
					)
				)
				\diff(
					{|terminate|},
					{|terminate|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP			
	
						
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__) = sbisim(
				diamond(
					(
						(
							(
								stm_ref0::O__(id__)[[
									stm_ref0::terminate <- terminate,
									stm_ref0::cd <- command,
									stm_ref0::turn <- turn,
									stm_ref0::incrCall <- incrCall,
									stm_ref0::decrCall <- decrCall
								]]
							)
								[|{|terminate|}|]
							(
								stm_ref1::O__(id__)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::gas <- gas,
									stm_ref1::detect <- detect
								]]
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
				)
			)
						
			-- VS_O version
			VS_O__(id__) = sbisim(
				diamond(
					(
						(
							(
								stm_ref0::VS_O__(id__)[[
									stm_ref0::terminate <- terminate,
									stm_ref0::cd <- command,
									stm_ref0::turn <- turn,
									stm_ref0::incrCall <- incrCall,
									stm_ref0::decrCall <- decrCall
								]]
							)
								[|{|terminate|}|]
							(
								stm_ref1::VS_O__(id__)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::gas <- gas,
									stm_ref1::detect <- detect
								]]
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
				)
			)
			
			HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP	
		endmodule
		module ctrl_ref1
			shared_variable_events = {|
			|}		
			
		exports
			transparent diamond
			transparent sbisim
			transparent chase
	
		
			-- declaring call and ret events for undefined operations
		
		
		
			module stm_ref0
			exports
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_c, set_c: Chemical
						
				-- shared variable channels
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel detect__: TIDS.InOut.Chemical
				channel detect: InOut.Chemical
				channel light__: TIDS.InOut.Color
				channel light: InOut.Color
				channel siren__: TIDS.InOut
				channel siren: InOut
				channel flag__: TIDS.InOut
				channel flag: InOut
				
				-- declaring call and ret events for undefined operations
				
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machien module.
				
				
				-- definition of functions used to expose flow channels
				ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
								   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
								   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
								   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
									 
				ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_Signalling
				              | SID_Signalling_Waiting
				              | SID_Signalling_AnomalousGas
				              | SID_Signalling_DangerousGas
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_Signalling_t1
				              | TID_Signalling_t3
				              | TID_Signalling_t4a
				              | TID_Signalling_t4
				              | TID_Signalling_t5
				              | TID_Signalling_t6
				              | TID_Signalling_t7
				              | TID_Signalling_t0
				              | TID_Signalling_t2
				              | TID_Signalling_t8
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_Signalling_t3,	TID_Signalling_t4a,	TID_Signalling_t4,	TID_Signalling_t5,	TID_Signalling_t6,	TID_Signalling_t7,	TID_Signalling_t0,	TID_Signalling_t2,	TID_Signalling_t8
				}
				
				int_int = {|
					detect__.TID_Signalling_t3,
					light__.TID_Signalling_t3,
					siren__.TID_Signalling_t3,
					flag__.TID_Signalling_t3,
					internal__.TID_Signalling_t3,
					detect__.TID_Signalling_t4a,
					light__.TID_Signalling_t4a,
					siren__.TID_Signalling_t4a,
					flag__.TID_Signalling_t4a,
					internal__.TID_Signalling_t4a,
					detect__.TID_Signalling_t4,
					light__.TID_Signalling_t4,
					siren__.TID_Signalling_t4,
					flag__.TID_Signalling_t4,
					internal__.TID_Signalling_t4,
					detect__.TID_Signalling_t5,
					light__.TID_Signalling_t5,
					siren__.TID_Signalling_t5,
					flag__.TID_Signalling_t5,
					internal__.TID_Signalling_t5,
					detect__.TID_Signalling_t6,
					light__.TID_Signalling_t6,
					siren__.TID_Signalling_t6,
					flag__.TID_Signalling_t6,
					internal__.TID_Signalling_t6,
					detect__.TID_Signalling_t7,
					light__.TID_Signalling_t7,
					siren__.TID_Signalling_t7,
					flag__.TID_Signalling_t7,
					internal__.TID_Signalling_t7,
					detect__.TID_Signalling_t0,
					light__.TID_Signalling_t0,
					siren__.TID_Signalling_t0,
					flag__.TID_Signalling_t0,
					internal__.TID_Signalling_t0,
					detect__.TID_Signalling_t2,
					light__.TID_Signalling_t2,
					siren__.TID_Signalling_t2,
					flag__.TID_Signalling_t2,
					internal__.TID_Signalling_t2,
					detect__.TID_Signalling_t8,
					light__.TID_Signalling_t8,
					siren__.TID_Signalling_t8,
					flag__.TID_Signalling_t8,
					internal__.TID_Signalling_t8
				|}
					
				
				internal_events = {|enter,entered,exit,exited|}
				shared_variable_events = {|
				|}
						
				
				-- declaring all states
				CS_Signalling_Waiting_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_Signalling_Waiting,SID_Signalling_AnomalousGas,SID_Signalling_DangerousGas},
					y____ <- {SID_Signalling_Waiting}
				|}
				
				
				Signalling_Waiting_triggers = {|
					detect__.TID_Signalling_t3,
					detect__.TID_Signalling_t4a,
					detect__.TID_Signalling_t5,
					detect__.TID_Signalling_t2,
					detect__.TID_Signalling_t8,
					detect__.TID_Signalling_t7,
					detect__.TID_Signalling_t4,
					detect__.TID_Signalling_t0,
					detect__.TID_Signalling_t6
				|}
				
				State_Signalling_Waiting(id__,
						    const_Signalling_flagTime) = let
					T_Signalling_t3(id__,
							    const_Signalling_flagTime) = detect__!TID_Signalling_t3.in?c -> set_c!c ->  (exit.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
										SKIP;exited.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
										enter!SID_Signalling_Waiting!SID_Signalling_AnomalousGas -> entered!SID_Signalling_Waiting!SID_Signalling_AnomalousGas ->
										State_Signalling_Waiting(id__,
												    const_Signalling_flagTime)
					)
					T_Signalling_t4(id__,
							    const_Signalling_flagTime) = detect__!TID_Signalling_t4.in?c -> set_c!c ->  (exit.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
										SKIP;exited.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
										enter!SID_Signalling_Waiting!SID_Signalling_DangerousGas -> entered!SID_Signalling_Waiting!SID_Signalling_DangerousGas ->
										State_Signalling_Waiting(id__,
												    const_Signalling_flagTime)
					)
					T_Signalling_t0(id__,
							    const_Signalling_flagTime) = detect__!TID_Signalling_t0.in?c -> set_c!c ->  (exit.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
										SKIP;exited.SID_Signalling_Waiting.SID_Signalling_Waiting -> SKIP;
										enter!SID_Signalling_Waiting!SID_Signalling_Waiting -> State_Signalling_Waiting_execute(id__,SID_Signalling_Waiting)
					)
					State_Signalling_Waiting_execute(id__,o____) = true&(light.out!Color_green -> SKIP); 
						entered!o____!SID_Signalling_Waiting ->
						(SKIP; STOP /\ (
							T_Signalling_t3(id__,
									    const_Signalling_flagTime)[]
							T_Signalling_t4(id__,
									    const_Signalling_flagTime)[]
							T_Signalling_t0(id__,
									    const_Signalling_flagTime)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6}) -> exit?y____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (
									SKIP;
									exited!y____!SID_Signalling_Waiting -> SKIP);
									State_Signalling_Waiting(id__,
											    const_Signalling_flagTime)
							[] detect__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (
									SKIP;
									exited!y____!SID_Signalling_Waiting -> SKIP);
									State_Signalling_Waiting(id__,
											    const_Signalling_flagTime)
							[] light__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (
									SKIP;
									exited!y____!SID_Signalling_Waiting -> SKIP);
									State_Signalling_Waiting(id__,
											    const_Signalling_flagTime)
							[] siren__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (
									SKIP;
									exited!y____!SID_Signalling_Waiting -> SKIP);
									State_Signalling_Waiting(id__,
											    const_Signalling_flagTime)
							[] flag__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (
									SKIP;
									exited!y____!SID_Signalling_Waiting -> SKIP);
									State_Signalling_Waiting(id__,
											    const_Signalling_flagTime)
						))
				within
					enter?x____:diff(SIDS,{SID_Signalling_Waiting})!SID_Signalling_Waiting -> (State_Signalling_Waiting_execute(id__,x____))
				
				CS_Signalling_AnomalousGas_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_Signalling_Waiting,SID_Signalling_AnomalousGas,SID_Signalling_DangerousGas},
					y____ <- {SID_Signalling_AnomalousGas}
				|}
				
				
				Signalling_AnomalousGas_triggers = {|
					detect__.TID_Signalling_t3,
					detect__.TID_Signalling_t4a,
					detect__.TID_Signalling_t5,
					detect__.TID_Signalling_t2,
					detect__.TID_Signalling_t8,
					detect__.TID_Signalling_t7,
					detect__.TID_Signalling_t4,
					detect__.TID_Signalling_t0,
					detect__.TID_Signalling_t6
				|}
				
				State_Signalling_AnomalousGas(id__,
						    const_Signalling_flagTime) = let
					T_Signalling_t4a(id__,
							    const_Signalling_flagTime) = detect__!TID_Signalling_t4a.in?c -> set_c!c ->  (exit.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
										SKIP;exited.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
										enter!SID_Signalling_AnomalousGas!SID_Signalling_Waiting -> entered!SID_Signalling_AnomalousGas!SID_Signalling_Waiting ->
										State_Signalling_AnomalousGas(id__,
												    const_Signalling_flagTime)
					)
					T_Signalling_t7(id__,
							    const_Signalling_flagTime) = detect__!TID_Signalling_t7.in?c -> set_c!c ->  (exit.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
										SKIP;exited.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
										enter!SID_Signalling_AnomalousGas!SID_Signalling_DangerousGas -> entered!SID_Signalling_AnomalousGas!SID_Signalling_DangerousGas ->
										State_Signalling_AnomalousGas(id__,
												    const_Signalling_flagTime)
					)
					T_Signalling_t2(id__,
							    const_Signalling_flagTime) = detect__!TID_Signalling_t2.in?c -> set_c!c ->  (exit.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
										SKIP;exited.SID_Signalling_AnomalousGas.SID_Signalling_AnomalousGas -> SKIP;
										enter!SID_Signalling_AnomalousGas!SID_Signalling_AnomalousGas -> State_Signalling_AnomalousGas_execute(id__,SID_Signalling_AnomalousGas)
					)
					State_Signalling_AnomalousGas_execute(id__,o____) = true&(light.out.Color_amber -> SKIP); 
						entered!o____!SID_Signalling_AnomalousGas ->
						(SKIP; STOP /\ (
							T_Signalling_t4a(id__,
									    const_Signalling_flagTime)[]
							T_Signalling_t7(id__,
									    const_Signalling_flagTime)[]
							T_Signalling_t2(id__,
									    const_Signalling_flagTime)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6}) -> exit?y____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (
									SKIP;
									exited!y____!SID_Signalling_AnomalousGas -> SKIP);
									State_Signalling_AnomalousGas(id__,
											    const_Signalling_flagTime)
							[] detect__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (
									SKIP;
									exited!y____!SID_Signalling_AnomalousGas -> SKIP);
									State_Signalling_AnomalousGas(id__,
											    const_Signalling_flagTime)
							[] light__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (
									SKIP;
									exited!y____!SID_Signalling_AnomalousGas -> SKIP);
									State_Signalling_AnomalousGas(id__,
											    const_Signalling_flagTime)
							[] siren__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (
									SKIP;
									exited!y____!SID_Signalling_AnomalousGas -> SKIP);
									State_Signalling_AnomalousGas(id__,
											    const_Signalling_flagTime)
							[] flag__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t2,TID_Signalling_t8,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (
									SKIP;
									exited!y____!SID_Signalling_AnomalousGas -> SKIP);
									State_Signalling_AnomalousGas(id__,
											    const_Signalling_flagTime)
						))
				within
					enter?x____:diff(SIDS,{SID_Signalling_AnomalousGas})!SID_Signalling_AnomalousGas -> (State_Signalling_AnomalousGas_execute(id__,x____))
				
				CS_Signalling_DangerousGas_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_Signalling_Waiting,SID_Signalling_AnomalousGas,SID_Signalling_DangerousGas},
					y____ <- {SID_Signalling_DangerousGas}
				|}
				
				
				Signalling_DangerousGas_triggers = {|
					detect__.TID_Signalling_t3,
					detect__.TID_Signalling_t4a,
					detect__.TID_Signalling_t5,
					detect__.TID_Signalling_t8,
					detect__.TID_Signalling_t2,
					detect__.TID_Signalling_t7,
					detect__.TID_Signalling_t4,
					detect__.TID_Signalling_t0,
					detect__.TID_Signalling_t6
				|}
				
				State_Signalling_DangerousGas(id__,
						    const_Signalling_flagTime) = let
					T_Signalling_t5(id__,
							    const_Signalling_flagTime) = detect__!TID_Signalling_t5.in?c -> set_c!c ->  (exit.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
										SKIP;exited.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
										enter!SID_Signalling_DangerousGas!SID_Signalling_AnomalousGas -> entered!SID_Signalling_DangerousGas!SID_Signalling_AnomalousGas ->
										State_Signalling_DangerousGas(id__,
												    const_Signalling_flagTime)
					)
					T_Signalling_t6(id__,
							    const_Signalling_flagTime) = detect__!TID_Signalling_t6.in?c -> set_c!c ->  (exit.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
										SKIP;exited.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
										enter!SID_Signalling_DangerousGas!SID_Signalling_Waiting -> entered!SID_Signalling_DangerousGas!SID_Signalling_Waiting ->
										State_Signalling_DangerousGas(id__,
												    const_Signalling_flagTime)
					)
					T_Signalling_t8(id__,
							    const_Signalling_flagTime) = detect__!TID_Signalling_t8.in?c -> set_c!c ->  (exit.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
										SKIP;exited.SID_Signalling_DangerousGas.SID_Signalling_DangerousGas -> SKIP;
										enter!SID_Signalling_DangerousGas!SID_Signalling_DangerousGas -> State_Signalling_DangerousGas_execute(id__,SID_Signalling_DangerousGas)
					)
					State_Signalling_DangerousGas_execute(id__,o____) = true&(light.out!Color_red -> SKIP);true&(siren.out -> SKIP);SKIP;true&(flag.out -> SKIP); 
						entered!o____!SID_Signalling_DangerousGas ->
						(SKIP; STOP /\ (
							T_Signalling_t5(id__,
									    const_Signalling_flagTime)[]
							T_Signalling_t6(id__,
									    const_Signalling_flagTime)[]
							T_Signalling_t8(id__,
									    const_Signalling_flagTime)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t8,TID_Signalling_t2,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6}) -> exit?y____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (
									SKIP;
									exited!y____!SID_Signalling_DangerousGas -> SKIP);
									State_Signalling_DangerousGas(id__,
											    const_Signalling_flagTime)
							[] detect__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t8,TID_Signalling_t2,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (
									SKIP;
									exited!y____!SID_Signalling_DangerousGas -> SKIP);
									State_Signalling_DangerousGas(id__,
											    const_Signalling_flagTime)
							[] light__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t8,TID_Signalling_t2,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (
									SKIP;
									exited!y____!SID_Signalling_DangerousGas -> SKIP);
									State_Signalling_DangerousGas(id__,
											    const_Signalling_flagTime)
							[] siren__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t8,TID_Signalling_t2,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (
									SKIP;
									exited!y____!SID_Signalling_DangerousGas -> SKIP);
									State_Signalling_DangerousGas(id__,
											    const_Signalling_flagTime)
							[] flag__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Signalling_t3,TID_Signalling_t4a,TID_Signalling_t5,TID_Signalling_t8,TID_Signalling_t2,TID_Signalling_t7,TID_Signalling_t4,TID_Signalling_t0,TID_Signalling_t6})?d____ ->	exit?y____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (
									SKIP;
									exited!y____!SID_Signalling_DangerousGas -> SKIP);
									State_Signalling_DangerousGas(id__,
											    const_Signalling_flagTime)
						))
				within
					enter?x____:diff(SIDS,{SID_Signalling_DangerousGas})!SID_Signalling_DangerousGas -> (State_Signalling_DangerousGas_execute(id__,x____))
				
				
				I_Signalling_i1(id__,
						    const_Signalling_flagTime) = let
					T_Signalling_t1(id__,
							    const_Signalling_flagTime) = internal__!TID_Signalling_t1 -> enter!SID_Signalling!SID_Signalling_Waiting -> entered!SID_Signalling!SID_Signalling_Waiting ->
					SKIP
				within
					T_Signalling_t1(id__,
							    const_Signalling_flagTime)
				
				
				State_Signalling_Waiting_R(id__,
						    const_Signalling_flagTime) = 
					State_Signalling_Waiting(id__,
							    const_Signalling_flagTime)
						[|diff(int_int,Signalling_Waiting_triggers)|]
					SKIP
						 		
				State_Signalling_AnomalousGas_R(id__,
						    const_Signalling_flagTime) = 
					State_Signalling_AnomalousGas(id__,
							    const_Signalling_flagTime)
						[|diff(int_int,Signalling_AnomalousGas_triggers)|]
					SKIP
						 		
				State_Signalling_DangerousGas_R(id__,
						    const_Signalling_flagTime) = 
					State_Signalling_DangerousGas(id__,
							    const_Signalling_flagTime)
						[|diff(int_int,Signalling_DangerousGas_triggers)|]
					SKIP
						 		
					
				STM(id__,
						    const_Signalling_flagTime) = (
					I_Signalling_i1(id__,
							    const_Signalling_flagTime)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_Signalling_Waiting,SID_Signalling_AnomalousGas,SID_Signalling_DangerousGas}),
								y____ <- {SID_Signalling_Waiting,SID_Signalling_AnomalousGas,SID_Signalling_DangerousGas}
						|}|]
					(
						State_Signalling_Waiting_R(id__,
								    const_Signalling_flagTime)
							[|inter(CS_Signalling_Waiting_sync,union(CS_Signalling_AnomalousGas_sync,CS_Signalling_DangerousGas_sync))|]
						(
							State_Signalling_AnomalousGas_R(id__,
									    const_Signalling_flagTime)
								[|inter(CS_Signalling_AnomalousGas_sync,CS_Signalling_DangerousGas_sync)|]
							State_Signalling_DangerousGas_R(id__,
									    const_Signalling_flagTime)
						)
					)
				)
				
				-- optimized memory process
				channel getV_c: Chemical
				
				-- individual memory processes
				Memory_c(c) = (
					get_c!c -> Memory_c(c)
					[]
					getV_c!c -> Memory_c(c)
					[]
					set_c?x__ -> Memory_c(x__)
					[]
					detect__!TID_Signalling_t3.in?c -> Memory_c(c)
					[]
					detect__!TID_Signalling_t4a.in?c -> Memory_c(c)
					[]
					detect__!TID_Signalling_t4.in?c -> Memory_c(c)
					[]
					detect__!TID_Signalling_t5.in?c -> Memory_c(c)
					[]
					detect__!TID_Signalling_t6.in?c -> Memory_c(c)
					[]
					detect__!TID_Signalling_t7.in?c -> Memory_c(c)
					[]
					detect__!TID_Signalling_t0.in?c -> Memory_c(c)
					[]
					detect__!TID_Signalling_t2.in?c -> Memory_c(c)
					[]
					detect__!TID_Signalling_t8.in?c -> Memory_c(c)
				)
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__, c
							,
						    const_Signalling_flagTime) = 		
				(internal__!TID_Signalling_t1 -> SKIP
				[]
				detect__!TID_Signalling_t3.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> SKIP
				[]
				detect__!TID_Signalling_t4a.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> SKIP
				[]
				detect__!TID_Signalling_t4.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> SKIP
				[]
				detect__!TID_Signalling_t5.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> SKIP
				[]
				detect__!TID_Signalling_t6.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> SKIP
				[]
				detect__!TID_Signalling_t7.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> SKIP
				[]
				detect__!TID_Signalling_t0.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> SKIP
				[]
				detect__!TID_Signalling_t2.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> SKIP
				[]
				detect__!TID_Signalling_t8.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> SKIP[]
				set_c?x__ -> SKIP)
				
				MemoryTransitions_Signalling(id__, const_Signalling_flagTime) = (getV_c?c ->
				MemoryTransitions(id__, c
							,
						    const_Signalling_flagTime); MemoryTransitions_Signalling(id__, const_Signalling_flagTime))			
				
				-- synchronisation, hiding and process sets 
				MemoryVariablesProcesses_Signalling = Union(
					{
						{
							(Memory_c(Chemical_anomaly),{|get_c,detect__.TID_Signalling_t4a,set_c,detect__.TID_Signalling_t7,detect__.TID_Signalling_t6,detect__.TID_Signalling_t8,detect__.TID_Signalling_t3,detect__.TID_Signalling_t2,detect__.TID_Signalling_t5,detect__.TID_Signalling_t4,getV_c,detect__.TID_Signalling_t0|})
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						detect__.TID_Signalling_t4a,
						set_c,
						detect__.TID_Signalling_t7,
						detect__.TID_Signalling_t6,
						detect__.TID_Signalling_t8,
						detect__.TID_Signalling_t3,
						detect__.TID_Signalling_t2,
						detect__.TID_Signalling_t5,
						detect__.TID_Signalling_t4,
						getV_c,
						detect__.TID_Signalling_t0
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getV_c
					|}
				})
				
				-- combined individual memory processes
				MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_Signalling @ P
				
				-- complete memory process	
				MemoryN(id__, const_Signalling_flagTime) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_Signalling(id__, const_Signalling_flagTime)))) \ MemoryVariablesHideSet))
				
				-- optimised memory
				-- Sets of named elements identified according to transition conditions:
				-- {}
				-- Summary of all identified named elements:
				-- {
				-- c
				-- }
				
				-- Allocation plan:
				-- 0:{}
				--	=> {
				--		TID_Signalling_t3,
				--		TID_Signalling_t4a,
				--		TID_Signalling_t1,
				--		TID_Signalling_t5,
				--		TID_Signalling_t2,
				--		TID_Signalling_t8,
				--		TID_Signalling_t7,
				--		TID_Signalling_t4,
				--		TID_Signalling_t0,
				--		TID_Signalling_t6}
				
				-- Memory transition processes
				MemoryTransitions_opt_0(id__) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   detect__!TID_Signalling_t3.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> Update
						 	   []
						 	   detect__!TID_Signalling_t4a.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> Update
						 	   []
						 	   internal__!TID_Signalling_t1 -> Update
						 	   []
						 	   detect__!TID_Signalling_t5.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> Update
						 	   []
						 	   detect__!TID_Signalling_t2.in?c:{c|c <- Chemical, (c==Chemical_anomaly)} -> Update
						 	   []
						 	   detect__!TID_Signalling_t8.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> Update
						 	   []
						 	   detect__!TID_Signalling_t7.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> Update
						 	   []
						 	   detect__!TID_Signalling_t4.in?c:{c|c <- Chemical, (c==Chemical_danger)} -> Update
						 	   []
						 	   detect__!TID_Signalling_t0.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> Update
						 	   []
						 	   detect__!TID_Signalling_t6.in?c:{c|c <- Chemical, (c==Chemical_innocuous)} -> Update
					within
						Update
				)
				
				-- Memory cell processes
				Memory_opt_c(x__) = ( 
					get_c!x__ -> Memory_opt_c(x__)
					[]
					set_c?x__ -> Memory_opt_c(x__)
				)
				
				-- Composition of memory, StateMachine and Memory transition processes
				
				MemorySTM_opt(id__,
						    const_Signalling_flagTime) =
					sbisim(	
					  dbisim(
					    sbisim(dbisim(sbisim(Memory_opt_c(Chemical_anomaly)
					          	[| {|get_c,set_c|} |] 
					          	STM_core(id__,
					          			    const_Signalling_flagTime)
					          	)\ {|get_c,set_c|}
					          )
					      	  [| {|detect__.TID_Signalling_t4a,internal__.TID_Signalling_t1,detect__.TID_Signalling_t7,detect__.TID_Signalling_t6,detect__.TID_Signalling_t8,detect__.TID_Signalling_t3,detect__.TID_Signalling_t2,detect__.TID_Signalling_t5,detect__.TID_Signalling_t4,detect__.TID_Signalling_t0|} |]
					      	  MemoryTransitions_opt_0(id__)
					      	  )\{|internal__.TID_Signalling_t1|})
					      )
				
				-- main process
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_c,set_c|},
							{||}
						)
							
						,
						{|internal__.TID_Signalling_t1,
						detect__.TID_Signalling_t3,
						detect__.TID_Signalling_t4a,
						detect__.TID_Signalling_t4,
						detect__.TID_Signalling_t5,
						detect__.TID_Signalling_t6,
						detect__.TID_Signalling_t7,
						detect__.TID_Signalling_t0,
						detect__.TID_Signalling_t2,
						detect__.TID_Signalling_t8|}
					)
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_c,set_c|},
						{||}
					)
				})
				
				MachineInternalEvents = {|
					internal__
				|}
				
				AUX(id__,
						    const_Signalling_flagTime) = (
					(
						STM(id__,
								    const_Signalling_flagTime)
							[|MachineMemorySyncSet|]
						sbisim(diamond(MemoryN(id__, const_Signalling_flagTime)))
					)[[
						detect__.x____ <- detect,
						light__.x____ <- light,
						siren__.x____ <- siren,
						flag__.x____ <- flag
						| x____ <- TIDS
					]]
					\MachineMemoryHidingSet
				)
				[|{|terminate|}|>SKIP\MachineInternalEvents
				
				
				STM_core(id__,
						    const_Signalling_flagTime) = 
					sbisim(diamond(STM(id__,
							    const_Signalling_flagTime)))
					
				AUX_opt(id__,
						    const_Signalling_flagTime) = 
					(MemorySTM_opt(id__,
							    const_Signalling_flagTime)
					)[[
						detect__.x____ <- detect,
						light__.x____ <- light,
						siren__.x____ <- siren,
						flag__.x____ <- flag
						| x____ <- TIDS
					]]
					[|{|terminate|}|>SKIP\MachineInternalEvents
			
				-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
						
				FVS__(id__,
						    const_Signalling_flagTime) = AUX_opt(id__,
						    const_Signalling_flagTime)
				Dunopt__(id__,
						    const_Signalling_flagTime) = AUX(id__,
						    const_Signalling_flagTime) \ internal_events
				D__(id__,
						    const_Signalling_flagTime) = AUX_opt(id__,
						    const_Signalling_flagTime) \ internal_events
				O__(id__,
						    const_Signalling_flagTime) = sbisim(diamond(D__(id__,
						    const_Signalling_flagTime)))
				VS__(id__,
						    const_Signalling_flagTime) = ShowV(FVS__(id__,
						    const_Signalling_flagTime))
				VS_O__(id__,
						    const_Signalling_flagTime) = sbisim(diamond(VS__(id__,
						    const_Signalling_flagTime)))
				HEXT__(id__,
						    const_Signalling_flagTime) = O__(id__,
						    const_Signalling_flagTime) [|shared_variable_events|] SKIP	
			endmodule
						
			-- declaring controller events
			channel flag: InOut
			channel siren: InOut
			channel lights: InOut.Color
			channel alarm: InOut.Chemical
							
	
		
			channel terminate
		
			-- declaring controller memory
			Memory(id__) = SKIP
			-- declaring controller termination channel
	
		
			D__(id__,
					    const_Microcontroller_stm_ref0_flagTime) = (
				(
					let
						const_Signalling_flagTime = const_Microcontroller_stm_ref0_flagTime
					within 
					stm_ref0::D__(id__,
							    const_Signalling_flagTime)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::detect <- alarm,
						stm_ref0::flag <- flag,
						stm_ref0::siren <- siren,
						stm_ref0::light <- lights
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
						
			-- VS version
			VS__(id__,
					    const_Microcontroller_stm_ref0_flagTime) = (
				(
					let
						const_Signalling_flagTime = const_Microcontroller_stm_ref0_flagTime
					within 
					stm_ref0::VS__(id__,
							    const_Signalling_flagTime)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::detect <- alarm,
						stm_ref0::flag <- flag,
						stm_ref0::siren <- siren,
						stm_ref0::light <- lights
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP			
	
						
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__,
					    const_Microcontroller_stm_ref0_flagTime) = sbisim(
				diamond(
					(
						(
							let
								const_Signalling_flagTime = const_Microcontroller_stm_ref0_flagTime
							within 
							stm_ref0::O__(id__,
									    const_Signalling_flagTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::detect <- alarm,
								stm_ref0::flag <- flag,
								stm_ref0::siren <- siren,
								stm_ref0::light <- lights
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
				)
			)
						
			-- VS_O version
			VS_O__(id__,
					    const_Microcontroller_stm_ref0_flagTime) = sbisim(
				diamond(
					(
						(
							let
								const_Signalling_flagTime = const_Microcontroller_stm_ref0_flagTime
							within 
							stm_ref0::VS_O__(id__,
									    const_Signalling_flagTime)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::detect <- alarm,
								stm_ref0::flag <- flag,
								stm_ref0::siren <- siren,
								stm_ref0::light <- lights
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
				)
			)
			
			HEXT(id__,
					    const_Microcontroller_stm_ref0_flagTime) = O__(id__,
					    const_Microcontroller_stm_ref0_flagTime) [|shared_variable_events|] SKIP	
		endmodule
				
	-- declaring module memory
	Memory(id__) = SKIP
	
	D__(id__,
			    const_Microcontroller_stm_ref0_flagTime) = 		(
			(
				(SKIP)
					[|{||}|]
				(
					(
						(
							ctrl_ref0::D__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::turn <- turn,
								ctrl_ref0::gas <- gas,
								ctrl_ref0::command <- cd,
								ctrl_ref0::incrCall <- incrCall,
								ctrl_ref0::decrCall <- decrCall
							]]
						)
							[|{|terminate, ctrl_ref0::detect|}|]
						(
							ctrl_ref1::D__(id__,
									    const_Microcontroller_stm_ref0_flagTime)[[
								ctrl_ref1::terminate <- terminate,
								ctrl_ref1::alarm.in <- ctrl_ref0::detect.out,
								ctrl_ref1::alarm.out <- ctrl_ref0::detect.in,
								ctrl_ref1::flag <- flag,
								ctrl_ref1::siren <- siren,
								ctrl_ref1::lights <- light
							]]
						)
					)
					\
					diff(
						{|terminate, ctrl_ref0::detect|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- visible state equivalent
	
	VS__(id__,
			    const_Microcontroller_stm_ref0_flagTime) = 		(
			(
				(SKIP)
					[|{||}|]
				(
					(
						(
							ctrl_ref0::VS__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::turn <- turn,
								ctrl_ref0::gas <- gas,
								ctrl_ref0::command <- cd,
								ctrl_ref0::incrCall <- incrCall,
								ctrl_ref0::decrCall <- decrCall
							]]
						)
							[|{|terminate, ctrl_ref0::detect|}|]
						(
							ctrl_ref1::VS__(id__,
									    const_Microcontroller_stm_ref0_flagTime)[[
								ctrl_ref1::terminate <- terminate,
								ctrl_ref1::alarm.in <- ctrl_ref0::detect.out,
								ctrl_ref1::alarm.out <- ctrl_ref0::detect.in,
								ctrl_ref1::flag <- flag,
								ctrl_ref1::siren <- siren,
								ctrl_ref1::lights <- light
							]]
						)
					)
					\
					diff(
						{|terminate, ctrl_ref0::detect|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}	
	
	-- O version (optimised)
	
	O__(id__,
			    const_Microcontroller_stm_ref0_flagTime) = sbisim(diamond(		(
			(
				(SKIP)
					[|{||}|]
				(
					(
						(
							ctrl_ref0::O__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::turn <- turn,
								ctrl_ref0::gas <- gas,
								ctrl_ref0::command <- cd,
								ctrl_ref0::incrCall <- incrCall,
								ctrl_ref0::decrCall <- decrCall
							]]
						)
							[|{|terminate, ctrl_ref0::detect|}|]
						(
							ctrl_ref1::O__(id__,
									    const_Microcontroller_stm_ref0_flagTime)[[
								ctrl_ref1::terminate <- terminate,
								ctrl_ref1::alarm.in <- ctrl_ref0::detect.out,
								ctrl_ref1::alarm.out <- ctrl_ref0::detect.in,
								ctrl_ref1::flag <- flag,
								ctrl_ref1::siren <- siren,
								ctrl_ref1::lights <- light
							]]
						)
					)
					\
					diff(
						{|terminate, ctrl_ref0::detect|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}			
	))
	
	-- visible state optimised equivalent
	
	VS_O__(id__,
			    const_Microcontroller_stm_ref0_flagTime) = sbisim(diamond(		(
			(
				(SKIP)
					[|{||}|]
				(
					(
						(
							ctrl_ref0::VS_O__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::turn <- turn,
								ctrl_ref0::gas <- gas,
								ctrl_ref0::command <- cd,
								ctrl_ref0::incrCall <- incrCall,
								ctrl_ref0::decrCall <- decrCall
							]]
						)
							[|{|terminate, ctrl_ref0::detect|}|]
						(
							ctrl_ref1::VS_O__(id__,
									    const_Microcontroller_stm_ref0_flagTime)[[
								ctrl_ref1::terminate <- terminate,
								ctrl_ref1::alarm.in <- ctrl_ref0::detect.out,
								ctrl_ref1::alarm.out <- ctrl_ref0::detect.in,
								ctrl_ref1::flag <- flag,
								ctrl_ref1::siren <- siren,
								ctrl_ref1::lights <- light
							]]
						)
					)
					\
					diff(
						{|terminate, ctrl_ref0::detect|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}			
	))	
endmodule		



	module OP_incr
	exports
		
	-- These definitions are needed to make the structure of an incompletely defined operation compatible with that of fully defined operations
	MemoryTransitions(id__) = STOP -- this is STOP because MemoryTransitions is put in a choice with the state machine's MemoryTransitions. if it were SKIP, a divergence would be introduced.
	MemoryVariablesProcesses_incr = {}
	MemoryVariablesSyncSet = {}
	MemoryVariablesHideSet = {}
	MachineMemorySyncSet = {}
	MachineMemoryHidingSet = {}
	channel internal__
	D__(id__) = let
		AUX(N) = 
			if (N == 0) then SKIP else SKIP
	within AUX(incr_BOUND)
	O__(id__) = D__(id__)
endmodule
	module OP_decr
	exports
		
	-- These definitions are needed to make the structure of an incompletely defined operation compatible with that of fully defined operations
	MemoryTransitions(id__) = STOP -- this is STOP because MemoryTransitions is put in a choice with the state machine's MemoryTransitions. if it were SKIP, a divergence would be introduced.
	MemoryVariablesProcesses_decr = {}
	MemoryVariablesSyncSet = {}
	MemoryVariablesHideSet = {}
	MachineMemorySyncSet = {}
	MachineMemoryHidingSet = {}
	channel internal__
	D__(id__) = let
		AUX(N) = 
			if (N == 0) then SKIP else SKIP
	within AUX(decr_BOUND)
	O__(id__) = D__(id__)
endmodule

