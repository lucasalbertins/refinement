

	module MainComputer
		shared_variable_events = {|
		|}		
		
	exports
		transparent diamond
		transparent sbisim
		transparent chase

	
		-- declaring call and ret events for undefined operations
		channel incrCall
		channel decrCall
	
		CALL__incr(id__) =  incrCall -> SKIP
		
		CALL__decr(id__) =  decrCall -> SKIP
		
	
	
		module stm_ref0
		exports
			-- flow channels
			channel internal__ : TIDS
			channel enteredV, enterV, exitV, exitedV : SIDS
			channel enter, entered: SIDS.SIDS
			channel exit,exited: SIDS.SIDS
			channel terminate
			
			-- variable channels
			channel get_c, set_c: Command
					
			-- shared variable channels
			
			-- local variable channels for defined operations that are required by the state machine
			
			-- declaring state machine events
			channel cd__: TIDS.InOut.Command
			channel cd: InOut.Command
			channel turn__: TIDS.InOut.core_real
			channel turn: InOut.core_real
			
			-- declaring call and ret events for undefined operations
			channel incrCall
			channel decrCall
			
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machien module.
			CALL__incr(id__) =  incrCall -> SKIP
			
			CALL__decr(id__) =  decrCall -> SKIP
			
			
			
			-- definition of functions used to expose flow channels
			ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
							   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
							   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
							   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
								 
			ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
						[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
						[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
						[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			
			-- declaring identifiers of state and final states
			datatype SIDS = SID_Moving
			              | SID_Moving_Waiting
			
			-- declaring identifiers of transitions
			datatype TIDS = NULLTRANSITION__
			              | TID_Moving_t1
			              | TID_Moving_t2
			              | TID_Moving_t3
			              | TID_Moving_t4
			              | TID_Moving_t5
			              | TID_Moving_t6
			
			-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
			
			ITIDS = {
				TID_Moving_t2,	TID_Moving_t3,	TID_Moving_t4,	TID_Moving_t5,	TID_Moving_t6
			}
			
			int_int = {|
				cd__.TID_Moving_t2,
				turn__.TID_Moving_t2,
				internal__.TID_Moving_t2,
				cd__.TID_Moving_t3,
				turn__.TID_Moving_t3,
				internal__.TID_Moving_t3,
				cd__.TID_Moving_t4,
				turn__.TID_Moving_t4,
				internal__.TID_Moving_t4,
				cd__.TID_Moving_t5,
				turn__.TID_Moving_t5,
				internal__.TID_Moving_t5,
				cd__.TID_Moving_t6,
				turn__.TID_Moving_t6,
				internal__.TID_Moving_t6
			|}
				
			
			internal_events = {|enter,entered,exit,exited|}
			shared_variable_events = {|
			|}
					
			
			-- declaring all states
			CS_Moving_Waiting_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Moving_Waiting},
				y____ <- {SID_Moving_Waiting}
			|}
			
			
			Moving_Waiting_triggers = {|
				cd__.TID_Moving_t3,
				cd__.TID_Moving_t4,
				cd__.TID_Moving_t6,
				cd__.TID_Moving_t2,
				cd__.TID_Moving_t5
			|}
			
			State_Moving_Waiting(id__) = let
				T_Moving_t2(id__) = cd__!TID_Moving_t2.in?c -> set_c!c ->  (exit.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
									SKIP;exited.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
									true&(turn.out!(Neg(90, core_int)) -> SKIP);enter!SID_Moving_Waiting!SID_Moving_Waiting -> State_Moving_Waiting_execute(id__,SID_Moving_Waiting)
				)
				T_Moving_t3(id__) = cd__!TID_Moving_t3.in?c -> set_c!c ->  (exit.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
									SKIP;exited.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
									true&(turn.out.90 -> SKIP);enter!SID_Moving_Waiting!SID_Moving_Waiting -> State_Moving_Waiting_execute(id__,SID_Moving_Waiting)
				)
				T_Moving_t4(id__) = cd__!TID_Moving_t4.in?c -> set_c!c ->  (exit.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
									SKIP;exited.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
									true&(turn.out.180 -> SKIP);enter!SID_Moving_Waiting!SID_Moving_Waiting -> State_Moving_Waiting_execute(id__,SID_Moving_Waiting)
				)
				T_Moving_t5(id__) = cd__!TID_Moving_t5.in?c -> set_c!c ->  (exit.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
									SKIP;exited.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
									true&CALL__incr(
												id__
											);enter!SID_Moving_Waiting!SID_Moving_Waiting -> State_Moving_Waiting_execute(id__,SID_Moving_Waiting)
				)
				T_Moving_t6(id__) = cd__!TID_Moving_t6.in?c -> set_c!c ->  (exit.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
									SKIP;exited.SID_Moving_Waiting.SID_Moving_Waiting -> SKIP;
									true&CALL__decr(
												id__
											);enter!SID_Moving_Waiting!SID_Moving_Waiting -> State_Moving_Waiting_execute(id__,SID_Moving_Waiting)
				)
				State_Moving_Waiting_execute(id__,o____) = SKIP; 
					entered!o____!SID_Moving_Waiting ->
					(SKIP; STOP /\ (
						T_Moving_t2(id__)[]
						T_Moving_t3(id__)[]
						T_Moving_t4(id__)[]
						T_Moving_t5(id__)[]
						T_Moving_t6(id__)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Moving_t3,TID_Moving_t4,TID_Moving_t6,TID_Moving_t2,TID_Moving_t5}) -> exit?y____:diff(SIDS,{SID_Moving_Waiting})!SID_Moving_Waiting -> (
								SKIP;
								exited!y____!SID_Moving_Waiting -> SKIP);
								State_Moving_Waiting(id__)
						[] cd__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Moving_t3,TID_Moving_t4,TID_Moving_t6,TID_Moving_t2,TID_Moving_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Moving_Waiting})!SID_Moving_Waiting -> (
								SKIP;
								exited!y____!SID_Moving_Waiting -> SKIP);
								State_Moving_Waiting(id__)
						[] turn__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Moving_t3,TID_Moving_t4,TID_Moving_t6,TID_Moving_t2,TID_Moving_t5})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Moving_Waiting})!SID_Moving_Waiting -> (
								SKIP;
								exited!y____!SID_Moving_Waiting -> SKIP);
								State_Moving_Waiting(id__)
					))
			within
				enter?x____:diff(SIDS,{SID_Moving_Waiting})!SID_Moving_Waiting -> (State_Moving_Waiting_execute(id__,x____))
			
			
			I_Moving_i1(id__) = let
				T_Moving_t1(id__) = internal__!TID_Moving_t1 -> enter!SID_Moving!SID_Moving_Waiting -> entered!SID_Moving!SID_Moving_Waiting ->
				SKIP
			within
				T_Moving_t1(id__)
			
			
			State_Moving_Waiting_R(id__) = 
				State_Moving_Waiting(id__)
					[|diff(int_int,Moving_Waiting_triggers)|]
				SKIP
					 		
				
			STM(id__) = (
				I_Moving_i1(id__)
					[|
						{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
							x____ <- diff(SIDS,{SID_Moving_Waiting}),
							y____ <- {SID_Moving_Waiting}
					|}|]
				State_Moving_Waiting_R(id__)
			)
			
			-- optimized memory process
			channel getV_c: Command
			
			-- individual memory processes
			Memory_c(c) = (
				get_c!c -> Memory_c(c)
				[]
				getV_c!c -> Memory_c(c)
				[]
				set_c?x__ -> Memory_c(x__)
				[]
				cd__!TID_Moving_t2.in?c -> Memory_c(c)
				[]
				cd__!TID_Moving_t3.in?c -> Memory_c(c)
				[]
				cd__!TID_Moving_t4.in?c -> Memory_c(c)
				[]
				cd__!TID_Moving_t5.in?c -> Memory_c(c)
				[]
				cd__!TID_Moving_t6.in?c -> Memory_c(c)
			)
			
			-- processes that read variables and offer transitions
			MemoryTransitions(id__, c
						) = 		
			(internal__!TID_Moving_t1 -> SKIP
			[]
			cd__!TID_Moving_t2.in?c:{c|c <- Command, (c==Command_left)} -> SKIP
			[]
			cd__!TID_Moving_t3.in?c:{c|c <- Command, (c==Command_right)} -> SKIP
			[]
			cd__!TID_Moving_t4.in?c:{c|c <- Command, (c==Command_back)} -> SKIP
			[]
			cd__!TID_Moving_t5.in?c:{c|c <- Command, (c==Command_faster)} -> SKIP
			[]
			cd__!TID_Moving_t6.in?c:{c|c <- Command, (c==Command_slower)} -> SKIP[]
			set_c?x__ -> SKIP)
			
			MemoryTransitions_Moving(id__) = (getV_c?c ->
			MemoryTransitions(id__, c
						); MemoryTransitions_Moving(id__))			
			
			-- synchronisation, hiding and process sets 
			MemoryVariablesProcesses_Moving = Union(
				{
					{
						(Memory_c(Command_faster),{|cd__.TID_Moving_t6,get_c,set_c,cd__.TID_Moving_t4,cd__.TID_Moving_t5,cd__.TID_Moving_t2,cd__.TID_Moving_t3,getV_c|})
					}
				}
			)
			
			MemoryVariablesSyncSet = Union({
				{|
					cd__.TID_Moving_t6,
					set_c,
					cd__.TID_Moving_t4,
					cd__.TID_Moving_t5,
					cd__.TID_Moving_t2,
					cd__.TID_Moving_t3,
					getV_c
				|}	
			})
			
			MemoryVariablesHideSet = Union({
				{|
					getV_c
				|}
			})
			
			-- combined individual memory processes
			MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_Moving @ P
			
			-- complete memory process	
			MemoryN(id__) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_Moving(id__)))) \ MemoryVariablesHideSet))
			
			-- optimised memory
			-- Sets of named elements identified according to transition conditions:
			-- {}
			-- Summary of all identified named elements:
			-- {
			-- c
			-- }
			
			-- Allocation plan:
			-- 0:{}
			--	=> {
			--		TID_Moving_t1,
			--		TID_Moving_t3,
			--		TID_Moving_t4,
			--		TID_Moving_t6,
			--		TID_Moving_t2,
			--		TID_Moving_t5}
			
			-- Memory transition processes
			MemoryTransitions_opt_0(id__) =
			(
				let
					Update = Current(id__)
					Current(id__)
					 	   = 
					 	   internal__!TID_Moving_t1 -> Update
					 	   []
					 	   cd__!TID_Moving_t3.in?c:{c|c <- Command, (c==Command_right)} -> Update
					 	   []
					 	   cd__!TID_Moving_t4.in?c:{c|c <- Command, (c==Command_back)} -> Update
					 	   []
					 	   cd__!TID_Moving_t6.in?c:{c|c <- Command, (c==Command_slower)} -> Update
					 	   []
					 	   cd__!TID_Moving_t2.in?c:{c|c <- Command, (c==Command_left)} -> Update
					 	   []
					 	   cd__!TID_Moving_t5.in?c:{c|c <- Command, (c==Command_faster)} -> Update
				within
					Update
			)
			
			-- Memory cell processes
			Memory_opt_c(x__) = ( 
				get_c!x__ -> Memory_opt_c(x__)
				[]
				set_c?x__ -> Memory_opt_c(x__)
			)
			
			-- Composition of memory, StateMachine and Memory transition processes
			
			MemorySTM_opt(id__) =
				sbisim(	
				  dbisim(
				    sbisim(dbisim(sbisim(Memory_opt_c(Command_faster)
				          	[| {|get_c,set_c|} |] 
				          	STM_core(id__)
				          	)\ {|get_c,set_c|}
				          )
				      	  [| {|internal__.TID_Moving_t1,cd__.TID_Moving_t6,cd__.TID_Moving_t4,cd__.TID_Moving_t5,cd__.TID_Moving_t2,cd__.TID_Moving_t3|} |]
				      	  MemoryTransitions_opt_0(id__)
				      	  )\{|internal__.TID_Moving_t1|})
				      )
			
			-- main process
			
			MachineMemorySyncSet = Union({
				union(
					union(
						{|get_c,set_c|},
						{||}
					)
						
					,
					{|internal__.TID_Moving_t1,
					cd__.TID_Moving_t2,
					cd__.TID_Moving_t3,
					cd__.TID_Moving_t4,
					cd__.TID_Moving_t5,
					cd__.TID_Moving_t6|}
				)
			})
			
			MachineMemoryHidingSet = Union({
				union(
					{|get_c,set_c|},
					{||}
				)
			})
			
			MachineInternalEvents = {|
				internal__
			|}
			
			AUX(id__) = (
				(
					STM(id__)
						[|MachineMemorySyncSet|]
					sbisim(diamond(MemoryN(id__)))
				)[[
					cd__.x____ <- cd,
					turn__.x____ <- turn
					| x____ <- TIDS
				]]
				\MachineMemoryHidingSet
			)
			[|{|terminate|}|>SKIP\MachineInternalEvents
			
			
			STM_core(id__) = 
				sbisim(diamond(STM(id__)))
				
			AUX_opt(id__) = 
				(MemorySTM_opt(id__)
				)[[
					cd__.x____ <- cd,
					turn__.x____ <- turn
					| x____ <- TIDS
				]]
				[|{|terminate|}|>SKIP\MachineInternalEvents
		
			-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
					
			FVS__(id__) = AUX_opt(id__)
			Dunopt__(id__) = AUX(id__) \ internal_events
			D__(id__) = AUX_opt(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = ShowV(FVS__(id__))
			VS_O__(id__) = sbisim(diamond(VS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP	
		endmodule
		module stm_ref1
		exports
			-- flow channels
			channel internal__ : TIDS
			channel enteredV, enterV, exitV, exitedV : SIDS
			channel enter, entered: SIDS.SIDS
			channel exit,exited: SIDS.SIDS
			channel terminate
			
			-- variable channels
					
			-- shared variable channels
			
			-- local variable channels for defined operations that are required by the state machine
			
			-- declaring state machine events
			channel gas__: TIDS.InOut
			channel gas: InOut
			channel detect__: TIDS.InOut.Chemical
			channel detect: InOut.Chemical
			
			-- declaring call and ret events for undefined operations
			
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machien module.
			
			
			-- definition of functions used to expose flow channels
			ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
							   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
							   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
							   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
								 
			ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
						[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
						[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
						[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			
			-- declaring identifiers of state and final states
			datatype SIDS = SID_Detecting
			              | SID_Detecting_CleanAir
			              | SID_Detecting_GasPresent
			
			-- declaring identifiers of transitions
			datatype TIDS = NULLTRANSITION__
			              | TID_Detecting_t1
			              | TID_Detecting_t2
			              | TID_Detecting_t3
			              | TID_Detecting_t4
			
			-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
			
			ITIDS = {
				TID_Detecting_t2,	TID_Detecting_t3,	TID_Detecting_t4
			}
			
			int_int = {|
				gas__.TID_Detecting_t2,
				detect__.TID_Detecting_t2,
				internal__.TID_Detecting_t2,
				gas__.TID_Detecting_t3,
				detect__.TID_Detecting_t3,
				internal__.TID_Detecting_t3,
				gas__.TID_Detecting_t4,
				detect__.TID_Detecting_t4,
				internal__.TID_Detecting_t4
			|}
				
			
			internal_events = {|enter,entered,exit,exited|}
			shared_variable_events = {|
			|}
					
			
			-- declaring all states
			CS_Detecting_CleanAir_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Detecting_CleanAir,SID_Detecting_GasPresent},
				y____ <- {SID_Detecting_CleanAir}
			|}
			
			
			Detecting_CleanAir_triggers = {|
				gas__.TID_Detecting_t2,
				detect__.TID_Detecting_t4,
				detect__.TID_Detecting_t3
			|}
			
			State_Detecting_CleanAir(id__) = let
				T_Detecting_t2(id__) = gas__!TID_Detecting_t2.in ->  (exit.SID_Detecting_CleanAir.SID_Detecting_CleanAir -> SKIP;
									SKIP;exited.SID_Detecting_CleanAir.SID_Detecting_CleanAir -> SKIP;
									enter!SID_Detecting_CleanAir!SID_Detecting_GasPresent -> entered!SID_Detecting_CleanAir!SID_Detecting_GasPresent ->
									State_Detecting_CleanAir(id__)
				)
				State_Detecting_CleanAir_execute(id__,o____) = SKIP; 
					entered!o____!SID_Detecting_CleanAir ->
					(SKIP; STOP /\ (
						T_Detecting_t2(id__)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t2,TID_Detecting_t4,TID_Detecting_t3}) -> exit?y____:diff(SIDS,{SID_Detecting_CleanAir})!SID_Detecting_CleanAir -> (
								SKIP;
								exited!y____!SID_Detecting_CleanAir -> SKIP);
								State_Detecting_CleanAir(id__)
						[] gas__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t2,TID_Detecting_t4,TID_Detecting_t3})?d____ ->	exit?y____:diff(SIDS,{SID_Detecting_CleanAir})!SID_Detecting_CleanAir -> (
								SKIP;
								exited!y____!SID_Detecting_CleanAir -> SKIP);
								State_Detecting_CleanAir(id__)
						[] detect__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t2,TID_Detecting_t4,TID_Detecting_t3})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Detecting_CleanAir})!SID_Detecting_CleanAir -> (
								SKIP;
								exited!y____!SID_Detecting_CleanAir -> SKIP);
								State_Detecting_CleanAir(id__)
					))
			within
				enter?x____:diff(SIDS,{SID_Detecting_CleanAir})!SID_Detecting_CleanAir -> (State_Detecting_CleanAir_execute(id__,x____))
			
			CS_Detecting_GasPresent_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Detecting_CleanAir,SID_Detecting_GasPresent},
				y____ <- {SID_Detecting_GasPresent}
			|}
			
			
			Detecting_GasPresent_triggers = {|
				detect__.TID_Detecting_t4,
				gas__.TID_Detecting_t2,
				detect__.TID_Detecting_t3
			|}
			
			State_Detecting_GasPresent(id__) = let
				T_Detecting_t3(id__) = detect__!TID_Detecting_t3.in?aux____ ->  (exit.SID_Detecting_GasPresent.SID_Detecting_GasPresent -> SKIP;
									SKIP;exited.SID_Detecting_GasPresent.SID_Detecting_GasPresent -> SKIP;
									enter!SID_Detecting_GasPresent!SID_Detecting_CleanAir -> entered!SID_Detecting_GasPresent!SID_Detecting_CleanAir ->
									State_Detecting_GasPresent(id__)
				)
				T_Detecting_t4(id__) = detect__!TID_Detecting_t4.in?aux____ ->  (exit.SID_Detecting_GasPresent.SID_Detecting_GasPresent -> SKIP;
									SKIP;exited.SID_Detecting_GasPresent.SID_Detecting_GasPresent -> SKIP;
									enter!SID_Detecting_GasPresent!SID_Detecting_CleanAir -> entered!SID_Detecting_GasPresent!SID_Detecting_CleanAir ->
									State_Detecting_GasPresent(id__)
				)
				State_Detecting_GasPresent_execute(id__,o____) = SKIP; 
					entered!o____!SID_Detecting_GasPresent ->
					(SKIP; STOP /\ (
						T_Detecting_t3(id__)[]
						T_Detecting_t4(id__)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t4,TID_Detecting_t2,TID_Detecting_t3}) -> exit?y____:diff(SIDS,{SID_Detecting_GasPresent})!SID_Detecting_GasPresent -> (
								SKIP;
								exited!y____!SID_Detecting_GasPresent -> SKIP);
								State_Detecting_GasPresent(id__)
						[] gas__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t4,TID_Detecting_t2,TID_Detecting_t3})?d____ ->	exit?y____:diff(SIDS,{SID_Detecting_GasPresent})!SID_Detecting_GasPresent -> (
								SKIP;
								exited!y____!SID_Detecting_GasPresent -> SKIP);
								State_Detecting_GasPresent(id__)
						[] detect__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Detecting_t4,TID_Detecting_t2,TID_Detecting_t3})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Detecting_GasPresent})!SID_Detecting_GasPresent -> (
								SKIP;
								exited!y____!SID_Detecting_GasPresent -> SKIP);
								State_Detecting_GasPresent(id__)
					))
			within
				enter?x____:diff(SIDS,{SID_Detecting_GasPresent})!SID_Detecting_GasPresent -> (State_Detecting_GasPresent_execute(id__,x____))
			
			
			I_Detecting_i1(id__) = let
				T_Detecting_t1(id__) = internal__!TID_Detecting_t1 -> enter!SID_Detecting!SID_Detecting_CleanAir -> entered!SID_Detecting!SID_Detecting_CleanAir ->
				SKIP
			within
				T_Detecting_t1(id__)
			
			
			State_Detecting_CleanAir_R(id__) = 
				State_Detecting_CleanAir(id__)
					[|diff(int_int,Detecting_CleanAir_triggers)|]
				SKIP
					 		
			State_Detecting_GasPresent_R(id__) = 
				State_Detecting_GasPresent(id__)
					[|diff(int_int,Detecting_GasPresent_triggers)|]
				SKIP
					 		
				
			STM(id__) = (
				I_Detecting_i1(id__)
					[|
						{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
							x____ <- diff(SIDS,{SID_Detecting_CleanAir,SID_Detecting_GasPresent}),
							y____ <- {SID_Detecting_CleanAir,SID_Detecting_GasPresent}
					|}|]
				(
					State_Detecting_CleanAir_R(id__)
						[|inter(CS_Detecting_CleanAir_sync,CS_Detecting_GasPresent_sync)|]
					State_Detecting_GasPresent_R(id__)
				)
			)
			
			-- optimized memory process
			
			-- individual memory processes
			
			-- processes that read variables and offer transitions
			MemoryTransitions(id__) = 		
			(internal__!TID_Detecting_t1 -> SKIP
			[]
			gas__!TID_Detecting_t2.in -> SKIP
			[]
			detect__!TID_Detecting_t3.in.Chemical_innocuous -> SKIP
			[]
			detect__!TID_Detecting_t4.in.Chemical_anomaly -> SKIP)
			
			MemoryTransitions_Detecting(id__) = (MemoryTransitions(id__); MemoryTransitions_Detecting(id__))			
			
			-- synchronisation, hiding and process sets 
			MemoryVariablesProcesses_Detecting = Union(
				{
					{
					}
				}
			)
			
			MemoryVariablesSyncSet = Union({
				{|
				|}	
			})
			
			MemoryVariablesHideSet = Union({
				{|
				|}
			})
			
			-- combined individual memory processes
			MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_Detecting @ P
			
			-- complete memory process	
			MemoryN(id__) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_Detecting(id__)))) \ MemoryVariablesHideSet))
			
			-- optimised memory
			-- Sets of named elements identified according to transition conditions:
			-- {}
			-- Summary of all identified named elements:
			-- {-- }
			
			-- Allocation plan:
			-- 0:{}
			--	=> {
			--		TID_Detecting_t1,
			--		TID_Detecting_t2,
			--		TID_Detecting_t4,
			--		TID_Detecting_t3}
			
			-- Memory transition processes
			MemoryTransitions_opt_0(id__) =
			(
				let
					Update = Current(id__)
					Current(id__)
					 	   = 
					 	   internal__!TID_Detecting_t1 -> Update
					 	   []
					 	   gas__!TID_Detecting_t2.in -> Update
					 	   []
					 	   detect__!TID_Detecting_t4.in.Chemical_anomaly -> Update
					 	   []
					 	   detect__!TID_Detecting_t3.in.Chemical_innocuous -> Update
				within
					Update
			)
			
			-- Memory cell processes
			
			-- Composition of memory, StateMachine and Memory transition processes
			
			MemorySTM_opt(id__) =
				sbisim(	
				  dbisim(
				    sbisim(STM_core(id__)
				      	  [| {|gas__.TID_Detecting_t2,internal__.TID_Detecting_t1,detect__.TID_Detecting_t4,detect__.TID_Detecting_t3|} |]
				      	  MemoryTransitions_opt_0(id__)
				      	  )\{|internal__.TID_Detecting_t1|})
				      )
			
			-- main process
			
			MachineMemorySyncSet = Union({
				union(
					union(
						{||},
						{||}
					)
						
					,
					{|internal__.TID_Detecting_t1,
					gas__.TID_Detecting_t2,
					detect__.TID_Detecting_t3,
					detect__.TID_Detecting_t4|}
				)
			})
			
			MachineMemoryHidingSet = Union({
				union(
					{||},
					{||}
				)
			})
			
			MachineInternalEvents = {|
				internal__
			|}
			
			AUX(id__) = (
				(
					STM(id__)
						[|MachineMemorySyncSet|]
					sbisim(diamond(MemoryN(id__)))
				)[[
					gas__.x____ <- gas,
					detect__.x____ <- detect
					| x____ <- TIDS
				]]
				\MachineMemoryHidingSet
			)
			[|{|terminate|}|>SKIP\MachineInternalEvents
			
			
			STM_core(id__) = 
				sbisim(diamond(STM(id__)))
				
			AUX_opt(id__) = 
				(MemorySTM_opt(id__)
				)[[
					gas__.x____ <- gas,
					detect__.x____ <- detect
					| x____ <- TIDS
				]]
				[|{|terminate|}|>SKIP\MachineInternalEvents
		
			-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
					
			FVS__(id__) = AUX_opt(id__)
			Dunopt__(id__) = AUX(id__) \ internal_events
			D__(id__) = AUX_opt(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = ShowV(FVS__(id__))
			VS_O__(id__) = sbisim(diamond(VS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP	
		endmodule
					
		-- declaring controller events
		channel gas: InOut
		channel turn: InOut.core_real
		channel command: InOut.Command
		channel detect: InOut.Chemical
						

	
		channel terminate
	
		-- declaring controller memory
		Memory(id__) = SKIP
		-- declaring controller termination channel

	
		D__(id__) = (
			(
				(
					stm_ref0::D__(id__)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::cd <- command,
						stm_ref0::turn <- turn,
						stm_ref0::incrCall <- incrCall,
						stm_ref0::decrCall <- decrCall
					]]
				)
					[|{|terminate|}|]
				(
					stm_ref1::D__(id__)[[
						stm_ref1::terminate <- terminate,
						stm_ref1::gas <- gas,
						stm_ref1::detect <- detect
					]]
				)
			)
			\diff(
				{|terminate|},
				{|terminate|}
			)
				[|
					union(
						{|
						|},
						{|
						|}
					)
				|]
			Memory(id__)
		)
		\ union(
			{|
			|},
			{|
			|}
		)
		[|{|terminate|}|>SKIP
					
		-- VS version
		VS__(id__) = (
			(
				(
					stm_ref0::VS__(id__)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::cd <- command,
						stm_ref0::turn <- turn,
						stm_ref0::incrCall <- incrCall,
						stm_ref0::decrCall <- decrCall
					]]
				)
					[|{|terminate|}|]
				(
					stm_ref1::VS__(id__)[[
						stm_ref1::terminate <- terminate,
						stm_ref1::gas <- gas,
						stm_ref1::detect <- detect
					]]
				)
			)
			\diff(
				{|terminate|},
				{|terminate|}
			)
				[|
					union(
						{|
						|},
						{|
						|}
					)
				|]
			Memory(id__)
		)
		\ union(
			{|
			|},
			{|
			|}
		)
		[|{|terminate|}|>SKIP			

					
		-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
		O__(id__) = sbisim(
			diamond(
				(
					(
						(
							stm_ref0::O__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::cd <- command,
								stm_ref0::turn <- turn,
								stm_ref0::incrCall <- incrCall,
								stm_ref0::decrCall <- decrCall
							]]
						)
							[|{|terminate|}|]
						(
							stm_ref1::O__(id__)[[
								stm_ref1::terminate <- terminate,
								stm_ref1::gas <- gas,
								stm_ref1::detect <- detect
							]]
						)
					)
					\diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			)
		)
					
		-- VS_O version
		VS_O__(id__) = sbisim(
			diamond(
				(
					(
						(
							stm_ref0::VS_O__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::cd <- command,
								stm_ref0::turn <- turn,
								stm_ref0::incrCall <- incrCall,
								stm_ref0::decrCall <- decrCall
							]]
						)
							[|{|terminate|}|]
						(
							stm_ref1::VS_O__(id__)[[
								stm_ref1::terminate <- terminate,
								stm_ref1::gas <- gas,
								stm_ref1::detect <- detect
							]]
						)
					)
					\diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			)
		)
		
		HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP	
	endmodule



