datatype COM = s | r
datatype ID = lf1id|lf2id
datatype ID_SD = sd1id|sd2id
datatype MSG = m2|m1_I|m1_O|m0
subtype A_SIG = m2
subtype B_SIG = m0
subtype B_OPS = m1_I | m1_O
get_id(m2) = m2
get_id(m1_I) = m1_I
get_id(m1_O) = m1_O
get_id(m0) = m0
channel beginInteraction,endInteraction
channel A_mSIG: COM.ID.ID.A_SIG
channel B_mOP: COM.ID.ID.B_OPS
channel B_mSIG: COM.ID.ID.B_SIG
Sequence0_x_A(sd_id,lf1_id,lf2_id) =(B_mSIG.s!lf1_id!lf2_id.m0 -> SKIP);(B_mOP.s!lf1_id!lf2_id.m1_I -> SKIP);(B_mOP.r!lf2_id!lf1_id?out:{x | x <-B_OPS,(get_id(x) == m1_O)} -> SKIP)
Sequence0_y_B(sd_id,lf1_id,lf2_id) =(B_mSIG.r!lf1_id!lf2_id?signal:{x | x <- B_SIG,(get_id(x) == m0)} -> SKIP);(B_mOP.r!lf1_id!lf2_id?oper:{x | x <- B_OPS,(get_id(x) == m1_I)} -> SKIP);(B_mOP.s!lf2_id!lf1_id.m1_O -> SKIP)
Sequence0_x_A_y_B_m1(sd_id,lf1_id,lf2_id) =B_mOP.s.lf1_id.lf2_id?x:{x | x<-B_OPS,get_id(x) == m1_I} -> B_mOP.r.lf1_id.lf2_id!x -> Sequence0_x_A_y_B_m1(sd_id,lf1_id,lf2_id)
Sequence0_y_B_x_A_m1_r(sd_id,lf2_id,lf1_id) = B_mOP.s.lf2_id.lf1_id?x:{x | x<-B_OPS,get_id(x) == m1_O} -> B_mOP.r.lf2_id.lf1_id!x -> Sequence0_y_B_x_A_m1_r(sd_id,lf2_id,lf1_id)
Sequence0_x_A_y_B_m0(sd_id,lf1_id,lf2_id) = B_mSIG.s.lf1_id.lf2_id?x:{x | x<-B_SIG,get_id(x) == m0} -> B_mSIG.r.lf1_id.lf2_id!x -> Sequence0_x_A_y_B_m0(sd_id,lf1_id,lf2_id)
Sequence0_MessagesBuffer(sd_id,lf1_id,lf2_id) = (Sequence0_x_A_y_B_m1(sd_id,lf1_id,lf2_id) ||| Sequence0_y_B_x_A_m1_r(sd_id,lf2_id,lf1_id) ||| Sequence0_x_A_y_B_m0(sd_id,lf1_id,lf2_id))/\endInteraction -> SKIP
Sequence0Parallel(sd_id,lf1_id,lf2_id) = Sequence0_x_A(sd_id,lf1_id,lf2_id)[ {|B_mOP.s.lf1_id.lf2_id.m1_I, B_mOP.r.lf2_id.lf1_id.m1_O, B_mSIG.s.lf1_id.lf2_id.m0|} || {|B_mOP.r.lf1_id.lf2_id.m1_I, B_mOP.s.lf2_id.lf1_id.m1_O, B_mSIG.r.lf1_id.lf2_id.m0|} ]Sequence0_y_B(sd_id,lf1_id,lf2_id)
SD_Sequence0(sd_id,lf1_id,lf2_id) = beginInteraction ->((Sequence0Parallel(sd_id,lf1_id,lf2_id); endInteraction -> SKIP)[|{|B_mOP.s.lf1_id.lf2_id.m1_I,B_mOP.r.lf1_id.lf2_id.m1_I,B_mOP.s.lf2_id.lf1_id.m1_O,B_mOP.r.lf2_id.lf1_id.m1_O,B_mSIG.s.lf1_id.lf2_id.m0,B_mSIG.r.lf1_id.lf2_id.m0,endInteraction|}|]Sequence0_MessagesBuffer(sd_id,lf1_id,lf2_id))
Sequence1_y_A(sd_id,lf1_id,lf2_id) =(B_mSIG.s!lf1_id!lf2_id.m0 -> SKIP);(A_mSIG.r!lf2_id!lf1_id?signal:{x | x <- A_SIG,(get_id(x) == m2)} -> SKIP)
Sequence1_z_B(sd_id,lf1_id,lf2_id) =(B_mSIG.r!lf1_id!lf2_id?signal:{x | x <- B_SIG,(get_id(x) == m0)} -> SKIP);(A_mSIG.s!lf2_id!lf1_id.m2 -> SKIP)
Sequence1_z_B_y_A_m2(sd_id,lf2_id,lf1_id) = A_mSIG.s.lf2_id.lf1_id?x:{x | x<-A_SIG,get_id(x) == m2} -> A_mSIG.r.lf2_id.lf1_id!x -> Sequence1_z_B_y_A_m2(sd_id,lf2_id,lf1_id)
Sequence1_y_A_z_B_m0(sd_id,lf1_id,lf2_id) = B_mSIG.s.lf1_id.lf2_id?x:{x | x<-B_SIG,get_id(x) == m0} -> B_mSIG.r.lf1_id.lf2_id!x -> Sequence1_y_A_z_B_m0(sd_id,lf1_id,lf2_id)
Sequence1_MessagesBuffer(sd_id,lf1_id,lf2_id) = (Sequence1_z_B_y_A_m2(sd_id,lf2_id,lf1_id) ||| Sequence1_y_A_z_B_m0(sd_id,lf1_id,lf2_id))/\endInteraction -> SKIP
Sequence1Parallel(sd_id,lf1_id,lf2_id) = Sequence1_y_A(sd_id,lf1_id,lf2_id)[ {|A_mSIG.r.lf2_id.lf1_id.m2, B_mSIG.s.lf1_id.lf2_id.m0|} || {|A_mSIG.s.lf2_id.lf1_id.m2, B_mSIG.r.lf1_id.lf2_id.m0|} ]Sequence1_z_B(sd_id,lf1_id,lf2_id)
SD_Sequence1(sd_id,lf1_id,lf2_id) = beginInteraction ->((Sequence1Parallel(sd_id,lf1_id,lf2_id); endInteraction -> SKIP)[|{|A_mSIG.s.lf2_id.lf1_id.m2,A_mSIG.r.lf2_id.lf1_id.m2,B_mSIG.s.lf1_id.lf2_id.m0,B_mSIG.r.lf1_id.lf2_id.m0,endInteraction|}|]Sequence1_MessagesBuffer(sd_id,lf1_id,lf2_id))
assert SD_Sequence0(sd1id,lf1id,lf2id) [T= SD_Sequence1(sd2id,lf1id,lf2id)\{|A_mSIG.s.lf2id.lf1id.m2,A_mSIG.r.lf2id.lf1id.m2|}
