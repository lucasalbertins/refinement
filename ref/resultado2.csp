datatype COM = s | r
datatype ID = lf1id|lf2id
datatype ID_SD = sd1id|sd2id
datatype MSG = m2|m1|m0
subtype A_SIG = m2
subtype B_SIG = m1 | m0
get_id(m2) = m2
get_id(m1) = m1
get_id(m0) = m0
channel beginInteraction,endInteraction
channel A_mSIG: COM.ID.ID.A_SIG
channel B_mSIG: COM.ID.ID.B_SIG
Seq0_x_A(sd_id,lf1_id,lf2_id) =(B_mSIG.s!lf1_id!lf2_id.m0 -> SKIP);(B_mSIG.s!lf1_id!lf2_id.m1 -> SKIP)
Seq0_y_B(sd_id,lf1_id,lf2_id) =(B_mSIG.r!lf1_id!lf2_id?signal:{x | x <- B_SIG,(get_id(x) == m0)} -> SKIP);(B_mSIG.r!lf1_id!lf2_id?signal:{x | x <- B_SIG,(get_id(x) == m1)} -> SKIP)
Seq0_x_A_y_B_m1(sd_id,lf1_id,lf2_id) = B_mSIG.s.lf1_id.lf2_id?x:{x | x<-B_SIG,get_id(x) == m1} -> B_mSIG.r.lf1_id.lf2_id!x -> Seq0_x_A_y_B_m1(sd_id,lf1_id,lf2_id)
Seq0_x_A_y_B_m0(sd_id,lf1_id,lf2_id) = B_mSIG.s.lf1_id.lf2_id?x:{x | x<-B_SIG,get_id(x) == m0} -> B_mSIG.r.lf1_id.lf2_id!x -> Seq0_x_A_y_B_m0(sd_id,lf1_id,lf2_id)
Seq0_MessagesBuffer(sd_id,lf1_id,lf2_id) = (Seq0_x_A_y_B_m1(sd_id,lf1_id,lf2_id) ||| Seq0_x_A_y_B_m0(sd_id,lf1_id,lf2_id))/\endInteraction -> SKIP
Seq0Parallel(sd_id,lf1_id,lf2_id) = Seq0_x_A(sd_id,lf1_id,lf2_id)[ {|B_mSIG.s.lf1_id.lf2_id.m1, B_mSIG.s.lf1_id.lf2_id.m0|} || {|B_mSIG.r.lf1_id.lf2_id.m1, B_mSIG.r.lf1_id.lf2_id.m0|} ]Seq0_y_B(sd_id,lf1_id,lf2_id)
SD_Seq0(sd_id,lf1_id,lf2_id) = beginInteraction ->((Seq0Parallel(sd_id,lf1_id,lf2_id); endInteraction -> SKIP)[|{|B_mSIG.s.lf1_id.lf2_id.m1,B_mSIG.r.lf1_id.lf2_id.m1,B_mSIG.s.lf1_id.lf2_id.m0,B_mSIG.r.lf1_id.lf2_id.m0,endInteraction|}|]Seq0_MessagesBuffer(sd_id,lf1_id,lf2_id))
Seq1_y_A(sd_id,lf1_id,lf2_id) =(B_mSIG.s!lf1_id!lf2_id.m0 -> SKIP);(B_mSIG.s!lf1_id!lf2_id.m1 -> SKIP);(A_mSIG.r!lf2_id!lf1_id?signal:{x | x <- A_SIG,(get_id(x) == m2)} -> SKIP)
Seq1_z_B(sd_id,lf1_id,lf2_id) =(B_mSIG.r!lf1_id!lf2_id?signal:{x | x <- B_SIG,(get_id(x) == m0)} -> SKIP);(B_mSIG.r!lf1_id!lf2_id?signal:{x | x <- B_SIG,(get_id(x) == m1)} -> SKIP);(A_mSIG.s!lf2_id!lf1_id.m2 -> SKIP)
Seq1_y_A_z_B_m0(sd_id,lf1_id,lf2_id) = B_mSIG.s.lf1_id.lf2_id?x:{x | x<-B_SIG,get_id(x) == m0} -> B_mSIG.r.lf1_id.lf2_id!x -> Seq1_y_A_z_B_m0(sd_id,lf1_id,lf2_id)
Seq1_y_A_z_B_m1(sd_id,lf1_id,lf2_id) = B_mSIG.s.lf1_id.lf2_id?x:{x | x<-B_SIG,get_id(x) == m1} -> B_mSIG.r.lf1_id.lf2_id!x -> Seq1_y_A_z_B_m1(sd_id,lf1_id,lf2_id)
Seq1_z_B_y_A_m2(sd_id,lf2_id,lf1_id) = A_mSIG.s.lf2_id.lf1_id?x:{x | x<-A_SIG,get_id(x) == m2} -> A_mSIG.r.lf2_id.lf1_id!x -> Seq1_z_B_y_A_m2(sd_id,lf2_id,lf1_id)
Seq1_MessagesBuffer(sd_id,lf1_id,lf2_id) = (Seq1_y_A_z_B_m0(sd_id,lf1_id,lf2_id) ||| Seq1_y_A_z_B_m1(sd_id,lf1_id,lf2_id) ||| Seq1_z_B_y_A_m2(sd_id,lf2_id,lf1_id))/\endInteraction -> SKIP
Seq1Parallel(sd_id,lf1_id,lf2_id) = Seq1_y_A(sd_id,lf1_id,lf2_id)[ {|B_mSIG.s.lf1_id.lf2_id.m0, B_mSIG.s.lf1_id.lf2_id.m1, A_mSIG.r.lf2_id.lf1_id.m2|} || {|B_mSIG.r.lf1_id.lf2_id.m0, B_mSIG.r.lf1_id.lf2_id.m1, A_mSIG.s.lf2_id.lf1_id.m2|} ]Seq1_z_B(sd_id,lf1_id,lf2_id)
SD_Seq1(sd_id,lf1_id,lf2_id) = beginInteraction ->((Seq1Parallel(sd_id,lf1_id,lf2_id); endInteraction -> SKIP)[|{|B_mSIG.s.lf1_id.lf2_id.m0,B_mSIG.r.lf1_id.lf2_id.m0,B_mSIG.s.lf1_id.lf2_id.m1,B_mSIG.r.lf1_id.lf2_id.m1,A_mSIG.s.lf2_id.lf1_id.m2,A_mSIG.r.lf2_id.lf1_id.m2,endInteraction|}|]Seq1_MessagesBuffer(sd_id,lf1_id,lf2_id))
assert SD_Seq0(sd1id,lf1id,lf2id) [T= SD_Seq1(sd2id,lf1id,lf2id)\{|A_mSIG.s.lf2id.lf1id.m2,A_mSIG.r.lf2id.lf1id.m2|}
assert SD_Seq1(sd2id,lf1id,lf2id)\{|A_mSIG.s.lf2id.lf1id.m2,A_mSIG.r.lf2id.lf1id.m2|} [T= SD_Seq0(sd1id,lf1id,lf2id)