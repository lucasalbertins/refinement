countCn_ad2_1 = {1..2}
countUpdate_ad2_1 = {1..2}
countClear_ad2_1 = {1..1}
limiteUpdate_ad2_1 = {(-2)..2}
countLock_ad2_1 = {1..2}
channel startActivity_ad2_1
channel endActivity_ad2_1
channel cn_ad2_1: countCn_ad2_1
channel clear_ad2_1: countClear_ad2_1
channel update_ad2_1: countUpdate_ad2_1.limiteUpdate_ad2_1
channel endDiagram_ad2_1
channel lock_ad2_1: countLock_ad2_1.{0,1}
channel get_value_ad2_1
channel loop
MAIN = ad2_1; LOOP
LOOP = loop -> LOOP
END_DIAGRAM_ad2_1 = endDiagram_ad2_1 -> SKIP
ad2_1 = ((Internal_ad2_1 [|{|update_ad2_1,clear_ad2_1,get_value_ad2_1,endDiagram_ad2_1|}|] TokenManager_ad2_t_1(0)) [|{|lock_ad2_1,get_value_ad2_1,endDiagram_ad2_1|}|] Lock_ad2_t_1(1))
Internal_ad2_1 = StartActivity_ad2_1; Node_ad2_1; EndActivity_ad2_1
StartActivity_ad2_1 = startActivity_ad2_1 -> update_ad2_1.1!1 -> SKIP
EndActivity_ad2_1 = endActivity_ad2_1 -> SKIP
Node_ad2_1 = ((init1_ad2_1 [{|cn_ad2_1.1|}||{|cn_ad2_1.1,lock_ad2_1.1,cn_ad2_1.2,update_ad2_1.2,endDiagram_ad2_1|}] act1_ad2_t_1) [{|cn_ad2_1.1,lock_ad2_1.1,cn_ad2_1.2,update_ad2_1.2,endDiagram_ad2_1|}||{|cn_ad2_1.2,lock_ad2_1.2,clear_ad2_1.1,endDiagram_ad2_1|}] fin1_ad2_t_1)
init1_ad2_1 = cn_ad2_1.1 -> SKIP
act1_ad2_1 = cn_ad2_1.1 -> lock_ad2_1.1.1 -> cn_ad2_1.2 -> update_ad2_1.2!(1-1) -> lock_ad2_1.1.0 -> act1_ad2_1
act1_ad2_t_1 = act1_ad2_1 /\ END_DIAGRAM_ad2_1
fin1_ad2_1 = cn_ad2_1.2 -> lock_ad2_1.2.1 -> clear_ad2_1.1 -> lock_ad2_1.2.0 -> SKIP
fin1_ad2_t_1 = fin1_ad2_1 /\ END_DIAGRAM_ad2_1
TokenManager_ad2_1(x) = update_ad2_1?c?y:limiteUpdate_ad2_1 -> x+y < 10 & x+y > -10 & TokenManager_ad2_1(x+y) [] clear_ad2_1?c -> endDiagram_ad2_1 -> SKIP [] x == 0 & get_value_ad2_1 -> endDiagram_ad2_1 -> SKIP
TokenManager_ad2_t_1(x) = TokenManager_ad2_1(x)								
Lock_ad2_1(x) = x == 1 & lock_ad2_1?c.1 -> Lock_ad2_1(0) [] x == 0 & lock_ad2_1?c.0 -> Lock_ad2_1(1) [] x == 1 & get_value_ad2_1 -> Lock_ad2_1(x)
Lock_ad2_t_1(x) = Lock_ad2_1(x) /\ END_DIAGRAM_ad2_1