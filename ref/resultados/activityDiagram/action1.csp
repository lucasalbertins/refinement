ID_action1 = {1..1}
datatype T = lock | unlock
countCe_action1 = {1..2}
countUpdate_action1 = {1..2}
countClear_action1 = {1..1}
limiteUpdate_action1 = {(0)..(1)}
channel startActivity_action1: ID_action1
channel endActivity_action1: ID_action1
channel ce_action1: countCe_action1
channel clear_action1: countClear_action1
channel update_action1: countUpdate_action1.limiteUpdate_action1
channel endDiagram_action1
channel event_act1_action1
channel lock_act1_action1: T
channel loop
MAIN = action1(1); LOOP
LOOP = loop -> LOOP
END_DIAGRAM_action1 = endDiagram_action1 -> SKIP
action1(ID_action1) = (((Internal_action1(ID_action1) [|{|update_action1,clear_action1,endDiagram_action1|}|] TokenManager_action1_t(0,0))) [|{|lock_act1_action1,endDiagram_action1|}|] Lock_action1)
Internal_action1(ID_action1) = StartActivity_action1(ID_action1); Node_action1; EndActivity_action1(ID_action1)
StartActivity_action1(ID_action1) = startActivity_action1.ID_action1 -> SKIP
EndActivity_action1(ID_action1) = endActivity_action1.ID_action1 -> SKIP
Node_action1 = ((init_action1_t [{|update_action1.1,ce_action1.1,endDiagram_action1|}||{|ce_action1.1,lock_act1_action1,event_act1_action1,update_action1.2,ce_action1.2,endDiagram_action1|}] act1_action1_t) [{|update_action1.1,ce_action1.1,endDiagram_action1,lock_act1_action1,event_act1_action1,update_action1.2,ce_action1.2|}||{|ce_action1.2,clear_action1.1,endDiagram_action1|}] fin1_action1_t)
init1_action1_t = update_action1.1!(1-0) -> ((ce_action1.1 -> SKIP))
act1_action1 = ((ce_action1.1 -> SKIP)); lock_act1_action1.lock -> event_act1_action1 -> lock_act1_action1.unlock -> update_action1.2!(1-1) -> ((ce_action1.2 -> SKIP)); act1_action1
act1_action1_t = act1_action1 /\ END_DIAGRAM_action1
fin1_action1 = ((ce_action1.2 -> SKIP)); clear_action1.1 -> SKIP
fin1_action1_t = fin1_action1 /\ END_DIAGRAM_action1
init_action1_t = (init1_action1_t) /\ END_DIAGRAM_action1
TokenManager_action1(x,init) = update_action1?c?y:limiteUpdate_action1 -> x+y < 10 & x+y > -10 & TokenManager_action1(x+y,1) [] clear_action1?c -> endDiagram_action1 -> SKIP [] x == 0 & init == 1 & endDiagram_action1 -> SKIP
TokenManager_action1_t(x,init) = TokenManager_action1(x,init)
Lock_act1_action1 = lock_act1_action1.lock -> lock_act1_action1.unlock -> Lock_act1_action1 [] endDiagram_action1 -> SKIP
Lock_action1 = Lock_act1_action1