ID_flowFinal3 = {1..1}
datatype T = lock | unlock
x_flowFinal3 = {0..1}
countGet_flowFinal3 = {1..1}
countSet_flowFinal3 = {1..1}
countOe_flowFinal3 = {1..2}
countUpdate_flowFinal3 = {1..3}
countClear_flowFinal3 = {1..1}
limiteUpdate_flowFinal3 = {(-1)..(1)}
channel startActivity_flowFinal3: ID_flowFinal3.x_flowFinal3
channel endActivity_flowFinal3: ID_flowFinal3
channel get_x_flowFinal3: countGet_flowFinal3.x_flowFinal3
channel set_x_flowFinal3: countSet_flowFinal3.x_flowFinal3
channel oe_x_flowFinal3: countOe_flowFinal3.x_flowFinal3
channel clear_flowFinal3: countClear_flowFinal3
channel update_flowFinal3: countUpdate_flowFinal3.limiteUpdate_flowFinal3
channel endDiagram_flowFinal3
channel event_act1_flowFinal3
channel lock_act1_flowFinal3: T
channel loop
MAIN = flowFinal3(1); LOOP
LOOP = loop -> LOOP
END_DIAGRAM_flowFinal3 = endDiagram_flowFinal3 -> SKIP
flowFinal3(ID_flowFinal3) = ((((Internal_flowFinal3(ID_flowFinal3) [|{|update_flowFinal3,clear_flowFinal3,endDiagram_flowFinal3|}|] TokenManager_flowFinal3_t(0,0))) [|{|lock_act1_flowFinal3,endDiagram_flowFinal3|}|] Lock_flowFinal3) [|{|get_x_flowFinal3,set_x_flowFinal3,endActivity_flowFinal3|}|] Mem_flowFinal3)
Internal_flowFinal3(ID_flowFinal3) = StartActivity_flowFinal3(ID_flowFinal3); Node_flowFinal3; EndActivity_flowFinal3(ID_flowFinal3)
StartActivity_flowFinal3(ID_flowFinal3) = startActivity_flowFinal3.ID_flowFinal3?x -> set_x_flowFinal3.1!x -> SKIP
EndActivity_flowFinal3(ID_flowFinal3) = endActivity_flowFinal3.ID_flowFinal3 -> SKIP
Node_flowFinal3 = ((act1_flowFinal3_t [{|oe_x_flowFinal3.1,lock_act1_flowFinal3,event_act1_flowFinal3,update_flowFinal3.2,oe_x_flowFinal3.2,endDiagram_flowFinal3|}||{|oe_x_flowFinal3.2,update_flowFinal3.3,endDiagram_flowFinal3|}] flowFinal1_flowFinal3_t) [{|oe_x_flowFinal3.1,lock_act1_flowFinal3,event_act1_flowFinal3,update_flowFinal3.2,oe_x_flowFinal3.2,endDiagram_flowFinal3,update_flowFinal3.3|}||{|update_flowFinal3.1,oe_x_flowFinal3.1,get_x_flowFinal3.1,endDiagram_flowFinal3|}] init_flowFinal3_t)
parameter_x_t = update_flowFinal3.1!(1-0) -> get_x_flowFinal3.1?x -> ((oe_x_flowFinal3.1!x -> SKIP))
act1_flowFinal3 = oe_x_flowFinal3.1?x -> lock_act1_flowFinal3.lock -> event_act1_flowFinal3 -> lock_act1_flowFinal3.unlock -> update_flowFinal3.2!(1-1) -> ((oe_x_flowFinal3.2!x -> SKIP)); act1_flowFinal3
act1_flowFinal3_t = act1_flowFinal3 /\ END_DIAGRAM_flowFinal3
flowFinal1_flowFinal3 = ((oe_x_flowFinal3.2?x -> SKIP)); update_flowFinal3.3!(0-1) -> flowFinal1_flowFinal3
flowFinal1_flowFinal3_t = flowFinal1_flowFinal3 /\ END_DIAGRAM_flowFinal3
init_flowFinal3_t = (parameter_x_t) /\ END_DIAGRAM_flowFinal3
Mem_flowFinal3_x(x) = get_x_flowFinal3?c!x -> Mem_flowFinal3_x(x) [] set_x_flowFinal3?c?x -> Mem_flowFinal3_x(x)
Mem_flowFinal3_x_t(x) = Mem_flowFinal3_x(x) /\ (endActivity_flowFinal3?x -> SKIP)
Mem_flowFinal3 = Mem_flowFinal3_x_t(0)
TokenManager_flowFinal3(x,init) = update_flowFinal3?c?y:limiteUpdate_flowFinal3 -> x+y < 10 & x+y > -10 & TokenManager_flowFinal3(x+y,1) [] clear_flowFinal3?c -> endDiagram_flowFinal3 -> SKIP [] x == 0 & init == 1 & endDiagram_flowFinal3 -> SKIP
TokenManager_flowFinal3_t(x,init) = TokenManager_flowFinal3(x,init)
Lock_act1_flowFinal3 = lock_act1_flowFinal3.lock -> lock_act1_flowFinal3.unlock -> Lock_act1_flowFinal3 [] endDiagram_flowFinal3 -> SKIP
Lock_flowFinal3 = Lock_act1_flowFinal3