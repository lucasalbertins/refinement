ID_final1 = {1..1}
datatype T = lock | unlock
x_final1 = {0..1}
countGet_final1 = {1..2}
countSet_final1 = {1..2}
countCe_final1 = {1..3}
countOe_final1 = {1..2}
countUpdate_final1 = {1..5}
countClear_final1 = {1..1}
limiteUpdate_final1 = {(0)..(1)}
channel startActivity_final1: ID_final1.x_final1
channel endActivity_final1: ID_final1
channel get_x_final1: countGet_final1.x_final1
channel get_x_act2_final1: countGet_final1.x_final1
channel set_x_final1: countSet_final1.x_final1
channel set_x_act2_final1: countSet_final1.x_final1
channel ce_final1: countCe_final1
channel oe_x_final1: countOe_final1.x_final1
channel clear_final1: countClear_final1
channel update_final1: countUpdate_final1.limiteUpdate_final1
channel endDiagram_final1
channel event_act1_final1,event_act2_final1,event_act3_final1
channel lock_act1_final1,lock_act2_final1,lock_act3_final1: T
channel loop
MAIN = final1(1); LOOP
LOOP = loop -> LOOP
END_DIAGRAM_final1 = endDiagram_final1 -> SKIP
final1(ID_final1) = ((((Internal_final1(ID_final1) [|{|update_final1,clear_final1,endDiagram_final1|}|] TokenManager_final1_t(0,0))) [|{|lock_act1_final1,lock_act2_final1,lock_act3_final1,endDiagram_final1|}|] Lock_final1) [|{|get_x_final1,set_x_final1,endActivity_final1|}|] Mem_final1)
Internal_final1(ID_final1) = StartActivity_final1(ID_final1); Node_final1; EndActivity_final1(ID_final1)
StartActivity_final1(ID_final1) = startActivity_final1.ID_final1?x -> set_x_final1.2!x -> SKIP
EndActivity_final1(ID_final1) = endActivity_final1.ID_final1 -> SKIP
Node_final1 = ((((act1_final1_t [{|ce_final1.1,lock_act1_final1,event_act1_final1,update_final1.4,ce_final1.2,endDiagram_final1|}||{|ce_final1.3,oe_x_final1.2,clear_final1.1,endDiagram_final1|}] fin1_final1_t) [{|ce_final1.1,lock_act1_final1,event_act1_final1,update_final1.4,ce_final1.2,endDiagram_final1,ce_final1.3,oe_x_final1.2,clear_final1.1|}||{|update_final1.3,ce_final1.1,update_final1.1,get_x_final1.1,oe_x_final1.1,endDiagram_final1|}] init_final1_t) [{|oe_x_final1.1,get_x_final1.1,update_final1.1,update_final1.3,ce_final1.1,lock_act1_final1,event_act1_final1,update_final1.4,ce_final1.2,endDiagram_final1,ce_final1.3,oe_x_final1.2,clear_final1.1|}||{|ce_final1.3,lock_act3_final1,event_act3_final1,update_final1.5,ce_final1.2,endDiagram_final1|}] act3_final1_t) [{|ce_final1.2,update_final1.5,event_act3_final1,lock_act3_final1,oe_x_final1.1,get_x_final1.1,update_final1.1,update_final1.3,ce_final1.1,lock_act1_final1,event_act1_final1,update_final1.4,ce_final1.2,endDiagram_final1,ce_final1.3,oe_x_final1.2,clear_final1.1|}||{|oe_x_final1.1,lock_act2_final1,event_act2_final1,update_final1.2,oe_x_final1.2,endDiagram_final1|}] act2_final1_t)
parameter_x_t = update_final1.1!(1-0) -> get_x_final1.1?x -> ((oe_x_final1.1!x -> SKIP))
act2_final1 = ((oe_x_final1.1?x -> set_x_act2_final1.1!x -> SKIP)); lock_act2_final1.lock -> event_act2_final1 -> lock_act2_final1.unlock -> update_final1.2!(1-1) -> get_x_act2_final1.2?x -> ((oe_x_final1.2!(x) -> SKIP)); act2_final1
act2_final1_t = ((act2_final1 /\ END_DIAGRAM_final1) [|{|get_x_act2_final1,set_x_act2_final1,endDiagram_final1|}|] Mem_act2_final1_x_t(0)) \{|get_x_act2_final1,set_x_act2_final1|}
init1_final1_t = update_final1.3!(1-0) -> ((ce_final1.1 -> SKIP))
act1_final1 = ((ce_final1.1 -> SKIP)); lock_act1_final1.lock -> event_act1_final1 -> lock_act1_final1.unlock -> update_final1.4!(1-1) -> ((ce_final1.2 -> SKIP)); act1_final1
act1_final1_t = act1_final1 /\ END_DIAGRAM_final1
act3_final1 = ((ce_final1.2 -> SKIP)); lock_act3_final1.lock -> event_act3_final1 -> lock_act3_final1.unlock -> update_final1.5!(1-1) -> ((ce_final1.3 -> SKIP)); act3_final1
act3_final1_t = act3_final1 /\ END_DIAGRAM_final1
fin1_final1 = ((oe_x_final1.2?x -> SKIP) [] (ce_final1.3 -> SKIP)); clear_final1.1 -> SKIP
fin1_final1_t = fin1_final1 /\ END_DIAGRAM_final1
init_final1_t = (parameter_x_t ||| init1_final1_t) /\ END_DIAGRAM_final1
Mem_act2_final1_x(x) = get_x_act2_final1?c!x -> Mem_act2_final1_x(x) [] set_x_act2_final1?c?x -> Mem_act2_final1_x(x)
Mem_act2_final1_x_t(x) = Mem_act2_final1_x(x) /\ END_DIAGRAM_final1
Mem_final1_x(x) = get_x_final1?c!x -> Mem_final1_x(x) [] set_x_final1?c?x -> Mem_final1_x(x)
Mem_final1_x_t(x) = Mem_final1_x(x) /\ (endActivity_final1?x -> SKIP)
Mem_final1 = Mem_final1_x_t(0)
TokenManager_final1(x,init) = update_final1?c?y:limiteUpdate_final1 -> x+y < 10 & x+y > -10 & TokenManager_final1(x+y,1) [] clear_final1?c -> endDiagram_final1 -> SKIP [] x == 0 & init == 1 & endDiagram_final1 -> SKIP
TokenManager_final1_t(x,init) = TokenManager_final1(x,init)
Lock_act1_final1 = lock_act1_final1.lock -> lock_act1_final1.unlock -> Lock_act1_final1 [] endDiagram_final1 -> SKIP
Lock_act2_final1 = lock_act2_final1.lock -> lock_act2_final1.unlock -> Lock_act2_final1 [] endDiagram_final1 -> SKIP
Lock_act3_final1 = lock_act3_final1.lock -> lock_act3_final1.unlock -> Lock_act3_final1 [] endDiagram_final1 -> SKIP
Lock_final1 = ((Lock_act1_final1 [|{|endDiagram_final1|}|] Lock_act2_final1) [|{|endDiagram_final1|}|] Lock_act3_final1)