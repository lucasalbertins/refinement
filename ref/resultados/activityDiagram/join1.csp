ID_join1 = {1..1}
datatype T = lock | unlock
countCe_join1 = {1..5}
countUpdate_join1 = {1..4}
countClear_join1 = {1..1}
limiteUpdate_join1 = {(-1)..(2)}
channel startActivity_join1: ID_join1
channel endActivity_join1: ID_join1
channel ce_join1: countCe_join1
channel clear_join1: countClear_join1
channel update_join1: countUpdate_join1.limiteUpdate_join1
channel endDiagram_join1
channel event_act1_join1,event_act2_join1
channel lock_act1_join1,lock_act2_join1: T
channel loop
MAIN = join1(1); LOOP
LOOP = loop -> LOOP
END_DIAGRAM_join1 = endDiagram_join1 -> SKIP
join1(ID_join1) = (((Internal_join1(ID_join1) [|{|update_join1,clear_join1,endDiagram_join1|}|] TokenManager_join1_t(0,0))) [|{|lock_act1_join1,lock_act2_join1,endDiagram_join1|}|] Lock_join1)
Internal_join1(ID_join1) = StartActivity_join1(ID_join1); Node_join1; EndActivity_join1(ID_join1)
StartActivity_join1(ID_join1) = startActivity_join1.ID_join1 -> SKIP
EndActivity_join1(ID_join1) = endActivity_join1.ID_join1 -> SKIP
Node_join1 = ((((init_join1_t [{|update_join1.1,ce_join1.1,ce_join1.2,endDiagram_join1|}||{|ce_join1.1,lock_act1_join1,event_act1_join1,update_join1.2,ce_join1.3,endDiagram_join1|}] act1_join1_t) [{|update_join1.1,ce_join1.1,ce_join1.2,endDiagram_join1,lock_act1_join1,event_act1_join1,update_join1.2,ce_join1.3|}||{|ce_join1.5,clear_join1.1,endDiagram_join1|}] fin1_join1_t) [{|update_join1.1,ce_join1.1,ce_join1.2,endDiagram_join1,lock_act1_join1,event_act1_join1,update_join1.2,ce_join1.3,ce_join1.5,clear_join1.1|}||{|ce_join1.2,lock_act2_join1,event_act2_join1,update_join1.3,ce_join1.4,endDiagram_join1|}] act2_join1_t) [{|update_join1.1,ce_join1.1,ce_join1.2,endDiagram_join1,lock_act1_join1,event_act1_join1,update_join1.2,ce_join1.3,ce_join1.5,clear_join1.1,lock_act2_join1,event_act2_join1,update_join1.3,ce_join1.4|}||{|ce_join1.3,ce_join1.4,update_join1.4,ce_join1.5,endDiagram_join1|}] join1_join1_t)
init1_join1_t = update_join1.1!(2-0) -> ((ce_join1.1 -> SKIP) ||| (ce_join1.2 -> SKIP))
act1_join1 = ((ce_join1.1 -> SKIP)); lock_act1_join1.lock -> event_act1_join1 -> lock_act1_join1.unlock -> update_join1.2!(1-1) -> ((ce_join1.3 -> SKIP)); act1_join1
act1_join1_t = act1_join1 /\ END_DIAGRAM_join1
act2_join1 = ((ce_join1.2 -> SKIP)); lock_act2_join1.lock -> event_act2_join1 -> lock_act2_join1.unlock -> update_join1.3!(1-1) -> ((ce_join1.4 -> SKIP)); act2_join1
act2_join1_t = act2_join1 /\ END_DIAGRAM_join1
join1_join1 = ((ce_join1.3 -> SKIP) ||| (ce_join1.4 -> SKIP)); update_join1.4!(1-2) -> ((ce_join1.5 -> SKIP)); join1_join1
join1_join1_t = (join1_join1 /\ END_DIAGRAM_join1)
fin1_join1 = ((ce_join1.5 -> SKIP)); clear_join1.1 -> SKIP
fin1_join1_t = fin1_join1 /\ END_DIAGRAM_join1
init_join1_t = (init1_join1_t) /\ END_DIAGRAM_join1
TokenManager_join1(x,init) = update_join1?c?y:limiteUpdate_join1 -> x+y < 10 & x+y > -10 & TokenManager_join1(x+y,1) [] clear_join1?c -> endDiagram_join1 -> SKIP [] x == 0 & init == 1 & endDiagram_join1 -> SKIP
TokenManager_join1_t(x,init) = TokenManager_join1(x,init)
Lock_act1_join1 = lock_act1_join1.lock -> lock_act1_join1.unlock -> Lock_act1_join1 [] endDiagram_join1 -> SKIP
Lock_act2_join1 = lock_act2_join1.lock -> lock_act2_join1.unlock -> Lock_act2_join1 [] endDiagram_join1 -> SKIP
Lock_join1 = (Lock_act1_join1 [|{|endDiagram_join1|}|] Lock_act2_join1)