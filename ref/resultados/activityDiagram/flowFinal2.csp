ID_flowFinal2 = {1..1}
datatype T = lock | unlock
countCe_flowFinal2 = {1..4}
countUpdate_flowFinal2 = {1..4}
countClear_flowFinal2 = {1..1}
limiteUpdate_flowFinal2 = {(-1)..(2)}
channel startActivity_flowFinal2: ID_flowFinal2
channel endActivity_flowFinal2: ID_flowFinal2
channel ce_flowFinal2: countCe_flowFinal2
channel clear_flowFinal2: countClear_flowFinal2
channel update_flowFinal2: countUpdate_flowFinal2.limiteUpdate_flowFinal2
channel endDiagram_flowFinal2
channel event_act1_flowFinal2,event_act2_flowFinal2
channel lock_act1_flowFinal2,lock_act2_flowFinal2: T
channel loop
MAIN = flowFinal2(1); LOOP
LOOP = loop -> LOOP
END_DIAGRAM_flowFinal2 = endDiagram_flowFinal2 -> SKIP
flowFinal2(ID_flowFinal2) = ((Internal_flowFinal2(ID_flowFinal2) [|{|update_flowFinal2,clear_flowFinal2,endDiagram_flowFinal2|}|] TokenManager_flowFinal2_t(0,0)) [|{|lock_act1_flowFinal2,lock_act2_flowFinal2,endDiagram_flowFinal2|}|] Lock_flowFinal2)
Internal_flowFinal2(ID_flowFinal2) = StartActivity_flowFinal2(ID_flowFinal2); Node_flowFinal2; EndActivity_flowFinal2(ID_flowFinal2)
StartActivity_flowFinal2(ID_flowFinal2) = startActivity_flowFinal2.ID_flowFinal2 -> SKIP
EndActivity_flowFinal2(ID_flowFinal2) = endActivity_flowFinal2.ID_flowFinal2 -> SKIP
Node_flowFinal2 = (((act1_flowFinal2_t [{|ce_flowFinal2.1,lock_act1_flowFinal2,event_act1_flowFinal2,update_flowFinal2.2,ce_flowFinal2.3,endDiagram_flowFinal2|}||{|ce_flowFinal2.3,ce_flowFinal2.4,update_flowFinal2.4,endDiagram_flowFinal2|}] flowFinal1_flowFinal2_t) [{|ce_flowFinal2.4,update_flowFinal2.4,ce_flowFinal2.1,lock_act1_flowFinal2,event_act1_flowFinal2,update_flowFinal2.2,ce_flowFinal2.3,endDiagram_flowFinal2|}||{|update_flowFinal2.1,ce_flowFinal2.1,ce_flowFinal2.2,endDiagram_flowFinal2|}] init_flowFinal2_t) [{|update_flowFinal2.1,ce_flowFinal2.2,ce_flowFinal2.4,update_flowFinal2.4,ce_flowFinal2.1,lock_act1_flowFinal2,event_act1_flowFinal2,update_flowFinal2.2,ce_flowFinal2.3,endDiagram_flowFinal2|}||{|ce_flowFinal2.2,ce_flowFinal2.4,lock_act2_flowFinal2,event_act2_flowFinal2,update_flowFinal2.3,endDiagram_flowFinal2|}] act2_flowFinal2_t)
init1_flowFinal2_t = update_flowFinal2.1!(2-0) -> ((ce_flowFinal2.1 -> SKIP) ||| (ce_flowFinal2.2 -> SKIP))
act1_flowFinal2 = ((ce_flowFinal2.1 -> SKIP)); lock_act1_flowFinal2.lock -> event_act1_flowFinal2 -> lock_act1_flowFinal2.unlock -> update_flowFinal2.2!(1-1) -> ((ce_flowFinal2.3 -> SKIP)); act1_flowFinal2
act1_flowFinal2_t = act1_flowFinal2 /\ END_DIAGRAM_flowFinal2
act2_flowFinal2 = ((ce_flowFinal2.2 -> SKIP)); lock_act2_flowFinal2.lock -> event_act2_flowFinal2 -> lock_act2_flowFinal2.unlock -> update_flowFinal2.3!(1-1) -> ((ce_flowFinal2.4 -> SKIP)); act2_flowFinal2
act2_flowFinal2_t = act2_flowFinal2 /\ END_DIAGRAM_flowFinal2
flowFinal1_flowFinal2 = ((ce_flowFinal2.3 -> SKIP) [] (ce_flowFinal2.4 -> SKIP)); update_flowFinal2.4!(0-1) -> flowFinal1_flowFinal2
flowFinal1_flowFinal2_t = flowFinal1_flowFinal2 /\ END_DIAGRAM_flowFinal2
init_flowFinal2_t = (init1_flowFinal2_t) /\ END_DIAGRAM_flowFinal2
TokenManager_flowFinal2(x,init) = update_flowFinal2?c?y:limiteUpdate_flowFinal2 -> x+y < 10 & x+y > -10 & TokenManager_flowFinal2(x+y,1) [] clear_flowFinal2?c -> endDiagram_flowFinal2 -> SKIP [] x == 0 & init == 1 & endDiagram_flowFinal2 -> SKIP
TokenManager_flowFinal2_t(x,init) = TokenManager_flowFinal2(x,init)
Lock_act1_flowFinal2 = lock_act1_flowFinal2.lock -> lock_act1_flowFinal2.unlock -> Lock_act1_flowFinal2 [] endDiagram_flowFinal2 -> SKIP
Lock_act2_flowFinal2 = lock_act2_flowFinal2.lock -> lock_act2_flowFinal2.unlock -> Lock_act2_flowFinal2 [] endDiagram_flowFinal2 -> SKIP
Lock_flowFinal2 = (Lock_act1_flowFinal2 [|{|endDiagram_flowFinal2|}|] Lock_act2_flowFinal2)