ID_join3 = {1..1}
datatype T = lock | unlock
x_join3 = {0..1}
countGet_join3 = {1..1}
countSet_join3 = {1..1}
countCe_join3 = {1..1}
countOe_join3 = {1..3}
countUpdate_join3 = {1..4}
countClear_join3 = {1..1}
limiteUpdate_join3 = {(-1)..(1)}
channel startActivity_join3: ID_join3.x_join3
channel endActivity_join3: ID_join3
channel get_x_join3: countGet_join3.x_join3
channel set_x_join3: countSet_join3.x_join3
channel ce_join3: countCe_join3
channel oe_x_join3: countOe_join3.x_join3
channel clear_join3: countClear_join3
channel update_join3: countUpdate_join3.limiteUpdate_join3
channel endDiagram_join3
channel event_act1_join3
channel lock_act1_join3: T
channel loop
MAIN = join3(1); LOOP
LOOP = loop -> LOOP
END_DIAGRAM_join3 = endDiagram_join3 -> SKIP
join3(ID_join3) = ((((Internal_join3(ID_join3) [|{|update_join3,clear_join3,endDiagram_join3|}|] TokenManager_join3_t(0,0))) [|{|lock_act1_join3,endDiagram_join3|}|] Lock_join3) [|{|get_x_join3,set_x_join3,endActivity_join3|}|] Mem_join3)
Internal_join3(ID_join3) = StartActivity_join3(ID_join3); Node_join3; EndActivity_join3(ID_join3)
StartActivity_join3(ID_join3) = startActivity_join3.ID_join3?x -> set_x_join3.1!x -> SKIP
EndActivity_join3(ID_join3) = endActivity_join3.ID_join3 -> SKIP
Node_join3 = (((init_join3_t [{|update_join3.1,update_join3.2,oe_x_join3.1,ce_join3.1,get_x_join3.1,endDiagram_join3|}||{|ce_join3.1,oe_x_join3.1,update_join3.3,oe_x_join3.2,endDiagram_join3|}] join3_join3_t) [{|update_join3.1,update_join3.2,oe_x_join3.1,ce_join3.1,get_x_join3.1,update_join3.3,oe_x_join3.2,endDiagram_join3|}||{|oe_x_join3.2,lock_act1_join3,event_act1_join3,update_join3.4,oe_x_join3.3,endDiagram_join3|}] act1_join3_t) [{|update_join3.1,update_join3.2,oe_x_join3.1,ce_join3.1,get_x_join3.1,endDiagram_join3,update_join3.3,oe_x_join3.2,lock_act1_join3,event_act1_join3,update_join3.3,oe_x_join3.3,update_join3.4|}||{|oe_x_join3.3,clear_join3.1,endDiagram_join3|}] fin1_join3_t)
init1_join3_t = update_join3.1!(1-0) -> ((ce_join3.1 -> SKIP))
parameter_x_t = update_join3.2!(1-0) -> get_x_join3.1?x -> ((oe_x_join3.1!x -> SKIP))
join3_join3(x) = ((ce_join3.1 -> SKIP) ||| (oe_x_join3.1?x -> SKIP)); update_join3.3!(1-2) -> ((oe_x_join3.2!x -> SKIP)); join3_join3(x)
join3_join3_t = join3_join3(0) /\ END_DIAGRAM_join3
act1_join3 = oe_x_join3.2?x -> lock_act1_join3.lock -> event_act1_join3 -> lock_act1_join3.unlock -> update_join3.4!(1-1) -> ((oe_x_join3.3!x -> SKIP)); act1_join3
act1_join3_t = act1_join3 /\ END_DIAGRAM_join3
fin1_join3 = ((oe_x_join3.3?x -> SKIP)); clear_join3.1 -> SKIP
fin1_join3_t = fin1_join3 /\ END_DIAGRAM_join3
init_join3_t = (init1_join3_t ||| parameter_x_t) /\ END_DIAGRAM_join3
Mem_join3_x(x) = get_x_join3?c!x -> Mem_join3_x(x) [] set_x_join3?c?x -> Mem_join3_x(x)
Mem_join3_x_t(x) = Mem_join3_x(x) /\ (endActivity_join3?x -> SKIP)
Mem_join3 = Mem_join3_x_t(0)
TokenManager_join3(x,init) = update_join3?c?y:limiteUpdate_join3 -> x+y < 10 & x+y > -10 & TokenManager_join3(x+y,1) [] clear_join3?c -> endDiagram_join3 -> SKIP [] x == 0 & init == 1 & endDiagram_join3 -> SKIP
TokenManager_join3_t(x,init) = TokenManager_join3(x,init)
Lock_act1_join3 = lock_act1_join3.lock -> lock_act1_join3.unlock -> Lock_act1_join3 [] endDiagram_join3 -> SKIP
Lock_join3 = Lock_act1_join3