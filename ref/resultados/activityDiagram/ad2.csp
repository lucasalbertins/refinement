countCn_ad2_1 = {1..2}
countUpdate_ad2_1 = {1..2}
countClear_ad2_1 = {1..1}
limiteUpdate_ad2_1 = {(-2)..2}
datatype T = lock | unlock
channel startActivity_ad2_1
channel endActivity_ad2_1
channel cn_ad2_1: countCn_ad2_1
channel clear_ad2_1: countClear_ad2_1
channel update_ad2_1: countUpdate_ad2_1.limiteUpdate_ad2_1
channel endDiagram_ad2_1
channel event_act1_ad2_1
channel lock_act1_ad2_1: T
channel loop
MAIN = ad2_1; LOOP
LOOP = loop -> LOOP
END_DIAGRAM_ad2_1 = endDiagram_ad2_1 -> SKIP
ad2_1 = (((Internal_ad2_1 [|{|update_ad2_1,clear_ad2_1,endDiagram_ad2_1|}|] TokenManager_ad2_t_1(0,0))) [|{|lock_act1_ad2_1,endDiagram_ad2_1|}|] Lock_act1_ad2_1)
Internal_ad2_1 = StartActivity_ad2_1; Node_ad2_1; EndActivity_ad2_1
StartActivity_ad2_1 = startActivity_ad2_1 -> SKIP
EndActivity_ad2_1 = endActivity_ad2_1 -> SKIP
Node_ad2_1 = ((act1_ad2_t_1 [{|cn_ad2_1.1,lock_act1_ad2_1,event_act1_ad2_1,update_ad2_1.2,cn_ad2_1.2,endDiagram_ad2_1|}||{|cn_ad2_1.2,clear_ad2_1.1,endDiagram_ad2_1|}] fin1_ad2_t_1) [{|cn_ad2_1.1,lock_act1_ad2_1,event_act1_ad2_1,update_ad2_1.2,cn_ad2_1.2,endDiagram_ad2_1,clear_ad2_1.1|}||{|update_ad2_1.1,cn_ad2_1.1|}] init1_ad2_t_1)
init1_ad2_t_1 = update_ad2_1.1!(1-0) -> cn_ad2_1.1 -> SKIP
act1_ad2_1 = cn_ad2_1.1 -> lock_act1_ad2_1.lock -> event_act1_ad2_1 -> update_ad2_1.2!(1-1) -> lock_act1_ad2_1.unlock -> cn_ad2_1.2 -> act1_ad2_1
act1_ad2_t_1 = act1_ad2_1 /\ END_DIAGRAM_ad2_1
fin1_ad2_1 = ((cn_ad2_1.2 -> SKIP)); clear_ad2_1.1 -> SKIP
fin1_ad2_t_1 = fin1_ad2_1 /\ END_DIAGRAM_ad2_1
TokenManager_ad2_1(x,init) = update_ad2_1?c?y:limiteUpdate_ad2_1 -> x+y < 10 & x+y > -10 & TokenManager_ad2_1(x+y,1) [] clear_ad2_1?c -> endDiagram_ad2_1 -> SKIP [] x == 0 & init == 1 & endDiagram_ad2_1 -> SKIP
TokenManager_ad2_t_1(x,init) = TokenManager_ad2_1(x,init)
Lock_act1_ad2_1 = lock_act1_ad2_1.lock -> lock_act1_ad2_1.unlock -> Lock_act1_ad2_1 [] endDiagram_ad2_1 -> SKIP			
Lock_ad2_1 = Lock_act1_ad2_1