ID_initial2 = {1..1}
datatype T = lock | unlock
countCn_initial2 = {1..4}
countUpdate_initial2 = {1..4}
countClear_initial2 = {1..1}
limiteUpdate_initial2 = {(-2)..2}
channel startActivity_initial2: ID_initial2
channel endActivity_initial2: ID_initial2
channel cn_initial2: countCn_initial2
channel clear_initial2: countClear_initial2
channel update_initial2: countUpdate_initial2.limiteUpdate_initial2
channel endDiagram_initial2
channel event_act1_initial2,event_act2_initial2
channel lock_act1_initial2,lock_act2_initial2: T
channel loop
MAIN = initial2(1); LOOP
LOOP = loop -> LOOP
END_DIAGRAM_initial2 = endDiagram_initial2 -> SKIP
initial2(ID_initial2) = (((Internal_initial2(ID_initial2) [|{|update_initial2,clear_initial2,endDiagram_initial2|}|] TokenManager_initial2_t(0,0))) [|{|lock_act1_initial2,endDiagram_initial2|}|] Lock_act1_initial2)
Internal_initial2(ID_initial2) = StartActivity_initial2(ID_initial2); Node_initial2; EndActivity_initial2(ID_initial2)
StartActivity_initial2(ID_initial2) = startActivity_initial2.ID_initial2 -> SKIP
EndActivity_initial2(ID_initial2) = endActivity_initial2.ID_initial2 -> SKIP
Node_initial2 = (((init_initial2_t [{|update_initial2.1,cn_initial2.1,update_initial2.3,cn_initial2.3,endDiagram_initial2|}||{|cn_initial2.1,lock_act1_initial2,event_act1_initial2,update_initial2.2,cn_initial2.2,endDiagram_initial2|}] act1_initial2_t) [{|update_initial2.1,cn_initial2.1,update_initial2.3,cn_initial2.3,endDiagram_initial2,lock_act1_initial2,event_act1_initial2,update_initial2.2,cn_initial2.2|}||{|cn_initial2.2,clear_initial2.1,endDiagram_initial2|}] fin1_initial2_t) [{|update_initial2.1,cn_initial2.1,update_initial2.3,cn_initial2.3,endDiagram_initial2,lock_act1_initial2,event_act1_initial2,update_initial2.2,cn_initial2.2,clear_initial2.1|}||{|cn_initial2.3,lock_act2_initial2,event_act2_initial2,update_initial2.4,cn_initial2.4,endDiagram_initial2|}] act2_initial2_t)
init1_initial2_t = update_initial2.1!(1-0) -> ((cn_initial2.1 -> SKIP))
act1_initial2 = cn_initial2.1 -> lock_act1_initial2.lock -> event_act1_initial2 -> lock_act1_initial2.unlock -> update_initial2.2!(1-1) -> cn_initial2.2 -> act1_initial2
act1_initial2_t = act1_initial2 /\ END_DIAGRAM_initial2
fin1_initial2 = ((cn_initial2.2 -> SKIP)); clear_initial2.1 -> SKIP
fin1_initial2_t = fin1_initial2 /\ END_DIAGRAM_initial2
init2_initial2_t = update_initial2.3!(1-0) -> ((cn_initial2.3 -> SKIP))
act2_initial2 = cn_initial2.3 -> lock_act2_initial2.lock -> event_act2_initial2 -> lock_act2_initial2.unlock -> update_initial2.4!(1-1) -> cn_initial2.4 -> act2_initial2
act2_initial2_t = act2_initial2 /\ END_DIAGRAM_initial2
init_initial2_t = (init1_initial2_t ||| init2_initial2_t) /\ END_DIAGRAM_initial2
TokenManager_initial2(x,init) = update_initial2?c?y:limiteUpdate_initial2 -> x+y < 10 & x+y > -10 & TokenManager_initial2(x+y,1) [] clear_initial2?c -> endDiagram_initial2 -> SKIP [] x == 0 & init == 1 & endDiagram_initial2 -> SKIP
TokenManager_initial2_t(x,init) = TokenManager_initial2(x,init)
Lock_act1_initial2 = lock_act1_initial2.lock -> lock_act1_initial2.unlock -> Lock_act1_initial2 [] endDiagram_initial2 -> SKIP
Lock_act2_initial2 = lock_act2_initial2.lock -> lock_act2_initial2.unlock -> Lock_act2_initial2 [] endDiagram_initial2 -> SKIP
Lock_initial2 = (Lock_act1_initial2 [|{|endDiagram_initial2|}|] Lock_act2_initial2)