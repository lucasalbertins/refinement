typeIn_ad3_1 = {0..1}
countGet_ad3_1 = {1..1}
countSet_ad3_1 = {1..1}
countCn_ad3_1 = {1..4}
countUpdate_ad3_1 = {1..3}
countClear_ad3_1 = {1..1}
limiteUpdate_ad3_1 = {(-2)..2}
datatype T = lock | unlock
channel startActivity_ad3_1: typeIn_ad3_1
channel endActivity_ad3_1
channel set_x_ad3_1, set_y_ad3_1: countSet_ad3_1.typeIn_ad3_1
channel get_x_ad3_1, get_y_ad3_1: countGet_ad3_1.typeIn_ad3_1
channel cn_ad3_1: countCn_ad3_1
channel clear_ad3_1: countClear_ad3_1
channel update_ad3_1: countUpdate_ad3_1.limiteUpdate_ad3_1
channel endDiagram_ad3_1
channel event_act1_ad3_1
channel lock_act1_ad3_1: T
channel loop
MAIN = ad3_1; LOOP
LOOP = loop -> LOOP
END_DIAGRAM_ad3_1 = endDiagram_ad3_1 -> SKIP
ad3_1 = (((Internal_ad3_1 [|{|get_x_ad3_1,set_x_ad3_1,get_y_ad3_1,set_y_ad3_1,endActivity_ad3_1|}|] Mem_ad3_t_1(0,0)) [|{|update_ad3_1,clear_ad3_1,endDiagram_ad3_1|}|] TokenManager_ad3_t_1(0,0)) [|{|lock_act1_ad3_1,endDiagram_ad3_1|}|] Lock_ad3_1)
Internal_ad3_1 = StartActivity_ad3_1; Node_ad3_1; EndActivity_ad3_1
StartActivity_ad3_1 = startActivity_ad3_1?x -> set_x_ad3_1.1!x -> SKIP
EndActivity_ad3_1 = endActivity_ad3_1 -> SKIP
Node_ad2_1 = ((act1_ad2_t_1 [{|cn_ad2_1.1,lock_act1_ad2_1,event_act1_ad2_1,update_ad2_1.2,cn_ad2_1.2,endDiagram_ad2_1|}||{|cn_ad2_1.2,clear_ad2_1.1,endDiagram_ad2_1|}] fin1_ad2_t_1) [{|cn_ad2_1.1,lock_act1_ad2_1,event_act1_ad2_1,update_ad2_1.2,cn_ad2_1.2,endDiagram_ad2_1,clear_ad2_1.1|}||{|update_ad2_1.1,cn_ad2_1.1|}] init1_ad2_t_1)
init1_ad3_t_1 = update_ad3_1.1!(1-0) -> cn_ad3_1.1 -> SKIP
dec1_ad3_1 = cn_ad3_1.1 -> update_ad3_1.2!(1-1) -> get_x_ad3_1.1?x -> (x == 1 & (cn_ad3_1.2 -> SKIP) [] x == 0 & (cn_ad3_1.3 -> SKIP)); dec1_ad3_1
dec1_ad3_t_1 = dec1_ad3_1 /\ END_DIAGRAM_ad3_1
act1_ad3_1 = cn_ad3_1.2 -> lock_act1_ad3_1.lock -> event_act1_ad3_1 -> update_ad3_1.3!(1-1) -> lock_act1_ad3_1.unlock -> cn_ad3_1.4 -> act1_ad3_1
act1_ad3_t_1 = act1_ad3_1 /\ END_DIAGRAM_ad3_1
fin1_ad3_1 = ((cn_ad3_1.3 -> SKIP) [] (cn_ad3_1.4 -> SKIP)); clear_ad3_1.1 -> SKIP
fin1_ad3_t_1 = fin1_ad3_1 /\ END_DIAGRAM_ad3_1
Mem_ad3_1(x,y) = get_x_ad3_1?c!x -> Mem_ad3_1(x,y) [] set_x_ad3_1?c?x -> Mem_ad3_1(x,y) [] get_y_ad3_1?c!y -> Mem_ad3_1(x,y) [] set_y_ad3_1?c?y -> Mem_ad3_1(x,y)
Mem_ad3_t_1(x,y) = Mem_ad3_1(x,y) /\ (endActivity_ad3_1 -> SKIP)					
TokenManager_ad3_1(x,init) = update_ad3_1?c?y:limiteUpdate_ad3_1 -> x+y < 10 & x+y > -10 & TokenManager_ad3_1(x+y,1) [] clear_ad3_1?c -> endDiagram_ad3_1 -> SKIP [] x == 0 & init == 1 & endDiagram_ad3_1 -> SKIP
TokenManager_ad3_t_1(x,init) = TokenManager_ad3_1(x,init)
Lock_act1_ad3_1 = lock_act1_ad3_1.lock -> lock_act1_ad3_1.unlock -> Lock_act1_ad3_1 [] endDiagram_ad3_1 -> SKIP			
Lock_ad3_1 = Lock_act1_ad3_1							